services:
  traefik:
    image: traefik:v3.1
    container_name: sa-traefik
    command:
      - --log.level=DEBUG
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entryPoints.web.address=:80
    ports:
      - 80:80
      - 8800:8080
    depends_on:
      - frontend
    networks:
      - shadowapi
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro

  frontend:
    build:
      context: .
      dockerfile: devops/frontend.prod.Dockerfile
    container_name: sa-frontend
    environment:
      - NODE_ENV=production
    networks:
      - shadowapi
    labels:
      - traefik.enable=true
      - traefik.http.routers.shadowapi-front.rule=Host(`${DOMAIN}`)
      - traefik.http.routers.shadowapi-front.entrypoints=${TRAEFIK_ENTRYPOINT}
      - traefik.http.services.shadowapi-front.loadbalancer.server.port=3000

  backend:
    build:
      context: .
      dockerfile: devops/backend.prod.Dockerfile
    container_name: sa-backend
    working_dir: /app
    depends_on:
      db:
        condition: service_healthy
      db-migrate:
        condition: service_completed_successfully
    environment:
      - SA_ENV=production
      - SA_HOST=0.0.0.0
      - SA_DB_URI=postgres://shadowapi:shadowapi@db/shadowapi
      - SA_LOG_LEVEL=DEBUG
    networks:
      - shadowapi
    volumes:
      - ./spec:/spec/
    labels:
      - traefik.enable=true
      - traefik.http.routers.shadowapi-api.rule=Host(`${DOMAIN}`) && (PathPrefix(`/api/`) || PathPrefix(`/assets/`) || PathPrefix(`/auth/`) || Path(`/login`) || PathPrefix(`/logout/`))
      - traefik.http.routers.shadowapi-api.entrypoints=${TRAEFIK_ENTRYPOINT}
      - traefik.http.services.shadowapi-api.loadbalancer.server.port=8080


  db:
    image: postgres:16-alpine
    container_name: sa-db
    restart: always
    command: ["postgres", "-c", "log_statement=all"]
    networks:
      - shadowapi
    volumes:
      - ./devops/db-init.sh:/docker-entrypoint-initdb.d/init-user-db.sh
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=shadowapi
      - POSTGRES_USER=shadowapi
      - POSTGRES_DB=shadowapi
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "shadowapi"]
      interval: "10s"
      timeout: "30s"
      retries: 5
      start_period: "20s"

  db-migrate:
    container_name: sa-db-migrate
    image: arigaio/atlas:0.30.0
    networks:
      - shadowapi
    command: >
      schema apply
      --url postgres://shadowapi:shadowapi@db:5432/shadowapi?sslmode=disable
      --dev-url postgres://shadowapi:shadowapi@db:5432/shadowapi_schema?sslmode=disable
      --to file://schema.sql
      --auto-approve
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./db/schema.sql:/schema.sql

  nats:
    image: nats:2.10.23
    container_name: sa-nats
    command: ["-js", "--http_port=8222"]
    ports:
      - "4222:4222"
      - "8222:8222"
    networks:
      - shadowapi

volumes:
  postgres_data:
    driver: local
  node_modules:
    driver: local

networks:
  shadowapi:
