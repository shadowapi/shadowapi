// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// DatasourceEmailDeleteParams is parameters of datasource-email-delete operation.
type DatasourceEmailDeleteParams struct {
	// UUID of the email datasource.
	UUID string
}

func unpackDatasourceEmailDeleteParams(packed middleware.Parameters) (params DatasourceEmailDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "uuid",
			In:   "path",
		}
		params.UUID = packed[key].(string)
	}
	return params
}

func decodeDatasourceEmailDeleteParams(args [1]string, argsEscaped bool, r *http.Request) (params DatasourceEmailDeleteParams, _ error) {
	// Decode path: uuid.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "uuid",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.UUID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "uuid",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DatasourceEmailGetParams is parameters of datasource-email-get operation.
type DatasourceEmailGetParams struct {
	// UUID of the email datasource.
	UUID string
}

func unpackDatasourceEmailGetParams(packed middleware.Parameters) (params DatasourceEmailGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "uuid",
			In:   "path",
		}
		params.UUID = packed[key].(string)
	}
	return params
}

func decodeDatasourceEmailGetParams(args [1]string, argsEscaped bool, r *http.Request) (params DatasourceEmailGetParams, _ error) {
	// Decode path: uuid.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "uuid",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.UUID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "uuid",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DatasourceEmailListParams is parameters of datasource-email-list operation.
type DatasourceEmailListParams struct {
	// Offset records.
	Offset OptInt32
	// Limit records.
	Limit OptInt32
}

func unpackDatasourceEmailListParams(packed middleware.Parameters) (params DatasourceEmailListParams) {
	{
		key := middleware.ParameterKey{
			Name: "offset",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Offset = v.(OptInt32)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptInt32)
		}
	}
	return params
}

func decodeDatasourceEmailListParams(args [0]string, argsEscaped bool, r *http.Request) (params DatasourceEmailListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: offset.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "offset",
			Style:   uri.QueryStyleForm,
			Explode: false,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOffsetVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotOffsetVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Offset.SetTo(paramsDotOffsetVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "offset",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: false,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// DatasourceEmailRunPipelineParams is parameters of datasource-email-run-pipeline operation.
type DatasourceEmailRunPipelineParams struct {
	// UUID of the datasource base object.
	UUID string
}

func unpackDatasourceEmailRunPipelineParams(packed middleware.Parameters) (params DatasourceEmailRunPipelineParams) {
	{
		key := middleware.ParameterKey{
			Name: "uuid",
			In:   "path",
		}
		params.UUID = packed[key].(string)
	}
	return params
}

func decodeDatasourceEmailRunPipelineParams(args [1]string, argsEscaped bool, r *http.Request) (params DatasourceEmailRunPipelineParams, _ error) {
	// Decode path: uuid.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "uuid",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.UUID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "uuid",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DatasourceEmailUpdateParams is parameters of datasource-email-update operation.
type DatasourceEmailUpdateParams struct {
	// UUID of the datasource base object.
	UUID string
}

func unpackDatasourceEmailUpdateParams(packed middleware.Parameters) (params DatasourceEmailUpdateParams) {
	{
		key := middleware.ParameterKey{
			Name: "uuid",
			In:   "path",
		}
		params.UUID = packed[key].(string)
	}
	return params
}

func decodeDatasourceEmailUpdateParams(args [1]string, argsEscaped bool, r *http.Request) (params DatasourceEmailUpdateParams, _ error) {
	// Decode path: uuid.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "uuid",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.UUID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "uuid",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DatasourceSetOAuth2ClientParams is parameters of datasource-set-oauth2-client operation.
type DatasourceSetOAuth2ClientParams struct {
	// UUID of the email datasource.
	UUID string
}

func unpackDatasourceSetOAuth2ClientParams(packed middleware.Parameters) (params DatasourceSetOAuth2ClientParams) {
	{
		key := middleware.ParameterKey{
			Name: "uuid",
			In:   "path",
		}
		params.UUID = packed[key].(string)
	}
	return params
}

func decodeDatasourceSetOAuth2ClientParams(args [1]string, argsEscaped bool, r *http.Request) (params DatasourceSetOAuth2ClientParams, _ error) {
	// Decode path: uuid.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "uuid",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.UUID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "uuid",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// OAuth2ClientCallbackParams is parameters of oauth2-client-callback operation.
type OAuth2ClientCallbackParams struct {
	// State UUID.
	State OptString
	// OAuth2 code.
	Code OptString
}

func unpackOAuth2ClientCallbackParams(packed middleware.Parameters) (params OAuth2ClientCallbackParams) {
	{
		key := middleware.ParameterKey{
			Name: "state",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.State = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "code",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Code = v.(OptString)
		}
	}
	return params
}

func decodeOAuth2ClientCallbackParams(args [0]string, argsEscaped bool, r *http.Request) (params OAuth2ClientCallbackParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: state.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "state",
			Style:   uri.QueryStyleForm,
			Explode: false,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStateVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotStateVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.State.SetTo(paramsDotStateVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "state",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: code.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "code",
			Style:   uri.QueryStyleForm,
			Explode: false,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotCodeVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotCodeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Code.SetTo(paramsDotCodeVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "code",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// OAuth2ClientDeleteParams is parameters of oauth2-client-delete operation.
type OAuth2ClientDeleteParams struct {
	// ID of the connection base object.
	ID string
}

func unpackOAuth2ClientDeleteParams(packed middleware.Parameters) (params OAuth2ClientDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(string)
	}
	return params
}

func decodeOAuth2ClientDeleteParams(args [1]string, argsEscaped bool, r *http.Request) (params OAuth2ClientDeleteParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// OAuth2ClientGetParams is parameters of oauth2-client-get operation.
type OAuth2ClientGetParams struct {
	// ClientID of the OAuth2 client.
	ID string
}

func unpackOAuth2ClientGetParams(packed middleware.Parameters) (params OAuth2ClientGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(string)
	}
	return params
}

func decodeOAuth2ClientGetParams(args [1]string, argsEscaped bool, r *http.Request) (params OAuth2ClientGetParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// OAuth2ClientListParams is parameters of oauth2-client-list operation.
type OAuth2ClientListParams struct {
	// Offset records.
	Offset OptInt32
	// Limit records.
	Limit OptInt32
}

func unpackOAuth2ClientListParams(packed middleware.Parameters) (params OAuth2ClientListParams) {
	{
		key := middleware.ParameterKey{
			Name: "offset",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Offset = v.(OptInt32)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptInt32)
		}
	}
	return params
}

func decodeOAuth2ClientListParams(args [0]string, argsEscaped bool, r *http.Request) (params OAuth2ClientListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: offset.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "offset",
			Style:   uri.QueryStyleForm,
			Explode: false,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOffsetVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotOffsetVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Offset.SetTo(paramsDotOffsetVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "offset",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: false,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// OAuth2ClientTokenDeleteParams is parameters of oauth2-client-token-delete operation.
type OAuth2ClientTokenDeleteParams struct {
	// UUID of the token to delete.
	UUID string
	// Datasource UUID to get tokens for.
	DatasourceUUID string
}

func unpackOAuth2ClientTokenDeleteParams(packed middleware.Parameters) (params OAuth2ClientTokenDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "uuid",
			In:   "path",
		}
		params.UUID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "datasource_uuid",
			In:   "path",
		}
		params.DatasourceUUID = packed[key].(string)
	}
	return params
}

func decodeOAuth2ClientTokenDeleteParams(args [2]string, argsEscaped bool, r *http.Request) (params OAuth2ClientTokenDeleteParams, _ error) {
	// Decode path: uuid.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "uuid",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.UUID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "uuid",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: datasource_uuid.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "datasource_uuid",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.DatasourceUUID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "datasource_uuid",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// OAuth2ClientTokenListParams is parameters of oauth2-client-token-list operation.
type OAuth2ClientTokenListParams struct {
	// UUID of the datasource base object.
	DatasourceUUID string
}

func unpackOAuth2ClientTokenListParams(packed middleware.Parameters) (params OAuth2ClientTokenListParams) {
	{
		key := middleware.ParameterKey{
			Name: "datasource_uuid",
			In:   "path",
		}
		params.DatasourceUUID = packed[key].(string)
	}
	return params
}

func decodeOAuth2ClientTokenListParams(args [1]string, argsEscaped bool, r *http.Request) (params OAuth2ClientTokenListParams, _ error) {
	// Decode path: datasource_uuid.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "datasource_uuid",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.DatasourceUUID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "datasource_uuid",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// OAuth2ClientUpdateParams is parameters of oauth2-client-update operation.
type OAuth2ClientUpdateParams struct {
	// ClientID of the OAuth2 client details.
	ID string
}

func unpackOAuth2ClientUpdateParams(packed middleware.Parameters) (params OAuth2ClientUpdateParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(string)
	}
	return params
}

func decodeOAuth2ClientUpdateParams(args [1]string, argsEscaped bool, r *http.Request) (params OAuth2ClientUpdateParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// PipelineDeleteParams is parameters of pipeline-delete operation.
type PipelineDeleteParams struct {
	// UUID of the pipeline.
	UUID string
}

func unpackPipelineDeleteParams(packed middleware.Parameters) (params PipelineDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "uuid",
			In:   "path",
		}
		params.UUID = packed[key].(string)
	}
	return params
}

func decodePipelineDeleteParams(args [1]string, argsEscaped bool, r *http.Request) (params PipelineDeleteParams, _ error) {
	// Decode path: uuid.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "uuid",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.UUID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "uuid",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// PipelineEntryCreateParams is parameters of pipeline-entry-create operation.
type PipelineEntryCreateParams struct {
	// UUID of the pipeline.
	UUID string
}

func unpackPipelineEntryCreateParams(packed middleware.Parameters) (params PipelineEntryCreateParams) {
	{
		key := middleware.ParameterKey{
			Name: "uuid",
			In:   "path",
		}
		params.UUID = packed[key].(string)
	}
	return params
}

func decodePipelineEntryCreateParams(args [1]string, argsEscaped bool, r *http.Request) (params PipelineEntryCreateParams, _ error) {
	// Decode path: uuid.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "uuid",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.UUID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "uuid",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// PipelineEntryDeleteParams is parameters of pipeline-entry-delete operation.
type PipelineEntryDeleteParams struct {
	// UUID of the pipeline.
	UUID string
	// Entry UUID of the pipeline.
	EntryUUID string
}

func unpackPipelineEntryDeleteParams(packed middleware.Parameters) (params PipelineEntryDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "uuid",
			In:   "path",
		}
		params.UUID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "entry_uuid",
			In:   "path",
		}
		params.EntryUUID = packed[key].(string)
	}
	return params
}

func decodePipelineEntryDeleteParams(args [2]string, argsEscaped bool, r *http.Request) (params PipelineEntryDeleteParams, _ error) {
	// Decode path: uuid.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "uuid",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.UUID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "uuid",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: entry_uuid.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "entry_uuid",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.EntryUUID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "entry_uuid",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// PipelineEntryGetParams is parameters of pipeline-entry-get operation.
type PipelineEntryGetParams struct {
	// UUID of the pipeline.
	UUID string
	// Entry UUID of the pipeline.
	EntryUUID string
}

func unpackPipelineEntryGetParams(packed middleware.Parameters) (params PipelineEntryGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "uuid",
			In:   "path",
		}
		params.UUID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "entry_uuid",
			In:   "path",
		}
		params.EntryUUID = packed[key].(string)
	}
	return params
}

func decodePipelineEntryGetParams(args [2]string, argsEscaped bool, r *http.Request) (params PipelineEntryGetParams, _ error) {
	// Decode path: uuid.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "uuid",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.UUID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "uuid",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: entry_uuid.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "entry_uuid",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.EntryUUID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "entry_uuid",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// PipelineEntryListParams is parameters of pipeline-entry-list operation.
type PipelineEntryListParams struct {
	// UUID of the pipeline.
	UUID string
}

func unpackPipelineEntryListParams(packed middleware.Parameters) (params PipelineEntryListParams) {
	{
		key := middleware.ParameterKey{
			Name: "uuid",
			In:   "path",
		}
		params.UUID = packed[key].(string)
	}
	return params
}

func decodePipelineEntryListParams(args [1]string, argsEscaped bool, r *http.Request) (params PipelineEntryListParams, _ error) {
	// Decode path: uuid.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "uuid",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.UUID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "uuid",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// PipelineEntryUpdateParams is parameters of pipeline-entry-update operation.
type PipelineEntryUpdateParams struct {
	// UUID of the pipeline.
	UUID string
	// Entry UUID of the pipeline.
	EntryUUID string
}

func unpackPipelineEntryUpdateParams(packed middleware.Parameters) (params PipelineEntryUpdateParams) {
	{
		key := middleware.ParameterKey{
			Name: "uuid",
			In:   "path",
		}
		params.UUID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "entry_uuid",
			In:   "path",
		}
		params.EntryUUID = packed[key].(string)
	}
	return params
}

func decodePipelineEntryUpdateParams(args [2]string, argsEscaped bool, r *http.Request) (params PipelineEntryUpdateParams, _ error) {
	// Decode path: uuid.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "uuid",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.UUID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "uuid",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: entry_uuid.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "entry_uuid",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.EntryUUID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "entry_uuid",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// PipelineGetParams is parameters of pipeline-get operation.
type PipelineGetParams struct {
	// UUID of the pipeline.
	UUID string
}

func unpackPipelineGetParams(packed middleware.Parameters) (params PipelineGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "uuid",
			In:   "path",
		}
		params.UUID = packed[key].(string)
	}
	return params
}

func decodePipelineGetParams(args [1]string, argsEscaped bool, r *http.Request) (params PipelineGetParams, _ error) {
	// Decode path: uuid.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "uuid",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.UUID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "uuid",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// PipelineListParams is parameters of pipeline-list operation.
type PipelineListParams struct {
	// Offset records.
	Offset OptInt32
	// Limit records.
	Limit OptInt32
}

func unpackPipelineListParams(packed middleware.Parameters) (params PipelineListParams) {
	{
		key := middleware.ParameterKey{
			Name: "offset",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Offset = v.(OptInt32)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptInt32)
		}
	}
	return params
}

func decodePipelineListParams(args [0]string, argsEscaped bool, r *http.Request) (params PipelineListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: offset.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "offset",
			Style:   uri.QueryStyleForm,
			Explode: false,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOffsetVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotOffsetVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Offset.SetTo(paramsDotOffsetVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "offset",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: false,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// PipelineUpdateParams is parameters of pipeline-update operation.
type PipelineUpdateParams struct {
	// UUID of the pipeline object.
	UUID string
}

func unpackPipelineUpdateParams(packed middleware.Parameters) (params PipelineUpdateParams) {
	{
		key := middleware.ParameterKey{
			Name: "uuid",
			In:   "path",
		}
		params.UUID = packed[key].(string)
	}
	return params
}

func decodePipelineUpdateParams(args [1]string, argsEscaped bool, r *http.Request) (params PipelineUpdateParams, _ error) {
	// Decode path: uuid.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "uuid",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.UUID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "uuid",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// StorageHostfilesDeleteParams is parameters of storage-hostfiles-delete operation.
type StorageHostfilesDeleteParams struct {
	// The UUID of the Host Files storage instance to delete.
	UUID string
}

func unpackStorageHostfilesDeleteParams(packed middleware.Parameters) (params StorageHostfilesDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "uuid",
			In:   "path",
		}
		params.UUID = packed[key].(string)
	}
	return params
}

func decodeStorageHostfilesDeleteParams(args [1]string, argsEscaped bool, r *http.Request) (params StorageHostfilesDeleteParams, _ error) {
	// Decode path: uuid.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "uuid",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.UUID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "uuid",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// StorageHostfilesGetParams is parameters of storage-hostfiles-get operation.
type StorageHostfilesGetParams struct {
	// The UUID of the Host Files storage instance to retrieve.
	UUID string
}

func unpackStorageHostfilesGetParams(packed middleware.Parameters) (params StorageHostfilesGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "uuid",
			In:   "path",
		}
		params.UUID = packed[key].(string)
	}
	return params
}

func decodeStorageHostfilesGetParams(args [1]string, argsEscaped bool, r *http.Request) (params StorageHostfilesGetParams, _ error) {
	// Decode path: uuid.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "uuid",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.UUID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "uuid",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// StorageHostfilesUpdateParams is parameters of storage-hostfiles-update operation.
type StorageHostfilesUpdateParams struct {
	// The UUID of the Host Files storage instance to update.
	UUID string
}

func unpackStorageHostfilesUpdateParams(packed middleware.Parameters) (params StorageHostfilesUpdateParams) {
	{
		key := middleware.ParameterKey{
			Name: "uuid",
			In:   "path",
		}
		params.UUID = packed[key].(string)
	}
	return params
}

func decodeStorageHostfilesUpdateParams(args [1]string, argsEscaped bool, r *http.Request) (params StorageHostfilesUpdateParams, _ error) {
	// Decode path: uuid.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "uuid",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.UUID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "uuid",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// StorageListParams is parameters of storage-list operation.
type StorageListParams struct {
	// The number of records to skip for pagination.
	Offset OptInt32
	// The maximum number of records to return.
	Limit OptInt32
}

func unpackStorageListParams(packed middleware.Parameters) (params StorageListParams) {
	{
		key := middleware.ParameterKey{
			Name: "offset",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Offset = v.(OptInt32)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptInt32)
		}
	}
	return params
}

func decodeStorageListParams(args [0]string, argsEscaped bool, r *http.Request) (params StorageListParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: offset.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "offset",
			Style:   uri.QueryStyleForm,
			Explode: false,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOffsetVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotOffsetVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Offset.SetTo(paramsDotOffsetVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "offset",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: false,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// StoragePostgresDeleteParams is parameters of storage-postgres-delete operation.
type StoragePostgresDeleteParams struct {
	// The UUID of the PostgreSQL storage instance to delete.
	UUID string
}

func unpackStoragePostgresDeleteParams(packed middleware.Parameters) (params StoragePostgresDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "uuid",
			In:   "path",
		}
		params.UUID = packed[key].(string)
	}
	return params
}

func decodeStoragePostgresDeleteParams(args [1]string, argsEscaped bool, r *http.Request) (params StoragePostgresDeleteParams, _ error) {
	// Decode path: uuid.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "uuid",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.UUID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "uuid",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// StoragePostgresGetParams is parameters of storage-postgres-get operation.
type StoragePostgresGetParams struct {
	// The UUID of the PostgreSQL storage instance to retrieve.
	UUID string
}

func unpackStoragePostgresGetParams(packed middleware.Parameters) (params StoragePostgresGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "uuid",
			In:   "path",
		}
		params.UUID = packed[key].(string)
	}
	return params
}

func decodeStoragePostgresGetParams(args [1]string, argsEscaped bool, r *http.Request) (params StoragePostgresGetParams, _ error) {
	// Decode path: uuid.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "uuid",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.UUID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "uuid",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// StoragePostgresUpdateParams is parameters of storage-postgres-update operation.
type StoragePostgresUpdateParams struct {
	// The UUID of the PostgreSQL storage instance to update.
	UUID string
}

func unpackStoragePostgresUpdateParams(packed middleware.Parameters) (params StoragePostgresUpdateParams) {
	{
		key := middleware.ParameterKey{
			Name: "uuid",
			In:   "path",
		}
		params.UUID = packed[key].(string)
	}
	return params
}

func decodeStoragePostgresUpdateParams(args [1]string, argsEscaped bool, r *http.Request) (params StoragePostgresUpdateParams, _ error) {
	// Decode path: uuid.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "uuid",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.UUID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "uuid",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// StorageS3DeleteParams is parameters of storage-s3-delete operation.
type StorageS3DeleteParams struct {
	// The UUID of the S3 storage instance to delete.
	UUID string
}

func unpackStorageS3DeleteParams(packed middleware.Parameters) (params StorageS3DeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "uuid",
			In:   "path",
		}
		params.UUID = packed[key].(string)
	}
	return params
}

func decodeStorageS3DeleteParams(args [1]string, argsEscaped bool, r *http.Request) (params StorageS3DeleteParams, _ error) {
	// Decode path: uuid.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "uuid",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.UUID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "uuid",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// StorageS3GetParams is parameters of storage-s3-get operation.
type StorageS3GetParams struct {
	// The UUID of the S3 storage instance to retrieve.
	UUID string
}

func unpackStorageS3GetParams(packed middleware.Parameters) (params StorageS3GetParams) {
	{
		key := middleware.ParameterKey{
			Name: "uuid",
			In:   "path",
		}
		params.UUID = packed[key].(string)
	}
	return params
}

func decodeStorageS3GetParams(args [1]string, argsEscaped bool, r *http.Request) (params StorageS3GetParams, _ error) {
	// Decode path: uuid.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "uuid",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.UUID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "uuid",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// StorageS3UpdateParams is parameters of storage-s3-update operation.
type StorageS3UpdateParams struct {
	// The UUID of the S3 storage instance to update.
	UUID string
}

func unpackStorageS3UpdateParams(packed middleware.Parameters) (params StorageS3UpdateParams) {
	{
		key := middleware.ParameterKey{
			Name: "uuid",
			In:   "path",
		}
		params.UUID = packed[key].(string)
	}
	return params
}

func decodeStorageS3UpdateParams(args [1]string, argsEscaped bool, r *http.Request) (params StorageS3UpdateParams, _ error) {
	// Decode path: uuid.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "uuid",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.UUID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "uuid",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// TgSessionVerifyParams is parameters of tg-session-verify operation.
type TgSessionVerifyParams struct {
	// Session ID.
	ID int
}

func unpackTgSessionVerifyParams(packed middleware.Parameters) (params TgSessionVerifyParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(int)
	}
	return params
}

func decodeTgSessionVerifyParams(args [0]string, argsEscaped bool, r *http.Request) (params TgSessionVerifyParams, _ error) {
	// Decode path: id.
	if err := func() error {
		// Not used.
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}
