// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"
	"net/url"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

type BearerAuth struct {
	Token string
}

// GetToken returns the value of Token.
func (s *BearerAuth) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *BearerAuth) SetToken(val string) {
	s.Token = val
}

// Ref: #
type Datasource struct {
	UUID      string    `json:"uuid"`
	UserUUID  string    `json:"user_uuid"`
	Name      string    `json:"name"`
	IsEnabled bool      `json:"is_enabled"`
	Type      string    `json:"type"`
	Provider  string    `json:"provider"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

// GetUUID returns the value of UUID.
func (s *Datasource) GetUUID() string {
	return s.UUID
}

// GetUserUUID returns the value of UserUUID.
func (s *Datasource) GetUserUUID() string {
	return s.UserUUID
}

// GetName returns the value of Name.
func (s *Datasource) GetName() string {
	return s.Name
}

// GetIsEnabled returns the value of IsEnabled.
func (s *Datasource) GetIsEnabled() bool {
	return s.IsEnabled
}

// GetType returns the value of Type.
func (s *Datasource) GetType() string {
	return s.Type
}

// GetProvider returns the value of Provider.
func (s *Datasource) GetProvider() string {
	return s.Provider
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Datasource) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Datasource) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// SetUUID sets the value of UUID.
func (s *Datasource) SetUUID(val string) {
	s.UUID = val
}

// SetUserUUID sets the value of UserUUID.
func (s *Datasource) SetUserUUID(val string) {
	s.UserUUID = val
}

// SetName sets the value of Name.
func (s *Datasource) SetName(val string) {
	s.Name = val
}

// SetIsEnabled sets the value of IsEnabled.
func (s *Datasource) SetIsEnabled(val bool) {
	s.IsEnabled = val
}

// SetType sets the value of Type.
func (s *Datasource) SetType(val string) {
	s.Type = val
}

// SetProvider sets the value of Provider.
func (s *Datasource) SetProvider(val string) {
	s.Provider = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Datasource) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Datasource) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// Ref: #
type DatasourceEmail struct {
	UUID            OptString `json:"uuid"`
	UserUUID        string    `json:"user_uuid"`
	Email           OptString `json:"email"`
	Name            string    `json:"name"`
	IsEnabled       OptBool   `json:"is_enabled"`
	Provider        string    `json:"provider"`
	OAuth2ClientID  OptString `json:"oauth2_client_id"`
	OAuth2TokenUUID OptString `json:"oauth2_token_uuid"`
	ImapServer      OptString `json:"imap_server"`
	SMTPServer      OptString `json:"smtp_server"`
	SMTPTLS         OptBool   `json:"smtp_tls"`
	Password        OptString `json:"password"`
	CreatedAt       time.Time `json:"created_at"`
	UpdatedAt       time.Time `json:"updated_at"`
}

// GetUUID returns the value of UUID.
func (s *DatasourceEmail) GetUUID() OptString {
	return s.UUID
}

// GetUserUUID returns the value of UserUUID.
func (s *DatasourceEmail) GetUserUUID() string {
	return s.UserUUID
}

// GetEmail returns the value of Email.
func (s *DatasourceEmail) GetEmail() OptString {
	return s.Email
}

// GetName returns the value of Name.
func (s *DatasourceEmail) GetName() string {
	return s.Name
}

// GetIsEnabled returns the value of IsEnabled.
func (s *DatasourceEmail) GetIsEnabled() OptBool {
	return s.IsEnabled
}

// GetProvider returns the value of Provider.
func (s *DatasourceEmail) GetProvider() string {
	return s.Provider
}

// GetOAuth2ClientID returns the value of OAuth2ClientID.
func (s *DatasourceEmail) GetOAuth2ClientID() OptString {
	return s.OAuth2ClientID
}

// GetOAuth2TokenUUID returns the value of OAuth2TokenUUID.
func (s *DatasourceEmail) GetOAuth2TokenUUID() OptString {
	return s.OAuth2TokenUUID
}

// GetImapServer returns the value of ImapServer.
func (s *DatasourceEmail) GetImapServer() OptString {
	return s.ImapServer
}

// GetSMTPServer returns the value of SMTPServer.
func (s *DatasourceEmail) GetSMTPServer() OptString {
	return s.SMTPServer
}

// GetSMTPTLS returns the value of SMTPTLS.
func (s *DatasourceEmail) GetSMTPTLS() OptBool {
	return s.SMTPTLS
}

// GetPassword returns the value of Password.
func (s *DatasourceEmail) GetPassword() OptString {
	return s.Password
}

// GetCreatedAt returns the value of CreatedAt.
func (s *DatasourceEmail) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *DatasourceEmail) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// SetUUID sets the value of UUID.
func (s *DatasourceEmail) SetUUID(val OptString) {
	s.UUID = val
}

// SetUserUUID sets the value of UserUUID.
func (s *DatasourceEmail) SetUserUUID(val string) {
	s.UserUUID = val
}

// SetEmail sets the value of Email.
func (s *DatasourceEmail) SetEmail(val OptString) {
	s.Email = val
}

// SetName sets the value of Name.
func (s *DatasourceEmail) SetName(val string) {
	s.Name = val
}

// SetIsEnabled sets the value of IsEnabled.
func (s *DatasourceEmail) SetIsEnabled(val OptBool) {
	s.IsEnabled = val
}

// SetProvider sets the value of Provider.
func (s *DatasourceEmail) SetProvider(val string) {
	s.Provider = val
}

// SetOAuth2ClientID sets the value of OAuth2ClientID.
func (s *DatasourceEmail) SetOAuth2ClientID(val OptString) {
	s.OAuth2ClientID = val
}

// SetOAuth2TokenUUID sets the value of OAuth2TokenUUID.
func (s *DatasourceEmail) SetOAuth2TokenUUID(val OptString) {
	s.OAuth2TokenUUID = val
}

// SetImapServer sets the value of ImapServer.
func (s *DatasourceEmail) SetImapServer(val OptString) {
	s.ImapServer = val
}

// SetSMTPServer sets the value of SMTPServer.
func (s *DatasourceEmail) SetSMTPServer(val OptString) {
	s.SMTPServer = val
}

// SetSMTPTLS sets the value of SMTPTLS.
func (s *DatasourceEmail) SetSMTPTLS(val OptBool) {
	s.SMTPTLS = val
}

// SetPassword sets the value of Password.
func (s *DatasourceEmail) SetPassword(val OptString) {
	s.Password = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *DatasourceEmail) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *DatasourceEmail) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// DatasourceEmailDeleteOK is response for DatasourceEmailDelete operation.
type DatasourceEmailDeleteOK struct{}

type DatasourceEmailRunPipelineOK struct {
	// List of labels.
	Labels []EmailLabel `json:"labels"`
}

// GetLabels returns the value of Labels.
func (s *DatasourceEmailRunPipelineOK) GetLabels() []EmailLabel {
	return s.Labels
}

// SetLabels sets the value of Labels.
func (s *DatasourceEmailRunPipelineOK) SetLabels(val []EmailLabel) {
	s.Labels = val
}

// LinkedIn datasource object representation.
// Ref: #
type DatasourceLinkedin struct {
	UUID      OptString `json:"uuid"`
	UserUUID  string    `json:"user_uuid"`
	Name      string    `json:"name"`
	IsEnabled OptBool   `json:"is_enabled"`
	Provider  string    `json:"provider"`
	// LinkedIn username or email for login.
	Username OptString `json:"username"`
	// LinkedIn password (or OAuth2 tokens if relevant).
	Password OptString `json:"password"`
	// Arbitrary LinkedIn bridging config pulled from linkedin.tpl.yaml
	// (presence bridging, encryption, etc.).
	Settings  OptDatasourceLinkedinSettings `json:"settings"`
	CreatedAt time.Time                     `json:"created_at"`
	UpdatedAt time.Time                     `json:"updated_at"`
}

// GetUUID returns the value of UUID.
func (s *DatasourceLinkedin) GetUUID() OptString {
	return s.UUID
}

// GetUserUUID returns the value of UserUUID.
func (s *DatasourceLinkedin) GetUserUUID() string {
	return s.UserUUID
}

// GetName returns the value of Name.
func (s *DatasourceLinkedin) GetName() string {
	return s.Name
}

// GetIsEnabled returns the value of IsEnabled.
func (s *DatasourceLinkedin) GetIsEnabled() OptBool {
	return s.IsEnabled
}

// GetProvider returns the value of Provider.
func (s *DatasourceLinkedin) GetProvider() string {
	return s.Provider
}

// GetUsername returns the value of Username.
func (s *DatasourceLinkedin) GetUsername() OptString {
	return s.Username
}

// GetPassword returns the value of Password.
func (s *DatasourceLinkedin) GetPassword() OptString {
	return s.Password
}

// GetSettings returns the value of Settings.
func (s *DatasourceLinkedin) GetSettings() OptDatasourceLinkedinSettings {
	return s.Settings
}

// GetCreatedAt returns the value of CreatedAt.
func (s *DatasourceLinkedin) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *DatasourceLinkedin) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// SetUUID sets the value of UUID.
func (s *DatasourceLinkedin) SetUUID(val OptString) {
	s.UUID = val
}

// SetUserUUID sets the value of UserUUID.
func (s *DatasourceLinkedin) SetUserUUID(val string) {
	s.UserUUID = val
}

// SetName sets the value of Name.
func (s *DatasourceLinkedin) SetName(val string) {
	s.Name = val
}

// SetIsEnabled sets the value of IsEnabled.
func (s *DatasourceLinkedin) SetIsEnabled(val OptBool) {
	s.IsEnabled = val
}

// SetProvider sets the value of Provider.
func (s *DatasourceLinkedin) SetProvider(val string) {
	s.Provider = val
}

// SetUsername sets the value of Username.
func (s *DatasourceLinkedin) SetUsername(val OptString) {
	s.Username = val
}

// SetPassword sets the value of Password.
func (s *DatasourceLinkedin) SetPassword(val OptString) {
	s.Password = val
}

// SetSettings sets the value of Settings.
func (s *DatasourceLinkedin) SetSettings(val OptDatasourceLinkedinSettings) {
	s.Settings = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *DatasourceLinkedin) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *DatasourceLinkedin) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// DatasourceLinkedinDeleteOK is response for DatasourceLinkedinDelete operation.
type DatasourceLinkedinDeleteOK struct{}

// Arbitrary LinkedIn bridging config pulled from linkedin.tpl.yaml
// (presence bridging, encryption, etc.).
type DatasourceLinkedinSettings map[string]jx.Raw

func (s *DatasourceLinkedinSettings) init() DatasourceLinkedinSettings {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// DatasourceSetOAuth2ClientNoContent is response for DatasourceSetOAuth2Client operation.
type DatasourceSetOAuth2ClientNoContent struct{}

type DatasourceSetOAuth2ClientReq struct {
	// OAuth2 client ID.
	ClientID string `json:"client_id"`
}

// GetClientID returns the value of ClientID.
func (s *DatasourceSetOAuth2ClientReq) GetClientID() string {
	return s.ClientID
}

// SetClientID sets the value of ClientID.
func (s *DatasourceSetOAuth2ClientReq) SetClientID(val string) {
	s.ClientID = val
}

// Ref: #
type DatasourceTelegram struct {
	UUID      OptString `json:"uuid"`
	UserUUID  string    `json:"user_uuid"`
	Name      string    `json:"name"`
	IsEnabled OptBool   `json:"is_enabled"`
	Provider  string    `json:"provider"`
	// The phone number for the Telegram account (international format).
	PhoneNumber string `json:"phone_number"`
	// Telegram API ID from my.telegram.org.
	APIID string `json:"api_id"`
	// Telegram API hash.
	APIHash string `json:"api_hash"`
	// Optional 2FA password.
	Password OptString `json:"password"`
	// Additional Telegram bridging config from telegram.tpl.yaml
	// (proxy, concurrency, presence bridging, encryption, etc.).
	Settings       OptDatasourceTelegramSettings `json:"settings"`
	SessionHistory TelegramSessionHistory        `json:"sessionHistory"`
	Participants   TelegramParticipants          `json:"participants"`
	// Arbitrary key-value metadata about the account.
	Meta      OptDatasourceTelegramMeta `json:"meta"`
	CreatedAt time.Time                 `json:"created_at"`
	UpdatedAt time.Time                 `json:"updated_at"`
}

// GetUUID returns the value of UUID.
func (s *DatasourceTelegram) GetUUID() OptString {
	return s.UUID
}

// GetUserUUID returns the value of UserUUID.
func (s *DatasourceTelegram) GetUserUUID() string {
	return s.UserUUID
}

// GetName returns the value of Name.
func (s *DatasourceTelegram) GetName() string {
	return s.Name
}

// GetIsEnabled returns the value of IsEnabled.
func (s *DatasourceTelegram) GetIsEnabled() OptBool {
	return s.IsEnabled
}

// GetProvider returns the value of Provider.
func (s *DatasourceTelegram) GetProvider() string {
	return s.Provider
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *DatasourceTelegram) GetPhoneNumber() string {
	return s.PhoneNumber
}

// GetAPIID returns the value of APIID.
func (s *DatasourceTelegram) GetAPIID() string {
	return s.APIID
}

// GetAPIHash returns the value of APIHash.
func (s *DatasourceTelegram) GetAPIHash() string {
	return s.APIHash
}

// GetPassword returns the value of Password.
func (s *DatasourceTelegram) GetPassword() OptString {
	return s.Password
}

// GetSettings returns the value of Settings.
func (s *DatasourceTelegram) GetSettings() OptDatasourceTelegramSettings {
	return s.Settings
}

// GetSessionHistory returns the value of SessionHistory.
func (s *DatasourceTelegram) GetSessionHistory() TelegramSessionHistory {
	return s.SessionHistory
}

// GetParticipants returns the value of Participants.
func (s *DatasourceTelegram) GetParticipants() TelegramParticipants {
	return s.Participants
}

// GetMeta returns the value of Meta.
func (s *DatasourceTelegram) GetMeta() OptDatasourceTelegramMeta {
	return s.Meta
}

// GetCreatedAt returns the value of CreatedAt.
func (s *DatasourceTelegram) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *DatasourceTelegram) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// SetUUID sets the value of UUID.
func (s *DatasourceTelegram) SetUUID(val OptString) {
	s.UUID = val
}

// SetUserUUID sets the value of UserUUID.
func (s *DatasourceTelegram) SetUserUUID(val string) {
	s.UserUUID = val
}

// SetName sets the value of Name.
func (s *DatasourceTelegram) SetName(val string) {
	s.Name = val
}

// SetIsEnabled sets the value of IsEnabled.
func (s *DatasourceTelegram) SetIsEnabled(val OptBool) {
	s.IsEnabled = val
}

// SetProvider sets the value of Provider.
func (s *DatasourceTelegram) SetProvider(val string) {
	s.Provider = val
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *DatasourceTelegram) SetPhoneNumber(val string) {
	s.PhoneNumber = val
}

// SetAPIID sets the value of APIID.
func (s *DatasourceTelegram) SetAPIID(val string) {
	s.APIID = val
}

// SetAPIHash sets the value of APIHash.
func (s *DatasourceTelegram) SetAPIHash(val string) {
	s.APIHash = val
}

// SetPassword sets the value of Password.
func (s *DatasourceTelegram) SetPassword(val OptString) {
	s.Password = val
}

// SetSettings sets the value of Settings.
func (s *DatasourceTelegram) SetSettings(val OptDatasourceTelegramSettings) {
	s.Settings = val
}

// SetSessionHistory sets the value of SessionHistory.
func (s *DatasourceTelegram) SetSessionHistory(val TelegramSessionHistory) {
	s.SessionHistory = val
}

// SetParticipants sets the value of Participants.
func (s *DatasourceTelegram) SetParticipants(val TelegramParticipants) {
	s.Participants = val
}

// SetMeta sets the value of Meta.
func (s *DatasourceTelegram) SetMeta(val OptDatasourceTelegramMeta) {
	s.Meta = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *DatasourceTelegram) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *DatasourceTelegram) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// DatasourceTelegramDeleteOK is response for DatasourceTelegramDelete operation.
type DatasourceTelegramDeleteOK struct{}

// Arbitrary key-value metadata about the account.
type DatasourceTelegramMeta map[string]jx.Raw

func (s *DatasourceTelegramMeta) init() DatasourceTelegramMeta {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Additional Telegram bridging config from telegram.tpl.yaml
// (proxy, concurrency, presence bridging, encryption, etc.).
type DatasourceTelegramSettings map[string]jx.Raw

func (s *DatasourceTelegramSettings) init() DatasourceTelegramSettings {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// WhatsApp datasource object representation.
// Ref: #
type DatasourceWhatsapp struct {
	UUID      OptString `json:"uuid"`
	UserUUID  string    `json:"user_uuid"`
	Name      string    `json:"name"`
	IsEnabled OptBool   `json:"is_enabled"`
	Provider  string    `json:"provider"`
	// The phone number for the WhatsApp account.
	PhoneNumber string `json:"phone_number"`
	// Label for the WhatsApp device connection.
	DeviceName OptString `json:"device_name"`
	// Additional WhatsApp bridging config from whatsapp.tpl.yaml
	// (proxy, presence bridging, call notices, status broadcast, etc.).
	Settings  OptDatasourceWhatsappSettings `json:"settings"`
	CreatedAt time.Time                     `json:"created_at"`
	UpdatedAt time.Time                     `json:"updated_at"`
}

// GetUUID returns the value of UUID.
func (s *DatasourceWhatsapp) GetUUID() OptString {
	return s.UUID
}

// GetUserUUID returns the value of UserUUID.
func (s *DatasourceWhatsapp) GetUserUUID() string {
	return s.UserUUID
}

// GetName returns the value of Name.
func (s *DatasourceWhatsapp) GetName() string {
	return s.Name
}

// GetIsEnabled returns the value of IsEnabled.
func (s *DatasourceWhatsapp) GetIsEnabled() OptBool {
	return s.IsEnabled
}

// GetProvider returns the value of Provider.
func (s *DatasourceWhatsapp) GetProvider() string {
	return s.Provider
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *DatasourceWhatsapp) GetPhoneNumber() string {
	return s.PhoneNumber
}

// GetDeviceName returns the value of DeviceName.
func (s *DatasourceWhatsapp) GetDeviceName() OptString {
	return s.DeviceName
}

// GetSettings returns the value of Settings.
func (s *DatasourceWhatsapp) GetSettings() OptDatasourceWhatsappSettings {
	return s.Settings
}

// GetCreatedAt returns the value of CreatedAt.
func (s *DatasourceWhatsapp) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *DatasourceWhatsapp) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// SetUUID sets the value of UUID.
func (s *DatasourceWhatsapp) SetUUID(val OptString) {
	s.UUID = val
}

// SetUserUUID sets the value of UserUUID.
func (s *DatasourceWhatsapp) SetUserUUID(val string) {
	s.UserUUID = val
}

// SetName sets the value of Name.
func (s *DatasourceWhatsapp) SetName(val string) {
	s.Name = val
}

// SetIsEnabled sets the value of IsEnabled.
func (s *DatasourceWhatsapp) SetIsEnabled(val OptBool) {
	s.IsEnabled = val
}

// SetProvider sets the value of Provider.
func (s *DatasourceWhatsapp) SetProvider(val string) {
	s.Provider = val
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *DatasourceWhatsapp) SetPhoneNumber(val string) {
	s.PhoneNumber = val
}

// SetDeviceName sets the value of DeviceName.
func (s *DatasourceWhatsapp) SetDeviceName(val OptString) {
	s.DeviceName = val
}

// SetSettings sets the value of Settings.
func (s *DatasourceWhatsapp) SetSettings(val OptDatasourceWhatsappSettings) {
	s.Settings = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *DatasourceWhatsapp) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *DatasourceWhatsapp) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// DatasourceWhatsappDeleteOK is response for DatasourceWhatsappDelete operation.
type DatasourceWhatsappDeleteOK struct{}

// Additional WhatsApp bridging config from whatsapp.tpl.yaml
// (proxy, presence bridging, call notices, status broadcast, etc.).
type DatasourceWhatsappSettings map[string]jx.Raw

func (s *DatasourceWhatsappSettings) init() DatasourceWhatsappSettings {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Ref: #
type EmailLabel struct {
	HTTPStatusCode        int64              `json:"HTTPStatusCode"`
	Header                EmailLabelHeader   `json:"Header"`
	ID                    OptString          `json:"id"`
	Color                 OptEmailLabelColor `json:"color"`
	LabelListVisibility   OptString          `json:"labelListVisibility"`
	MessageListVisibility OptString          `json:"messageListVisibility"`
	MessagesTotal         OptInt64           `json:"messagesTotal"`
	MessagesUnread        OptInt64           `json:"messagesUnread"`
	Name                  OptString          `json:"name"`
	ThreadsTotal          OptInt64           `json:"threadsTotal"`
	ThreadsUnread         OptInt64           `json:"threadsUnread"`
	Type                  OptString          `json:"type"`
}

// GetHTTPStatusCode returns the value of HTTPStatusCode.
func (s *EmailLabel) GetHTTPStatusCode() int64 {
	return s.HTTPStatusCode
}

// GetHeader returns the value of Header.
func (s *EmailLabel) GetHeader() EmailLabelHeader {
	return s.Header
}

// GetID returns the value of ID.
func (s *EmailLabel) GetID() OptString {
	return s.ID
}

// GetColor returns the value of Color.
func (s *EmailLabel) GetColor() OptEmailLabelColor {
	return s.Color
}

// GetLabelListVisibility returns the value of LabelListVisibility.
func (s *EmailLabel) GetLabelListVisibility() OptString {
	return s.LabelListVisibility
}

// GetMessageListVisibility returns the value of MessageListVisibility.
func (s *EmailLabel) GetMessageListVisibility() OptString {
	return s.MessageListVisibility
}

// GetMessagesTotal returns the value of MessagesTotal.
func (s *EmailLabel) GetMessagesTotal() OptInt64 {
	return s.MessagesTotal
}

// GetMessagesUnread returns the value of MessagesUnread.
func (s *EmailLabel) GetMessagesUnread() OptInt64 {
	return s.MessagesUnread
}

// GetName returns the value of Name.
func (s *EmailLabel) GetName() OptString {
	return s.Name
}

// GetThreadsTotal returns the value of ThreadsTotal.
func (s *EmailLabel) GetThreadsTotal() OptInt64 {
	return s.ThreadsTotal
}

// GetThreadsUnread returns the value of ThreadsUnread.
func (s *EmailLabel) GetThreadsUnread() OptInt64 {
	return s.ThreadsUnread
}

// GetType returns the value of Type.
func (s *EmailLabel) GetType() OptString {
	return s.Type
}

// SetHTTPStatusCode sets the value of HTTPStatusCode.
func (s *EmailLabel) SetHTTPStatusCode(val int64) {
	s.HTTPStatusCode = val
}

// SetHeader sets the value of Header.
func (s *EmailLabel) SetHeader(val EmailLabelHeader) {
	s.Header = val
}

// SetID sets the value of ID.
func (s *EmailLabel) SetID(val OptString) {
	s.ID = val
}

// SetColor sets the value of Color.
func (s *EmailLabel) SetColor(val OptEmailLabelColor) {
	s.Color = val
}

// SetLabelListVisibility sets the value of LabelListVisibility.
func (s *EmailLabel) SetLabelListVisibility(val OptString) {
	s.LabelListVisibility = val
}

// SetMessageListVisibility sets the value of MessageListVisibility.
func (s *EmailLabel) SetMessageListVisibility(val OptString) {
	s.MessageListVisibility = val
}

// SetMessagesTotal sets the value of MessagesTotal.
func (s *EmailLabel) SetMessagesTotal(val OptInt64) {
	s.MessagesTotal = val
}

// SetMessagesUnread sets the value of MessagesUnread.
func (s *EmailLabel) SetMessagesUnread(val OptInt64) {
	s.MessagesUnread = val
}

// SetName sets the value of Name.
func (s *EmailLabel) SetName(val OptString) {
	s.Name = val
}

// SetThreadsTotal sets the value of ThreadsTotal.
func (s *EmailLabel) SetThreadsTotal(val OptInt64) {
	s.ThreadsTotal = val
}

// SetThreadsUnread sets the value of ThreadsUnread.
func (s *EmailLabel) SetThreadsUnread(val OptInt64) {
	s.ThreadsUnread = val
}

// SetType sets the value of Type.
func (s *EmailLabel) SetType(val OptString) {
	s.Type = val
}

type EmailLabelColor struct {
	BackgroundColor OptString `json:"backgroundColor"`
	TextColor       OptString `json:"textColor"`
}

// GetBackgroundColor returns the value of BackgroundColor.
func (s *EmailLabelColor) GetBackgroundColor() OptString {
	return s.BackgroundColor
}

// GetTextColor returns the value of TextColor.
func (s *EmailLabelColor) GetTextColor() OptString {
	return s.TextColor
}

// SetBackgroundColor sets the value of BackgroundColor.
func (s *EmailLabelColor) SetBackgroundColor(val OptString) {
	s.BackgroundColor = val
}

// SetTextColor sets the value of TextColor.
func (s *EmailLabelColor) SetTextColor(val OptString) {
	s.TextColor = val
}

type EmailLabelHeader map[string][]string

func (s *EmailLabelHeader) init() EmailLabelHeader {
	m := *s
	if m == nil {
		m = map[string][]string{}
		*s = m
	}
	return m
}

// Ref: #
type Error struct {
	// A human-readable explanation specific to this occurrence of the problem.
	Detail OptString `json:"detail"`
	// Optional list of individual error details.
	Errors []ErrorErrorsItem `json:"errors"`
	// HTTP status code.
	Status OptInt64 `json:"status"`
}

// GetDetail returns the value of Detail.
func (s *Error) GetDetail() OptString {
	return s.Detail
}

// GetErrors returns the value of Errors.
func (s *Error) GetErrors() []ErrorErrorsItem {
	return s.Errors
}

// GetStatus returns the value of Status.
func (s *Error) GetStatus() OptInt64 {
	return s.Status
}

// SetDetail sets the value of Detail.
func (s *Error) SetDetail(val OptString) {
	s.Detail = val
}

// SetErrors sets the value of Errors.
func (s *Error) SetErrors(val []ErrorErrorsItem) {
	s.Errors = val
}

// SetStatus sets the value of Status.
func (s *Error) SetStatus(val OptInt64) {
	s.Status = val
}

type ErrorErrorsItem struct {
	// Where the error occurred, e.g. 'body.items[3].tags' or 'path.thing-id'.
	Location OptString `json:"location"`
	// Error message text.
	Message OptString `json:"message"`
	// The value at the given location.
	Value OptString `json:"value"`
}

// GetLocation returns the value of Location.
func (s *ErrorErrorsItem) GetLocation() OptString {
	return s.Location
}

// GetMessage returns the value of Message.
func (s *ErrorErrorsItem) GetMessage() OptString {
	return s.Message
}

// GetValue returns the value of Value.
func (s *ErrorErrorsItem) GetValue() OptString {
	return s.Value
}

// SetLocation sets the value of Location.
func (s *ErrorErrorsItem) SetLocation(val OptString) {
	s.Location = val
}

// SetMessage sets the value of Message.
func (s *ErrorErrorsItem) SetMessage(val OptString) {
	s.Message = val
}

// SetValue sets the value of Value.
func (s *ErrorErrorsItem) SetValue(val OptString) {
	s.Value = val
}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

// FileDeleteOK is response for FileDelete operation.
type FileDeleteOK struct{}

// Represents a stored file, independent of the storage backend.
// Ref: #/FileObject
type FileObject struct {
	// Unique identifier for the file.
	UUID OptString `json:"uuid"`
	// The type of storage backend.
	StorageType OptFileObjectStorageType `json:"storage_type"`
	// Reference ID within the respective storage backend.
	StorageRef OptString `json:"storage_ref"`
	// Original filename.
	Name OptString `json:"name"`
	// MIME type of the file.
	MimeType OptString `json:"mime_type"`
	// Size of the file in bytes.
	Size OptInt `json:"size"`
	// Timestamp when the file was created.
	CreatedAt OptDateTime `json:"created_at"`
	// Timestamp when the file was last modified.
	UpdatedAt OptDateTime `json:"updated_at"`
}

// GetUUID returns the value of UUID.
func (s *FileObject) GetUUID() OptString {
	return s.UUID
}

// GetStorageType returns the value of StorageType.
func (s *FileObject) GetStorageType() OptFileObjectStorageType {
	return s.StorageType
}

// GetStorageRef returns the value of StorageRef.
func (s *FileObject) GetStorageRef() OptString {
	return s.StorageRef
}

// GetName returns the value of Name.
func (s *FileObject) GetName() OptString {
	return s.Name
}

// GetMimeType returns the value of MimeType.
func (s *FileObject) GetMimeType() OptString {
	return s.MimeType
}

// GetSize returns the value of Size.
func (s *FileObject) GetSize() OptInt {
	return s.Size
}

// GetCreatedAt returns the value of CreatedAt.
func (s *FileObject) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *FileObject) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// SetUUID sets the value of UUID.
func (s *FileObject) SetUUID(val OptString) {
	s.UUID = val
}

// SetStorageType sets the value of StorageType.
func (s *FileObject) SetStorageType(val OptFileObjectStorageType) {
	s.StorageType = val
}

// SetStorageRef sets the value of StorageRef.
func (s *FileObject) SetStorageRef(val OptString) {
	s.StorageRef = val
}

// SetName sets the value of Name.
func (s *FileObject) SetName(val OptString) {
	s.Name = val
}

// SetMimeType sets the value of MimeType.
func (s *FileObject) SetMimeType(val OptString) {
	s.MimeType = val
}

// SetSize sets the value of Size.
func (s *FileObject) SetSize(val OptInt) {
	s.Size = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *FileObject) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *FileObject) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// The type of storage backend.
type FileObjectStorageType string

const (
	FileObjectStorageTypeS3        FileObjectStorageType = "s3"
	FileObjectStorageTypePostgres  FileObjectStorageType = "postgres"
	FileObjectStorageTypeHostfiles FileObjectStorageType = "hostfiles"
)

// AllValues returns all FileObjectStorageType values.
func (FileObjectStorageType) AllValues() []FileObjectStorageType {
	return []FileObjectStorageType{
		FileObjectStorageTypeS3,
		FileObjectStorageTypePostgres,
		FileObjectStorageTypeHostfiles,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s FileObjectStorageType) MarshalText() ([]byte, error) {
	switch s {
	case FileObjectStorageTypeS3:
		return []byte(s), nil
	case FileObjectStorageTypePostgres:
		return []byte(s), nil
	case FileObjectStorageTypeHostfiles:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *FileObjectStorageType) UnmarshalText(data []byte) error {
	switch FileObjectStorageType(data) {
	case FileObjectStorageTypeS3:
		*s = FileObjectStorageTypeS3
		return nil
	case FileObjectStorageTypePostgres:
		*s = FileObjectStorageTypePostgres
		return nil
	case FileObjectStorageTypeHostfiles:
		*s = FileObjectStorageTypeHostfiles
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type FileUpdateReq struct {
	// Updated name of the file.
	Name string `json:"name"`
}

// GetName returns the value of Name.
func (s *FileUpdateReq) GetName() string {
	return s.Name
}

// SetName sets the value of Name.
func (s *FileUpdateReq) SetName(val string) {
	s.Name = val
}

// Request to generate a download link.
// Ref: #/GenerateDownloadLinkRequest
type GenerateDownloadLinkRequest struct {
	FileUUID OptString `json:"file_uuid"`
	// Expiration time in seconds for the download link.
	Expiration OptInt `json:"expiration"`
}

// GetFileUUID returns the value of FileUUID.
func (s *GenerateDownloadLinkRequest) GetFileUUID() OptString {
	return s.FileUUID
}

// GetExpiration returns the value of Expiration.
func (s *GenerateDownloadLinkRequest) GetExpiration() OptInt {
	return s.Expiration
}

// SetFileUUID sets the value of FileUUID.
func (s *GenerateDownloadLinkRequest) SetFileUUID(val OptString) {
	s.FileUUID = val
}

// SetExpiration sets the value of Expiration.
func (s *GenerateDownloadLinkRequest) SetExpiration(val OptInt) {
	s.Expiration = val
}

// Response containing a signed download link.
// Ref: #/GenerateDownloadLinkResponse
type GenerateDownloadLinkResponse struct {
	// Signed URL for downloading the file.
	URL OptString `json:"url"`
}

// GetURL returns the value of URL.
func (s *GenerateDownloadLinkResponse) GetURL() OptString {
	return s.URL
}

// SetURL sets the value of URL.
func (s *GenerateDownloadLinkResponse) SetURL(val OptString) {
	s.URL = val
}

// Ref: #
type Message struct {
	// Unique identifier for the message.
	UUID string `json:"uuid"`
	// Data source or platform the message originated from.
	Source MessageSource `json:"source"`
	// Specifies the type or classification of the message.
	Type OptMessageType `json:"type"`
	// ID of the chat/conversation this message belongs to.
	ChatUUID OptString `json:"chat_uuid"`
	// ID of a sub-thread if this message is part of a threaded conversation.
	ThreadUUID OptString `json:"thread_uuid"`
	// Identifier of the user or account sending the message.
	Sender string `json:"sender"`
	// List of users or accounts receiving the message (e.g., To, CC).
	Recipients []string `json:"recipients"`
	// Subject or title of the message (applicable to emails or similar).
	Subject OptString `json:"subject"`
	// Text content or body of the message.
	Body       string               `json:"body"`
	BodyParsed OptMessageBodyParsed `json:"body_parsed"`
	// Collection of reactions (e.g., likes, emojis) applied to this message.
	Reactions OptMessageReactions `json:"reactions"`
	// List of file attachments associated with this message.
	Attachments []FileObject `json:"attachments"`
	// ID or handle of the original sender if this message is forwarded.
	ForwardFrom OptString `json:"forward_from"`
	// ID of the message this one is directly replying to, if any.
	ReplyToMessageUUID OptString `json:"reply_to_message_uuid"`
	// ID of the original chat if this message is forwarded.
	ForwardFromChatUUID OptString `json:"forward_from_chat_uuid"`
	// ID of the original message if this is forwarded.
	ForwardFromMessageUUID OptString `json:"forward_from_message_uuid"`
	// Additional context or metadata about the forwarded message.
	ForwardMeta OptMessageForwardMeta `json:"forward_meta"`
	// Additional metadata relevant to the message.
	Meta OptMessageMeta `json:"meta"`
	// The date and time when the object was created.
	CreatedAt time.Time `json:"created_at"`
	// The date and time when the message was last updated.
	UpdatedAt time.Time `json:"updated_at"`
}

// GetUUID returns the value of UUID.
func (s *Message) GetUUID() string {
	return s.UUID
}

// GetSource returns the value of Source.
func (s *Message) GetSource() MessageSource {
	return s.Source
}

// GetType returns the value of Type.
func (s *Message) GetType() OptMessageType {
	return s.Type
}

// GetChatUUID returns the value of ChatUUID.
func (s *Message) GetChatUUID() OptString {
	return s.ChatUUID
}

// GetThreadUUID returns the value of ThreadUUID.
func (s *Message) GetThreadUUID() OptString {
	return s.ThreadUUID
}

// GetSender returns the value of Sender.
func (s *Message) GetSender() string {
	return s.Sender
}

// GetRecipients returns the value of Recipients.
func (s *Message) GetRecipients() []string {
	return s.Recipients
}

// GetSubject returns the value of Subject.
func (s *Message) GetSubject() OptString {
	return s.Subject
}

// GetBody returns the value of Body.
func (s *Message) GetBody() string {
	return s.Body
}

// GetBodyParsed returns the value of BodyParsed.
func (s *Message) GetBodyParsed() OptMessageBodyParsed {
	return s.BodyParsed
}

// GetReactions returns the value of Reactions.
func (s *Message) GetReactions() OptMessageReactions {
	return s.Reactions
}

// GetAttachments returns the value of Attachments.
func (s *Message) GetAttachments() []FileObject {
	return s.Attachments
}

// GetForwardFrom returns the value of ForwardFrom.
func (s *Message) GetForwardFrom() OptString {
	return s.ForwardFrom
}

// GetReplyToMessageUUID returns the value of ReplyToMessageUUID.
func (s *Message) GetReplyToMessageUUID() OptString {
	return s.ReplyToMessageUUID
}

// GetForwardFromChatUUID returns the value of ForwardFromChatUUID.
func (s *Message) GetForwardFromChatUUID() OptString {
	return s.ForwardFromChatUUID
}

// GetForwardFromMessageUUID returns the value of ForwardFromMessageUUID.
func (s *Message) GetForwardFromMessageUUID() OptString {
	return s.ForwardFromMessageUUID
}

// GetForwardMeta returns the value of ForwardMeta.
func (s *Message) GetForwardMeta() OptMessageForwardMeta {
	return s.ForwardMeta
}

// GetMeta returns the value of Meta.
func (s *Message) GetMeta() OptMessageMeta {
	return s.Meta
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Message) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Message) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// SetUUID sets the value of UUID.
func (s *Message) SetUUID(val string) {
	s.UUID = val
}

// SetSource sets the value of Source.
func (s *Message) SetSource(val MessageSource) {
	s.Source = val
}

// SetType sets the value of Type.
func (s *Message) SetType(val OptMessageType) {
	s.Type = val
}

// SetChatUUID sets the value of ChatUUID.
func (s *Message) SetChatUUID(val OptString) {
	s.ChatUUID = val
}

// SetThreadUUID sets the value of ThreadUUID.
func (s *Message) SetThreadUUID(val OptString) {
	s.ThreadUUID = val
}

// SetSender sets the value of Sender.
func (s *Message) SetSender(val string) {
	s.Sender = val
}

// SetRecipients sets the value of Recipients.
func (s *Message) SetRecipients(val []string) {
	s.Recipients = val
}

// SetSubject sets the value of Subject.
func (s *Message) SetSubject(val OptString) {
	s.Subject = val
}

// SetBody sets the value of Body.
func (s *Message) SetBody(val string) {
	s.Body = val
}

// SetBodyParsed sets the value of BodyParsed.
func (s *Message) SetBodyParsed(val OptMessageBodyParsed) {
	s.BodyParsed = val
}

// SetReactions sets the value of Reactions.
func (s *Message) SetReactions(val OptMessageReactions) {
	s.Reactions = val
}

// SetAttachments sets the value of Attachments.
func (s *Message) SetAttachments(val []FileObject) {
	s.Attachments = val
}

// SetForwardFrom sets the value of ForwardFrom.
func (s *Message) SetForwardFrom(val OptString) {
	s.ForwardFrom = val
}

// SetReplyToMessageUUID sets the value of ReplyToMessageUUID.
func (s *Message) SetReplyToMessageUUID(val OptString) {
	s.ReplyToMessageUUID = val
}

// SetForwardFromChatUUID sets the value of ForwardFromChatUUID.
func (s *Message) SetForwardFromChatUUID(val OptString) {
	s.ForwardFromChatUUID = val
}

// SetForwardFromMessageUUID sets the value of ForwardFromMessageUUID.
func (s *Message) SetForwardFromMessageUUID(val OptString) {
	s.ForwardFromMessageUUID = val
}

// SetForwardMeta sets the value of ForwardMeta.
func (s *Message) SetForwardMeta(val OptMessageForwardMeta) {
	s.ForwardMeta = val
}

// SetMeta sets the value of Meta.
func (s *Message) SetMeta(val OptMessageMeta) {
	s.Meta = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Message) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Message) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// Ref: #
type MessageBodyParsed struct {
	// Plain text representation of the subject.
	SubjectText OptString `json:"subject_text"`
	// Slate.js JSON representation of the subject.
	SubjectSlate OptMessageBodyParsedSubjectSlate `json:"subject_slate"`
	// Plain text representation of the body.
	BodyText string `json:"body_text"`
	// Binary representation of the body (e.g., base64-encoded rich content).
	BodyByte []byte `json:"body_byte"`
	// Slate.js JSON representation of the message body.
	BodySlate OptMessageBodyParsedBodySlate `json:"body_slate"`
}

// GetSubjectText returns the value of SubjectText.
func (s *MessageBodyParsed) GetSubjectText() OptString {
	return s.SubjectText
}

// GetSubjectSlate returns the value of SubjectSlate.
func (s *MessageBodyParsed) GetSubjectSlate() OptMessageBodyParsedSubjectSlate {
	return s.SubjectSlate
}

// GetBodyText returns the value of BodyText.
func (s *MessageBodyParsed) GetBodyText() string {
	return s.BodyText
}

// GetBodyByte returns the value of BodyByte.
func (s *MessageBodyParsed) GetBodyByte() []byte {
	return s.BodyByte
}

// GetBodySlate returns the value of BodySlate.
func (s *MessageBodyParsed) GetBodySlate() OptMessageBodyParsedBodySlate {
	return s.BodySlate
}

// SetSubjectText sets the value of SubjectText.
func (s *MessageBodyParsed) SetSubjectText(val OptString) {
	s.SubjectText = val
}

// SetSubjectSlate sets the value of SubjectSlate.
func (s *MessageBodyParsed) SetSubjectSlate(val OptMessageBodyParsedSubjectSlate) {
	s.SubjectSlate = val
}

// SetBodyText sets the value of BodyText.
func (s *MessageBodyParsed) SetBodyText(val string) {
	s.BodyText = val
}

// SetBodyByte sets the value of BodyByte.
func (s *MessageBodyParsed) SetBodyByte(val []byte) {
	s.BodyByte = val
}

// SetBodySlate sets the value of BodySlate.
func (s *MessageBodyParsed) SetBodySlate(val OptMessageBodyParsedBodySlate) {
	s.BodySlate = val
}

// Slate.js JSON representation of the message body.
type MessageBodyParsedBodySlate map[string]jx.Raw

func (s *MessageBodyParsedBodySlate) init() MessageBodyParsedBodySlate {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Slate.js JSON representation of the subject.
type MessageBodyParsedSubjectSlate map[string]jx.Raw

func (s *MessageBodyParsedSubjectSlate) init() MessageBodyParsedSubjectSlate {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type MessageEmailQueryOK struct {
	// List of messages matching the query.
	Messages []Message `json:"messages"`
}

// GetMessages returns the value of Messages.
func (s *MessageEmailQueryOK) GetMessages() []Message {
	return s.Messages
}

// SetMessages sets the value of Messages.
func (s *MessageEmailQueryOK) SetMessages(val []Message) {
	s.Messages = val
}

// Additional context or metadata about the forwarded message.
type MessageForwardMeta map[string]jx.Raw

func (s *MessageForwardMeta) init() MessageForwardMeta {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type MessageLinkedinQueryOK struct {
	// List of messages matching the query.
	Messages []Message `json:"messages"`
}

// GetMessages returns the value of Messages.
func (s *MessageLinkedinQueryOK) GetMessages() []Message {
	return s.Messages
}

// SetMessages sets the value of Messages.
func (s *MessageLinkedinQueryOK) SetMessages(val []Message) {
	s.Messages = val
}

// Additional metadata relevant to the message.
type MessageMeta map[string]jx.Raw

func (s *MessageMeta) init() MessageMeta {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Ref: #
type MessageQuery struct {
	// Platform or data source to query from.
	Source MessageQuerySource `json:"source"`
	// Free-text or advanced operator query. E.g., 'from:', 'to:', 'subject:', 'after:', 'before:'.
	Query OptString `json:"query"`
	// ID of the chat/conversation to filter messages from.
	ChatID OptString `json:"chat_id"`
	// ID of a sub-thread within the conversation.
	ThreadID OptString `json:"thread_id"`
	// Filter messages sent after this date/time.
	StartDate OptDateTime `json:"start_date"`
	// Filter messages sent before this date/time.
	EndDate OptDateTime `json:"end_date"`
	// Sort order by timestamp ('asc' or 'desc').
	Order OptMessageQueryOrder `json:"order"`
	// Maximum number of messages to return.
	Limit OptInt `json:"limit"`
	// Number of records to skip for pagination.
	Offset OptInt `json:"offset"`
	// Specifies the storage backend for message data.
	StorageType OptMessageQueryStorageType `json:"storage_type"`
	// Enable fuzzy matching if true.
	Fuzzy OptBool `json:"fuzzy"`
}

// GetSource returns the value of Source.
func (s *MessageQuery) GetSource() MessageQuerySource {
	return s.Source
}

// GetQuery returns the value of Query.
func (s *MessageQuery) GetQuery() OptString {
	return s.Query
}

// GetChatID returns the value of ChatID.
func (s *MessageQuery) GetChatID() OptString {
	return s.ChatID
}

// GetThreadID returns the value of ThreadID.
func (s *MessageQuery) GetThreadID() OptString {
	return s.ThreadID
}

// GetStartDate returns the value of StartDate.
func (s *MessageQuery) GetStartDate() OptDateTime {
	return s.StartDate
}

// GetEndDate returns the value of EndDate.
func (s *MessageQuery) GetEndDate() OptDateTime {
	return s.EndDate
}

// GetOrder returns the value of Order.
func (s *MessageQuery) GetOrder() OptMessageQueryOrder {
	return s.Order
}

// GetLimit returns the value of Limit.
func (s *MessageQuery) GetLimit() OptInt {
	return s.Limit
}

// GetOffset returns the value of Offset.
func (s *MessageQuery) GetOffset() OptInt {
	return s.Offset
}

// GetStorageType returns the value of StorageType.
func (s *MessageQuery) GetStorageType() OptMessageQueryStorageType {
	return s.StorageType
}

// GetFuzzy returns the value of Fuzzy.
func (s *MessageQuery) GetFuzzy() OptBool {
	return s.Fuzzy
}

// SetSource sets the value of Source.
func (s *MessageQuery) SetSource(val MessageQuerySource) {
	s.Source = val
}

// SetQuery sets the value of Query.
func (s *MessageQuery) SetQuery(val OptString) {
	s.Query = val
}

// SetChatID sets the value of ChatID.
func (s *MessageQuery) SetChatID(val OptString) {
	s.ChatID = val
}

// SetThreadID sets the value of ThreadID.
func (s *MessageQuery) SetThreadID(val OptString) {
	s.ThreadID = val
}

// SetStartDate sets the value of StartDate.
func (s *MessageQuery) SetStartDate(val OptDateTime) {
	s.StartDate = val
}

// SetEndDate sets the value of EndDate.
func (s *MessageQuery) SetEndDate(val OptDateTime) {
	s.EndDate = val
}

// SetOrder sets the value of Order.
func (s *MessageQuery) SetOrder(val OptMessageQueryOrder) {
	s.Order = val
}

// SetLimit sets the value of Limit.
func (s *MessageQuery) SetLimit(val OptInt) {
	s.Limit = val
}

// SetOffset sets the value of Offset.
func (s *MessageQuery) SetOffset(val OptInt) {
	s.Offset = val
}

// SetStorageType sets the value of StorageType.
func (s *MessageQuery) SetStorageType(val OptMessageQueryStorageType) {
	s.StorageType = val
}

// SetFuzzy sets the value of Fuzzy.
func (s *MessageQuery) SetFuzzy(val OptBool) {
	s.Fuzzy = val
}

// Sort order by timestamp ('asc' or 'desc').
type MessageQueryOrder string

const (
	MessageQueryOrderAsc  MessageQueryOrder = "asc"
	MessageQueryOrderDesc MessageQueryOrder = "desc"
)

// AllValues returns all MessageQueryOrder values.
func (MessageQueryOrder) AllValues() []MessageQueryOrder {
	return []MessageQueryOrder{
		MessageQueryOrderAsc,
		MessageQueryOrderDesc,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s MessageQueryOrder) MarshalText() ([]byte, error) {
	switch s {
	case MessageQueryOrderAsc:
		return []byte(s), nil
	case MessageQueryOrderDesc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *MessageQueryOrder) UnmarshalText(data []byte) error {
	switch MessageQueryOrder(data) {
	case MessageQueryOrderAsc:
		*s = MessageQueryOrderAsc
		return nil
	case MessageQueryOrderDesc:
		*s = MessageQueryOrderDesc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Platform or data source to query from.
type MessageQuerySource string

const (
	MessageQuerySourceEmail    MessageQuerySource = "email"
	MessageQuerySourceWhatsapp MessageQuerySource = "whatsapp"
	MessageQuerySourceTelegram MessageQuerySource = "telegram"
	MessageQuerySourceLinkedin MessageQuerySource = "linkedin"
	MessageQuerySourceCustom   MessageQuerySource = "custom"
)

// AllValues returns all MessageQuerySource values.
func (MessageQuerySource) AllValues() []MessageQuerySource {
	return []MessageQuerySource{
		MessageQuerySourceEmail,
		MessageQuerySourceWhatsapp,
		MessageQuerySourceTelegram,
		MessageQuerySourceLinkedin,
		MessageQuerySourceCustom,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s MessageQuerySource) MarshalText() ([]byte, error) {
	switch s {
	case MessageQuerySourceEmail:
		return []byte(s), nil
	case MessageQuerySourceWhatsapp:
		return []byte(s), nil
	case MessageQuerySourceTelegram:
		return []byte(s), nil
	case MessageQuerySourceLinkedin:
		return []byte(s), nil
	case MessageQuerySourceCustom:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *MessageQuerySource) UnmarshalText(data []byte) error {
	switch MessageQuerySource(data) {
	case MessageQuerySourceEmail:
		*s = MessageQuerySourceEmail
		return nil
	case MessageQuerySourceWhatsapp:
		*s = MessageQuerySourceWhatsapp
		return nil
	case MessageQuerySourceTelegram:
		*s = MessageQuerySourceTelegram
		return nil
	case MessageQuerySourceLinkedin:
		*s = MessageQuerySourceLinkedin
		return nil
	case MessageQuerySourceCustom:
		*s = MessageQuerySourceCustom
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Specifies the storage backend for message data.
type MessageQueryStorageType string

const (
	MessageQueryStorageTypePostgres  MessageQueryStorageType = "postgres"
	MessageQueryStorageTypeS3        MessageQueryStorageType = "s3"
	MessageQueryStorageTypeHostfiles MessageQueryStorageType = "hostfiles"
)

// AllValues returns all MessageQueryStorageType values.
func (MessageQueryStorageType) AllValues() []MessageQueryStorageType {
	return []MessageQueryStorageType{
		MessageQueryStorageTypePostgres,
		MessageQueryStorageTypeS3,
		MessageQueryStorageTypeHostfiles,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s MessageQueryStorageType) MarshalText() ([]byte, error) {
	switch s {
	case MessageQueryStorageTypePostgres:
		return []byte(s), nil
	case MessageQueryStorageTypeS3:
		return []byte(s), nil
	case MessageQueryStorageTypeHostfiles:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *MessageQueryStorageType) UnmarshalText(data []byte) error {
	switch MessageQueryStorageType(data) {
	case MessageQueryStorageTypePostgres:
		*s = MessageQueryStorageTypePostgres
		return nil
	case MessageQueryStorageTypeS3:
		*s = MessageQueryStorageTypeS3
		return nil
	case MessageQueryStorageTypeHostfiles:
		*s = MessageQueryStorageTypeHostfiles
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Collection of reactions (e.g., likes, emojis) applied to this message.
type MessageReactions map[string]int

func (s *MessageReactions) init() MessageReactions {
	m := *s
	if m == nil {
		m = map[string]int{}
		*s = m
	}
	return m
}

// Data source or platform the message originated from.
type MessageSource string

const (
	MessageSourceEmail    MessageSource = "email"
	MessageSourceWhatsapp MessageSource = "whatsapp"
	MessageSourceTelegram MessageSource = "telegram"
	MessageSourceLinkedin MessageSource = "linkedin"
	MessageSourceCustom   MessageSource = "custom"
)

// AllValues returns all MessageSource values.
func (MessageSource) AllValues() []MessageSource {
	return []MessageSource{
		MessageSourceEmail,
		MessageSourceWhatsapp,
		MessageSourceTelegram,
		MessageSourceLinkedin,
		MessageSourceCustom,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s MessageSource) MarshalText() ([]byte, error) {
	switch s {
	case MessageSourceEmail:
		return []byte(s), nil
	case MessageSourceWhatsapp:
		return []byte(s), nil
	case MessageSourceTelegram:
		return []byte(s), nil
	case MessageSourceLinkedin:
		return []byte(s), nil
	case MessageSourceCustom:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *MessageSource) UnmarshalText(data []byte) error {
	switch MessageSource(data) {
	case MessageSourceEmail:
		*s = MessageSourceEmail
		return nil
	case MessageSourceWhatsapp:
		*s = MessageSourceWhatsapp
		return nil
	case MessageSourceTelegram:
		*s = MessageSourceTelegram
		return nil
	case MessageSourceLinkedin:
		*s = MessageSourceLinkedin
		return nil
	case MessageSourceCustom:
		*s = MessageSourceCustom
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type MessageTelegramQueryOK struct {
	// List of messages matching the query.
	Messages []Message `json:"messages"`
}

// GetMessages returns the value of Messages.
func (s *MessageTelegramQueryOK) GetMessages() []Message {
	return s.Messages
}

// SetMessages sets the value of Messages.
func (s *MessageTelegramQueryOK) SetMessages(val []Message) {
	s.Messages = val
}

// Specifies the type or classification of the message.
type MessageType string

const (
	MessageTypeText         MessageType = "text"
	MessageTypeMedia        MessageType = "media"
	MessageTypeSystem       MessageType = "system"
	MessageTypeNotification MessageType = "notification"
	MessageTypeAttachment   MessageType = "attachment"
	MessageTypeInvite       MessageType = "invite"
	MessageTypeEvent        MessageType = "event"
	MessageTypeCall         MessageType = "call"
)

// AllValues returns all MessageType values.
func (MessageType) AllValues() []MessageType {
	return []MessageType{
		MessageTypeText,
		MessageTypeMedia,
		MessageTypeSystem,
		MessageTypeNotification,
		MessageTypeAttachment,
		MessageTypeInvite,
		MessageTypeEvent,
		MessageTypeCall,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s MessageType) MarshalText() ([]byte, error) {
	switch s {
	case MessageTypeText:
		return []byte(s), nil
	case MessageTypeMedia:
		return []byte(s), nil
	case MessageTypeSystem:
		return []byte(s), nil
	case MessageTypeNotification:
		return []byte(s), nil
	case MessageTypeAttachment:
		return []byte(s), nil
	case MessageTypeInvite:
		return []byte(s), nil
	case MessageTypeEvent:
		return []byte(s), nil
	case MessageTypeCall:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *MessageType) UnmarshalText(data []byte) error {
	switch MessageType(data) {
	case MessageTypeText:
		*s = MessageTypeText
		return nil
	case MessageTypeMedia:
		*s = MessageTypeMedia
		return nil
	case MessageTypeSystem:
		*s = MessageTypeSystem
		return nil
	case MessageTypeNotification:
		*s = MessageTypeNotification
		return nil
	case MessageTypeAttachment:
		*s = MessageTypeAttachment
		return nil
	case MessageTypeInvite:
		*s = MessageTypeInvite
		return nil
	case MessageTypeEvent:
		*s = MessageTypeEvent
		return nil
	case MessageTypeCall:
		*s = MessageTypeCall
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type MessageWhatsappQueryOK struct {
	// List of messages matching the query.
	Messages []Message `json:"messages"`
}

// GetMessages returns the value of Messages.
func (s *MessageWhatsappQueryOK) GetMessages() []Message {
	return s.Messages
}

// SetMessages sets the value of Messages.
func (s *MessageWhatsappQueryOK) SetMessages(val []Message) {
	s.Messages = val
}

// Ref: #
type OAuth2Client struct {
	ID        string    `json:"id"`
	Name      string    `json:"name"`
	Provider  string    `json:"provider"`
	Secret    string    `json:"secret"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *OAuth2Client) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *OAuth2Client) GetName() string {
	return s.Name
}

// GetProvider returns the value of Provider.
func (s *OAuth2Client) GetProvider() string {
	return s.Provider
}

// GetSecret returns the value of Secret.
func (s *OAuth2Client) GetSecret() string {
	return s.Secret
}

// GetCreatedAt returns the value of CreatedAt.
func (s *OAuth2Client) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *OAuth2Client) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *OAuth2Client) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *OAuth2Client) SetName(val string) {
	s.Name = val
}

// SetProvider sets the value of Provider.
func (s *OAuth2Client) SetProvider(val string) {
	s.Provider = val
}

// SetSecret sets the value of Secret.
func (s *OAuth2Client) SetSecret(val string) {
	s.Secret = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *OAuth2Client) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *OAuth2Client) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// OAuth2ClientCallbackFound is response for OAuth2ClientCallback operation.
type OAuth2ClientCallbackFound struct {
	Location OptURI
}

// GetLocation returns the value of Location.
func (s *OAuth2ClientCallbackFound) GetLocation() OptURI {
	return s.Location
}

// SetLocation sets the value of Location.
func (s *OAuth2ClientCallbackFound) SetLocation(val OptURI) {
	s.Location = val
}

type OAuth2ClientCreateReq struct {
	// ID of the client.
	ID string `json:"id"`
	// Name of the client.
	Name string `json:"name"`
	// Provider of the client.
	Provider string `json:"provider"`
	// Secret of the client.
	Secret string `json:"secret"`
}

// GetID returns the value of ID.
func (s *OAuth2ClientCreateReq) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *OAuth2ClientCreateReq) GetName() string {
	return s.Name
}

// GetProvider returns the value of Provider.
func (s *OAuth2ClientCreateReq) GetProvider() string {
	return s.Provider
}

// GetSecret returns the value of Secret.
func (s *OAuth2ClientCreateReq) GetSecret() string {
	return s.Secret
}

// SetID sets the value of ID.
func (s *OAuth2ClientCreateReq) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *OAuth2ClientCreateReq) SetName(val string) {
	s.Name = val
}

// SetProvider sets the value of Provider.
func (s *OAuth2ClientCreateReq) SetProvider(val string) {
	s.Provider = val
}

// SetSecret sets the value of Secret.
func (s *OAuth2ClientCreateReq) SetSecret(val string) {
	s.Secret = val
}

// OAuth2ClientDeleteOK is response for OAuth2ClientDelete operation.
type OAuth2ClientDeleteOK struct{}

type OAuth2ClientListOK struct {
	// List of OAuth2 clients.
	Clients []OAuth2Client `json:"clients"`
}

// GetClients returns the value of Clients.
func (s *OAuth2ClientListOK) GetClients() []OAuth2Client {
	return s.Clients
}

// SetClients sets the value of Clients.
func (s *OAuth2ClientListOK) SetClients(val []OAuth2Client) {
	s.Clients = val
}

type OAuth2ClientLoginOK struct {
	// Auth code URL.
	AuthCodeURL string `json:"auth_code_url"`
}

// GetAuthCodeURL returns the value of AuthCodeURL.
func (s *OAuth2ClientLoginOK) GetAuthCodeURL() string {
	return s.AuthCodeURL
}

// SetAuthCodeURL sets the value of AuthCodeURL.
func (s *OAuth2ClientLoginOK) SetAuthCodeURL(val string) {
	s.AuthCodeURL = val
}

type OAuth2ClientLoginReq struct {
	// Client ID.
	ClientID string `json:"client_id"`
	// Query parameters.
	Query OAuth2ClientLoginReqQuery `json:"query"`
}

// GetClientID returns the value of ClientID.
func (s *OAuth2ClientLoginReq) GetClientID() string {
	return s.ClientID
}

// GetQuery returns the value of Query.
func (s *OAuth2ClientLoginReq) GetQuery() OAuth2ClientLoginReqQuery {
	return s.Query
}

// SetClientID sets the value of ClientID.
func (s *OAuth2ClientLoginReq) SetClientID(val string) {
	s.ClientID = val
}

// SetQuery sets the value of Query.
func (s *OAuth2ClientLoginReq) SetQuery(val OAuth2ClientLoginReqQuery) {
	s.Query = val
}

// Query parameters.
type OAuth2ClientLoginReqQuery map[string][]string

func (s *OAuth2ClientLoginReqQuery) init() OAuth2ClientLoginReqQuery {
	m := *s
	if m == nil {
		m = map[string][]string{}
		*s = m
	}
	return m
}

// Ref: #
type OAuth2ClientToken struct {
	UUID      string    `json:"uuid"`
	ClientID  string    `json:"client_id"`
	Name      string    `json:"name"`
	Token     string    `json:"token"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

// GetUUID returns the value of UUID.
func (s *OAuth2ClientToken) GetUUID() string {
	return s.UUID
}

// GetClientID returns the value of ClientID.
func (s *OAuth2ClientToken) GetClientID() string {
	return s.ClientID
}

// GetName returns the value of Name.
func (s *OAuth2ClientToken) GetName() string {
	return s.Name
}

// GetToken returns the value of Token.
func (s *OAuth2ClientToken) GetToken() string {
	return s.Token
}

// GetCreatedAt returns the value of CreatedAt.
func (s *OAuth2ClientToken) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *OAuth2ClientToken) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// SetUUID sets the value of UUID.
func (s *OAuth2ClientToken) SetUUID(val string) {
	s.UUID = val
}

// SetClientID sets the value of ClientID.
func (s *OAuth2ClientToken) SetClientID(val string) {
	s.ClientID = val
}

// SetName sets the value of Name.
func (s *OAuth2ClientToken) SetName(val string) {
	s.Name = val
}

// SetToken sets the value of Token.
func (s *OAuth2ClientToken) SetToken(val string) {
	s.Token = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *OAuth2ClientToken) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *OAuth2ClientToken) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// OAuth2ClientTokenDeleteOK is response for OAuth2ClientTokenDelete operation.
type OAuth2ClientTokenDeleteOK struct{}

type OAuth2ClientUpdateReq struct {
	// Name of the client.
	Name string `json:"name"`
	// Provider of the client.
	Provider string `json:"provider"`
	// Secret of the client.
	Secret string `json:"secret"`
}

// GetName returns the value of Name.
func (s *OAuth2ClientUpdateReq) GetName() string {
	return s.Name
}

// GetProvider returns the value of Provider.
func (s *OAuth2ClientUpdateReq) GetProvider() string {
	return s.Provider
}

// GetSecret returns the value of Secret.
func (s *OAuth2ClientUpdateReq) GetSecret() string {
	return s.Secret
}

// SetName sets the value of Name.
func (s *OAuth2ClientUpdateReq) SetName(val string) {
	s.Name = val
}

// SetProvider sets the value of Provider.
func (s *OAuth2ClientUpdateReq) SetProvider(val string) {
	s.Provider = val
}

// SetSecret sets the value of Secret.
func (s *OAuth2ClientUpdateReq) SetSecret(val string) {
	s.Secret = val
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatasourceLinkedinSettings returns new OptDatasourceLinkedinSettings with value set to v.
func NewOptDatasourceLinkedinSettings(v DatasourceLinkedinSettings) OptDatasourceLinkedinSettings {
	return OptDatasourceLinkedinSettings{
		Value: v,
		Set:   true,
	}
}

// OptDatasourceLinkedinSettings is optional DatasourceLinkedinSettings.
type OptDatasourceLinkedinSettings struct {
	Value DatasourceLinkedinSettings
	Set   bool
}

// IsSet returns true if OptDatasourceLinkedinSettings was set.
func (o OptDatasourceLinkedinSettings) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatasourceLinkedinSettings) Reset() {
	var v DatasourceLinkedinSettings
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatasourceLinkedinSettings) SetTo(v DatasourceLinkedinSettings) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatasourceLinkedinSettings) Get() (v DatasourceLinkedinSettings, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatasourceLinkedinSettings) Or(d DatasourceLinkedinSettings) DatasourceLinkedinSettings {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatasourceTelegramMeta returns new OptDatasourceTelegramMeta with value set to v.
func NewOptDatasourceTelegramMeta(v DatasourceTelegramMeta) OptDatasourceTelegramMeta {
	return OptDatasourceTelegramMeta{
		Value: v,
		Set:   true,
	}
}

// OptDatasourceTelegramMeta is optional DatasourceTelegramMeta.
type OptDatasourceTelegramMeta struct {
	Value DatasourceTelegramMeta
	Set   bool
}

// IsSet returns true if OptDatasourceTelegramMeta was set.
func (o OptDatasourceTelegramMeta) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatasourceTelegramMeta) Reset() {
	var v DatasourceTelegramMeta
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatasourceTelegramMeta) SetTo(v DatasourceTelegramMeta) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatasourceTelegramMeta) Get() (v DatasourceTelegramMeta, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatasourceTelegramMeta) Or(d DatasourceTelegramMeta) DatasourceTelegramMeta {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatasourceTelegramSettings returns new OptDatasourceTelegramSettings with value set to v.
func NewOptDatasourceTelegramSettings(v DatasourceTelegramSettings) OptDatasourceTelegramSettings {
	return OptDatasourceTelegramSettings{
		Value: v,
		Set:   true,
	}
}

// OptDatasourceTelegramSettings is optional DatasourceTelegramSettings.
type OptDatasourceTelegramSettings struct {
	Value DatasourceTelegramSettings
	Set   bool
}

// IsSet returns true if OptDatasourceTelegramSettings was set.
func (o OptDatasourceTelegramSettings) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatasourceTelegramSettings) Reset() {
	var v DatasourceTelegramSettings
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatasourceTelegramSettings) SetTo(v DatasourceTelegramSettings) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatasourceTelegramSettings) Get() (v DatasourceTelegramSettings, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatasourceTelegramSettings) Or(d DatasourceTelegramSettings) DatasourceTelegramSettings {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatasourceWhatsappSettings returns new OptDatasourceWhatsappSettings with value set to v.
func NewOptDatasourceWhatsappSettings(v DatasourceWhatsappSettings) OptDatasourceWhatsappSettings {
	return OptDatasourceWhatsappSettings{
		Value: v,
		Set:   true,
	}
}

// OptDatasourceWhatsappSettings is optional DatasourceWhatsappSettings.
type OptDatasourceWhatsappSettings struct {
	Value DatasourceWhatsappSettings
	Set   bool
}

// IsSet returns true if OptDatasourceWhatsappSettings was set.
func (o OptDatasourceWhatsappSettings) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatasourceWhatsappSettings) Reset() {
	var v DatasourceWhatsappSettings
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatasourceWhatsappSettings) SetTo(v DatasourceWhatsappSettings) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatasourceWhatsappSettings) Get() (v DatasourceWhatsappSettings, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatasourceWhatsappSettings) Or(d DatasourceWhatsappSettings) DatasourceWhatsappSettings {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEmailLabelColor returns new OptEmailLabelColor with value set to v.
func NewOptEmailLabelColor(v EmailLabelColor) OptEmailLabelColor {
	return OptEmailLabelColor{
		Value: v,
		Set:   true,
	}
}

// OptEmailLabelColor is optional EmailLabelColor.
type OptEmailLabelColor struct {
	Value EmailLabelColor
	Set   bool
}

// IsSet returns true if OptEmailLabelColor was set.
func (o OptEmailLabelColor) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEmailLabelColor) Reset() {
	var v EmailLabelColor
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEmailLabelColor) SetTo(v EmailLabelColor) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEmailLabelColor) Get() (v EmailLabelColor, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEmailLabelColor) Or(d EmailLabelColor) EmailLabelColor {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFileObject returns new OptFileObject with value set to v.
func NewOptFileObject(v FileObject) OptFileObject {
	return OptFileObject{
		Value: v,
		Set:   true,
	}
}

// OptFileObject is optional FileObject.
type OptFileObject struct {
	Value FileObject
	Set   bool
}

// IsSet returns true if OptFileObject was set.
func (o OptFileObject) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFileObject) Reset() {
	var v FileObject
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFileObject) SetTo(v FileObject) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFileObject) Get() (v FileObject, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFileObject) Or(d FileObject) FileObject {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFileObjectStorageType returns new OptFileObjectStorageType with value set to v.
func NewOptFileObjectStorageType(v FileObjectStorageType) OptFileObjectStorageType {
	return OptFileObjectStorageType{
		Value: v,
		Set:   true,
	}
}

// OptFileObjectStorageType is optional FileObjectStorageType.
type OptFileObjectStorageType struct {
	Value FileObjectStorageType
	Set   bool
}

// IsSet returns true if OptFileObjectStorageType was set.
func (o OptFileObjectStorageType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFileObjectStorageType) Reset() {
	var v FileObjectStorageType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFileObjectStorageType) SetTo(v FileObjectStorageType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFileObjectStorageType) Get() (v FileObjectStorageType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFileObjectStorageType) Or(d FileObjectStorageType) FileObjectStorageType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt32 returns new OptInt32 with value set to v.
func NewOptInt32(v int32) OptInt32 {
	return OptInt32{
		Value: v,
		Set:   true,
	}
}

// OptInt32 is optional int32.
type OptInt32 struct {
	Value int32
	Set   bool
}

// IsSet returns true if OptInt32 was set.
func (o OptInt32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt32) Reset() {
	var v int32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt32) SetTo(v int32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt32) Get() (v int32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt32) Or(d int32) int32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt64 returns new OptInt64 with value set to v.
func NewOptInt64(v int64) OptInt64 {
	return OptInt64{
		Value: v,
		Set:   true,
	}
}

// OptInt64 is optional int64.
type OptInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptInt64 was set.
func (o OptInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMessageBodyParsed returns new OptMessageBodyParsed with value set to v.
func NewOptMessageBodyParsed(v MessageBodyParsed) OptMessageBodyParsed {
	return OptMessageBodyParsed{
		Value: v,
		Set:   true,
	}
}

// OptMessageBodyParsed is optional MessageBodyParsed.
type OptMessageBodyParsed struct {
	Value MessageBodyParsed
	Set   bool
}

// IsSet returns true if OptMessageBodyParsed was set.
func (o OptMessageBodyParsed) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMessageBodyParsed) Reset() {
	var v MessageBodyParsed
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMessageBodyParsed) SetTo(v MessageBodyParsed) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMessageBodyParsed) Get() (v MessageBodyParsed, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMessageBodyParsed) Or(d MessageBodyParsed) MessageBodyParsed {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMessageBodyParsedBodySlate returns new OptMessageBodyParsedBodySlate with value set to v.
func NewOptMessageBodyParsedBodySlate(v MessageBodyParsedBodySlate) OptMessageBodyParsedBodySlate {
	return OptMessageBodyParsedBodySlate{
		Value: v,
		Set:   true,
	}
}

// OptMessageBodyParsedBodySlate is optional MessageBodyParsedBodySlate.
type OptMessageBodyParsedBodySlate struct {
	Value MessageBodyParsedBodySlate
	Set   bool
}

// IsSet returns true if OptMessageBodyParsedBodySlate was set.
func (o OptMessageBodyParsedBodySlate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMessageBodyParsedBodySlate) Reset() {
	var v MessageBodyParsedBodySlate
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMessageBodyParsedBodySlate) SetTo(v MessageBodyParsedBodySlate) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMessageBodyParsedBodySlate) Get() (v MessageBodyParsedBodySlate, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMessageBodyParsedBodySlate) Or(d MessageBodyParsedBodySlate) MessageBodyParsedBodySlate {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMessageBodyParsedSubjectSlate returns new OptMessageBodyParsedSubjectSlate with value set to v.
func NewOptMessageBodyParsedSubjectSlate(v MessageBodyParsedSubjectSlate) OptMessageBodyParsedSubjectSlate {
	return OptMessageBodyParsedSubjectSlate{
		Value: v,
		Set:   true,
	}
}

// OptMessageBodyParsedSubjectSlate is optional MessageBodyParsedSubjectSlate.
type OptMessageBodyParsedSubjectSlate struct {
	Value MessageBodyParsedSubjectSlate
	Set   bool
}

// IsSet returns true if OptMessageBodyParsedSubjectSlate was set.
func (o OptMessageBodyParsedSubjectSlate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMessageBodyParsedSubjectSlate) Reset() {
	var v MessageBodyParsedSubjectSlate
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMessageBodyParsedSubjectSlate) SetTo(v MessageBodyParsedSubjectSlate) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMessageBodyParsedSubjectSlate) Get() (v MessageBodyParsedSubjectSlate, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMessageBodyParsedSubjectSlate) Or(d MessageBodyParsedSubjectSlate) MessageBodyParsedSubjectSlate {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMessageForwardMeta returns new OptMessageForwardMeta with value set to v.
func NewOptMessageForwardMeta(v MessageForwardMeta) OptMessageForwardMeta {
	return OptMessageForwardMeta{
		Value: v,
		Set:   true,
	}
}

// OptMessageForwardMeta is optional MessageForwardMeta.
type OptMessageForwardMeta struct {
	Value MessageForwardMeta
	Set   bool
}

// IsSet returns true if OptMessageForwardMeta was set.
func (o OptMessageForwardMeta) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMessageForwardMeta) Reset() {
	var v MessageForwardMeta
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMessageForwardMeta) SetTo(v MessageForwardMeta) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMessageForwardMeta) Get() (v MessageForwardMeta, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMessageForwardMeta) Or(d MessageForwardMeta) MessageForwardMeta {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMessageMeta returns new OptMessageMeta with value set to v.
func NewOptMessageMeta(v MessageMeta) OptMessageMeta {
	return OptMessageMeta{
		Value: v,
		Set:   true,
	}
}

// OptMessageMeta is optional MessageMeta.
type OptMessageMeta struct {
	Value MessageMeta
	Set   bool
}

// IsSet returns true if OptMessageMeta was set.
func (o OptMessageMeta) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMessageMeta) Reset() {
	var v MessageMeta
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMessageMeta) SetTo(v MessageMeta) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMessageMeta) Get() (v MessageMeta, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMessageMeta) Or(d MessageMeta) MessageMeta {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMessageQueryOrder returns new OptMessageQueryOrder with value set to v.
func NewOptMessageQueryOrder(v MessageQueryOrder) OptMessageQueryOrder {
	return OptMessageQueryOrder{
		Value: v,
		Set:   true,
	}
}

// OptMessageQueryOrder is optional MessageQueryOrder.
type OptMessageQueryOrder struct {
	Value MessageQueryOrder
	Set   bool
}

// IsSet returns true if OptMessageQueryOrder was set.
func (o OptMessageQueryOrder) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMessageQueryOrder) Reset() {
	var v MessageQueryOrder
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMessageQueryOrder) SetTo(v MessageQueryOrder) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMessageQueryOrder) Get() (v MessageQueryOrder, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMessageQueryOrder) Or(d MessageQueryOrder) MessageQueryOrder {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMessageQueryStorageType returns new OptMessageQueryStorageType with value set to v.
func NewOptMessageQueryStorageType(v MessageQueryStorageType) OptMessageQueryStorageType {
	return OptMessageQueryStorageType{
		Value: v,
		Set:   true,
	}
}

// OptMessageQueryStorageType is optional MessageQueryStorageType.
type OptMessageQueryStorageType struct {
	Value MessageQueryStorageType
	Set   bool
}

// IsSet returns true if OptMessageQueryStorageType was set.
func (o OptMessageQueryStorageType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMessageQueryStorageType) Reset() {
	var v MessageQueryStorageType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMessageQueryStorageType) SetTo(v MessageQueryStorageType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMessageQueryStorageType) Get() (v MessageQueryStorageType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMessageQueryStorageType) Or(d MessageQueryStorageType) MessageQueryStorageType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMessageReactions returns new OptMessageReactions with value set to v.
func NewOptMessageReactions(v MessageReactions) OptMessageReactions {
	return OptMessageReactions{
		Value: v,
		Set:   true,
	}
}

// OptMessageReactions is optional MessageReactions.
type OptMessageReactions struct {
	Value MessageReactions
	Set   bool
}

// IsSet returns true if OptMessageReactions was set.
func (o OptMessageReactions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMessageReactions) Reset() {
	var v MessageReactions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMessageReactions) SetTo(v MessageReactions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMessageReactions) Get() (v MessageReactions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMessageReactions) Or(d MessageReactions) MessageReactions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMessageType returns new OptMessageType with value set to v.
func NewOptMessageType(v MessageType) OptMessageType {
	return OptMessageType{
		Value: v,
		Set:   true,
	}
}

// OptMessageType is optional MessageType.
type OptMessageType struct {
	Value MessageType
	Set   bool
}

// IsSet returns true if OptMessageType was set.
func (o OptMessageType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMessageType) Reset() {
	var v MessageType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMessageType) SetTo(v MessageType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMessageType) Get() (v MessageType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMessageType) Or(d MessageType) MessageType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilString returns new OptNilString with value set to v.
func NewOptNilString(v string) OptNilString {
	return OptNilString{
		Value: v,
		Set:   true,
	}
}

// OptNilString is optional nullable string.
type OptNilString struct {
	Value string
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilString was set.
func (o OptNilString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilString) Reset() {
	var v string
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilString) SetTo(v string) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilString) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilString) SetToNull() {
	o.Set = true
	o.Null = true
	var v string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSyncPolicySettings returns new OptSyncPolicySettings with value set to v.
func NewOptSyncPolicySettings(v SyncPolicySettings) OptSyncPolicySettings {
	return OptSyncPolicySettings{
		Value: v,
		Set:   true,
	}
}

// OptSyncPolicySettings is optional SyncPolicySettings.
type OptSyncPolicySettings struct {
	Value SyncPolicySettings
	Set   bool
}

// IsSet returns true if OptSyncPolicySettings was set.
func (o OptSyncPolicySettings) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSyncPolicySettings) Reset() {
	var v SyncPolicySettings
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSyncPolicySettings) SetTo(v SyncPolicySettings) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSyncPolicySettings) Get() (v SyncPolicySettings, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSyncPolicySettings) Or(d SyncPolicySettings) SyncPolicySettings {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTelegramParticipantsItemMeta returns new OptTelegramParticipantsItemMeta with value set to v.
func NewOptTelegramParticipantsItemMeta(v TelegramParticipantsItemMeta) OptTelegramParticipantsItemMeta {
	return OptTelegramParticipantsItemMeta{
		Value: v,
		Set:   true,
	}
}

// OptTelegramParticipantsItemMeta is optional TelegramParticipantsItemMeta.
type OptTelegramParticipantsItemMeta struct {
	Value TelegramParticipantsItemMeta
	Set   bool
}

// IsSet returns true if OptTelegramParticipantsItemMeta was set.
func (o OptTelegramParticipantsItemMeta) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTelegramParticipantsItemMeta) Reset() {
	var v TelegramParticipantsItemMeta
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTelegramParticipantsItemMeta) SetTo(v TelegramParticipantsItemMeta) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTelegramParticipantsItemMeta) Get() (v TelegramParticipantsItemMeta, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTelegramParticipantsItemMeta) Or(d TelegramParticipantsItemMeta) TelegramParticipantsItemMeta {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTelegramSessionHistoryItemMeta returns new OptTelegramSessionHistoryItemMeta with value set to v.
func NewOptTelegramSessionHistoryItemMeta(v TelegramSessionHistoryItemMeta) OptTelegramSessionHistoryItemMeta {
	return OptTelegramSessionHistoryItemMeta{
		Value: v,
		Set:   true,
	}
}

// OptTelegramSessionHistoryItemMeta is optional TelegramSessionHistoryItemMeta.
type OptTelegramSessionHistoryItemMeta struct {
	Value TelegramSessionHistoryItemMeta
	Set   bool
}

// IsSet returns true if OptTelegramSessionHistoryItemMeta was set.
func (o OptTelegramSessionHistoryItemMeta) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTelegramSessionHistoryItemMeta) Reset() {
	var v TelegramSessionHistoryItemMeta
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTelegramSessionHistoryItemMeta) SetTo(v TelegramSessionHistoryItemMeta) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTelegramSessionHistoryItemMeta) Get() (v TelegramSessionHistoryItemMeta, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTelegramSessionHistoryItemMeta) Or(d TelegramSessionHistoryItemMeta) TelegramSessionHistoryItemMeta {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptURI returns new OptURI with value set to v.
func NewOptURI(v url.URL) OptURI {
	return OptURI{
		Value: v,
		Set:   true,
	}
}

// OptURI is optional url.URL.
type OptURI struct {
	Value url.URL
	Set   bool
}

// IsSet returns true if OptURI was set.
func (o OptURI) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptURI) Reset() {
	var v url.URL
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptURI) SetTo(v url.URL) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptURI) Get() (v url.URL, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptURI) Or(d url.URL) url.URL {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUploadFileRequestStorageType returns new OptUploadFileRequestStorageType with value set to v.
func NewOptUploadFileRequestStorageType(v UploadFileRequestStorageType) OptUploadFileRequestStorageType {
	return OptUploadFileRequestStorageType{
		Value: v,
		Set:   true,
	}
}

// OptUploadFileRequestStorageType is optional UploadFileRequestStorageType.
type OptUploadFileRequestStorageType struct {
	Value UploadFileRequestStorageType
	Set   bool
}

// IsSet returns true if OptUploadFileRequestStorageType was set.
func (o OptUploadFileRequestStorageType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUploadFileRequestStorageType) Reset() {
	var v UploadFileRequestStorageType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUploadFileRequestStorageType) SetTo(v UploadFileRequestStorageType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUploadFileRequestStorageType) Get() (v UploadFileRequestStorageType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUploadFileRequestStorageType) Or(d UploadFileRequestStorageType) UploadFileRequestStorageType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUploadPresignedUrlRequestStorageType returns new OptUploadPresignedUrlRequestStorageType with value set to v.
func NewOptUploadPresignedUrlRequestStorageType(v UploadPresignedUrlRequestStorageType) OptUploadPresignedUrlRequestStorageType {
	return OptUploadPresignedUrlRequestStorageType{
		Value: v,
		Set:   true,
	}
}

// OptUploadPresignedUrlRequestStorageType is optional UploadPresignedUrlRequestStorageType.
type OptUploadPresignedUrlRequestStorageType struct {
	Value UploadPresignedUrlRequestStorageType
	Set   bool
}

// IsSet returns true if OptUploadPresignedUrlRequestStorageType was set.
func (o OptUploadPresignedUrlRequestStorageType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUploadPresignedUrlRequestStorageType) Reset() {
	var v UploadPresignedUrlRequestStorageType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUploadPresignedUrlRequestStorageType) SetTo(v UploadPresignedUrlRequestStorageType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUploadPresignedUrlRequestStorageType) Get() (v UploadPresignedUrlRequestStorageType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUploadPresignedUrlRequestStorageType) Or(d UploadPresignedUrlRequestStorageType) UploadPresignedUrlRequestStorageType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #
type Pipeline struct {
	UUID      string       `json:"uuid"`
	Name      string       `json:"name"`
	Flow      PipelineFlow `json:"flow"`
	CreatedAt OptDateTime  `json:"created_at"`
	UpdatedAt OptDateTime  `json:"updated_at"`
}

// GetUUID returns the value of UUID.
func (s *Pipeline) GetUUID() string {
	return s.UUID
}

// GetName returns the value of Name.
func (s *Pipeline) GetName() string {
	return s.Name
}

// GetFlow returns the value of Flow.
func (s *Pipeline) GetFlow() PipelineFlow {
	return s.Flow
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Pipeline) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Pipeline) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// SetUUID sets the value of UUID.
func (s *Pipeline) SetUUID(val string) {
	s.UUID = val
}

// SetName sets the value of Name.
func (s *Pipeline) SetName(val string) {
	s.Name = val
}

// SetFlow sets the value of Flow.
func (s *Pipeline) SetFlow(val PipelineFlow) {
	s.Flow = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Pipeline) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Pipeline) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

type PipelineCreateReq struct {
	// Name of the pipeline.
	Name string `json:"name"`
	// Flow JSON to draw.
	Flow PipelineCreateReqFlow `json:"flow"`
}

// GetName returns the value of Name.
func (s *PipelineCreateReq) GetName() string {
	return s.Name
}

// GetFlow returns the value of Flow.
func (s *PipelineCreateReq) GetFlow() PipelineCreateReqFlow {
	return s.Flow
}

// SetName sets the value of Name.
func (s *PipelineCreateReq) SetName(val string) {
	s.Name = val
}

// SetFlow sets the value of Flow.
func (s *PipelineCreateReq) SetFlow(val PipelineCreateReqFlow) {
	s.Flow = val
}

// Flow JSON to draw.
type PipelineCreateReqFlow map[string]jx.Raw

func (s *PipelineCreateReqFlow) init() PipelineCreateReqFlow {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// PipelineDeleteOK is response for PipelineDelete operation.
type PipelineDeleteOK struct{}

// Ref: #
type PipelineEntry struct {
	UUID         string              `json:"uuid"`
	PipelineUUID string              `json:"pipeline_uuid"`
	ParentUUID   OptString           `json:"parent_uuid"`
	Type         string              `json:"type"`
	Params       PipelineEntryParams `json:"params"`
	CreatedAt    OptDateTime         `json:"created_at"`
	UpdatedAt    OptDateTime         `json:"updated_at"`
}

// GetUUID returns the value of UUID.
func (s *PipelineEntry) GetUUID() string {
	return s.UUID
}

// GetPipelineUUID returns the value of PipelineUUID.
func (s *PipelineEntry) GetPipelineUUID() string {
	return s.PipelineUUID
}

// GetParentUUID returns the value of ParentUUID.
func (s *PipelineEntry) GetParentUUID() OptString {
	return s.ParentUUID
}

// GetType returns the value of Type.
func (s *PipelineEntry) GetType() string {
	return s.Type
}

// GetParams returns the value of Params.
func (s *PipelineEntry) GetParams() PipelineEntryParams {
	return s.Params
}

// GetCreatedAt returns the value of CreatedAt.
func (s *PipelineEntry) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *PipelineEntry) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// SetUUID sets the value of UUID.
func (s *PipelineEntry) SetUUID(val string) {
	s.UUID = val
}

// SetPipelineUUID sets the value of PipelineUUID.
func (s *PipelineEntry) SetPipelineUUID(val string) {
	s.PipelineUUID = val
}

// SetParentUUID sets the value of ParentUUID.
func (s *PipelineEntry) SetParentUUID(val OptString) {
	s.ParentUUID = val
}

// SetType sets the value of Type.
func (s *PipelineEntry) SetType(val string) {
	s.Type = val
}

// SetParams sets the value of Params.
func (s *PipelineEntry) SetParams(val PipelineEntryParams) {
	s.Params = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *PipelineEntry) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *PipelineEntry) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

type PipelineEntryCreateReq struct {
	// UUID of the pipeline entry.
	UUID string `json:"uuid"`
	// Pipeline UUID.
	PipelineUUID string `json:"pipeline_uuid"`
	// Parent pipeline entry UUID.
	ParentUUID OptString `json:"parent_uuid"`
	// Type of pipeline entry.
	Type string `json:"type"`
	// Params of the Entry.
	Params PipelineEntryCreateReqParams `json:"params"`
}

// GetUUID returns the value of UUID.
func (s *PipelineEntryCreateReq) GetUUID() string {
	return s.UUID
}

// GetPipelineUUID returns the value of PipelineUUID.
func (s *PipelineEntryCreateReq) GetPipelineUUID() string {
	return s.PipelineUUID
}

// GetParentUUID returns the value of ParentUUID.
func (s *PipelineEntryCreateReq) GetParentUUID() OptString {
	return s.ParentUUID
}

// GetType returns the value of Type.
func (s *PipelineEntryCreateReq) GetType() string {
	return s.Type
}

// GetParams returns the value of Params.
func (s *PipelineEntryCreateReq) GetParams() PipelineEntryCreateReqParams {
	return s.Params
}

// SetUUID sets the value of UUID.
func (s *PipelineEntryCreateReq) SetUUID(val string) {
	s.UUID = val
}

// SetPipelineUUID sets the value of PipelineUUID.
func (s *PipelineEntryCreateReq) SetPipelineUUID(val string) {
	s.PipelineUUID = val
}

// SetParentUUID sets the value of ParentUUID.
func (s *PipelineEntryCreateReq) SetParentUUID(val OptString) {
	s.ParentUUID = val
}

// SetType sets the value of Type.
func (s *PipelineEntryCreateReq) SetType(val string) {
	s.Type = val
}

// SetParams sets the value of Params.
func (s *PipelineEntryCreateReq) SetParams(val PipelineEntryCreateReqParams) {
	s.Params = val
}

// Params of the Entry.
type PipelineEntryCreateReqParams map[string]jx.Raw

func (s *PipelineEntryCreateReqParams) init() PipelineEntryCreateReqParams {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// PipelineEntryDeleteOK is response for PipelineEntryDelete operation.
type PipelineEntryDeleteOK struct{}

type PipelineEntryParams map[string]jx.Raw

func (s *PipelineEntryParams) init() PipelineEntryParams {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Ref: #
type PipelineEntryType struct {
	UUID     string `json:"uuid"`
	Category string `json:"category"`
	FlowType string `json:"flow_type"`
	Name     string `json:"name"`
}

// GetUUID returns the value of UUID.
func (s *PipelineEntryType) GetUUID() string {
	return s.UUID
}

// GetCategory returns the value of Category.
func (s *PipelineEntryType) GetCategory() string {
	return s.Category
}

// GetFlowType returns the value of FlowType.
func (s *PipelineEntryType) GetFlowType() string {
	return s.FlowType
}

// GetName returns the value of Name.
func (s *PipelineEntryType) GetName() string {
	return s.Name
}

// SetUUID sets the value of UUID.
func (s *PipelineEntryType) SetUUID(val string) {
	s.UUID = val
}

// SetCategory sets the value of Category.
func (s *PipelineEntryType) SetCategory(val string) {
	s.Category = val
}

// SetFlowType sets the value of FlowType.
func (s *PipelineEntryType) SetFlowType(val string) {
	s.FlowType = val
}

// SetName sets the value of Name.
func (s *PipelineEntryType) SetName(val string) {
	s.Name = val
}

type PipelineEntryTypeListOK struct {
	// List of Pipeline Type Entries.
	Entries []PipelineEntryType `json:"entries"`
}

// GetEntries returns the value of Entries.
func (s *PipelineEntryTypeListOK) GetEntries() []PipelineEntryType {
	return s.Entries
}

// SetEntries sets the value of Entries.
func (s *PipelineEntryTypeListOK) SetEntries(val []PipelineEntryType) {
	s.Entries = val
}

type PipelineEntryUpdateReq struct {
	// Params of the Entry.
	Params PipelineEntryUpdateReqParams `json:"params"`
}

// GetParams returns the value of Params.
func (s *PipelineEntryUpdateReq) GetParams() PipelineEntryUpdateReqParams {
	return s.Params
}

// SetParams sets the value of Params.
func (s *PipelineEntryUpdateReq) SetParams(val PipelineEntryUpdateReqParams) {
	s.Params = val
}

// Params of the Entry.
type PipelineEntryUpdateReqParams map[string]jx.Raw

func (s *PipelineEntryUpdateReqParams) init() PipelineEntryUpdateReqParams {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type PipelineFlow map[string]jx.Raw

func (s *PipelineFlow) init() PipelineFlow {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type PipelineListOK struct {
	// List of Pipelines.
	Pipelines []Pipeline `json:"pipelines"`
}

// GetPipelines returns the value of Pipelines.
func (s *PipelineListOK) GetPipelines() []Pipeline {
	return s.Pipelines
}

// SetPipelines sets the value of Pipelines.
func (s *PipelineListOK) SetPipelines(val []Pipeline) {
	s.Pipelines = val
}

type PipelineUpdateReq struct {
	// Name of the client.
	Name string `json:"name"`
	// Flow JSON to draw.
	Flow PipelineUpdateReqFlow `json:"flow"`
}

// GetName returns the value of Name.
func (s *PipelineUpdateReq) GetName() string {
	return s.Name
}

// GetFlow returns the value of Flow.
func (s *PipelineUpdateReq) GetFlow() PipelineUpdateReqFlow {
	return s.Flow
}

// SetName sets the value of Name.
func (s *PipelineUpdateReq) SetName(val string) {
	s.Name = val
}

// SetFlow sets the value of Flow.
func (s *PipelineUpdateReq) SetFlow(val PipelineUpdateReqFlow) {
	s.Flow = val
}

// Flow JSON to draw.
type PipelineUpdateReqFlow map[string]jx.Raw

func (s *PipelineUpdateReqFlow) init() PipelineUpdateReqFlow {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type SessionCookieAuth struct {
	APIKey string
}

// GetAPIKey returns the value of APIKey.
func (s *SessionCookieAuth) GetAPIKey() string {
	return s.APIKey
}

// SetAPIKey sets the value of APIKey.
func (s *SessionCookieAuth) SetAPIKey(val string) {
	s.APIKey = val
}

// Data storage settings object.
// Ref: #
type Storage struct {
	// Unique identifier for the storage object.
	UUID string `json:"uuid"`
	// Unique identifier for the user associated with the storage object @reactima TODO rethink this.
	UserUUID OptString `json:"user_uuid"`
	// Name of the storage object.
	Name OptString `json:"name"`
	// Type of the storage object.
	Type string `json:"type"`
	// Indicates whether the storage object is enabled.
	IsEnabled bool `json:"is_enabled"`
	// The date and time when the storage object was last updated.
	UpdatedAt time.Time `json:"updated_at"`
	// The date and time when the storage object was created.
	CreatedAt time.Time `json:"created_at"`
}

// GetUUID returns the value of UUID.
func (s *Storage) GetUUID() string {
	return s.UUID
}

// GetUserUUID returns the value of UserUUID.
func (s *Storage) GetUserUUID() OptString {
	return s.UserUUID
}

// GetName returns the value of Name.
func (s *Storage) GetName() OptString {
	return s.Name
}

// GetType returns the value of Type.
func (s *Storage) GetType() string {
	return s.Type
}

// GetIsEnabled returns the value of IsEnabled.
func (s *Storage) GetIsEnabled() bool {
	return s.IsEnabled
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Storage) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Storage) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// SetUUID sets the value of UUID.
func (s *Storage) SetUUID(val string) {
	s.UUID = val
}

// SetUserUUID sets the value of UserUUID.
func (s *Storage) SetUserUUID(val OptString) {
	s.UserUUID = val
}

// SetName sets the value of Name.
func (s *Storage) SetName(val OptString) {
	s.Name = val
}

// SetType sets the value of Type.
func (s *Storage) SetType(val string) {
	s.Type = val
}

// SetIsEnabled sets the value of IsEnabled.
func (s *Storage) SetIsEnabled(val bool) {
	s.IsEnabled = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Storage) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Storage) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// Ref: #
type StorageHostfiles struct {
	UUID OptString `json:"uuid"`
	// The descriptive name for this storage entry.
	Name string `json:"name"`
	// Indicates whether this storage is enabled.
	IsEnabled OptBool `json:"is_enabled"`
	// The absolute or relative path on the server's file system where files will be stored.
	Path string `json:"path"`
}

// GetUUID returns the value of UUID.
func (s *StorageHostfiles) GetUUID() OptString {
	return s.UUID
}

// GetName returns the value of Name.
func (s *StorageHostfiles) GetName() string {
	return s.Name
}

// GetIsEnabled returns the value of IsEnabled.
func (s *StorageHostfiles) GetIsEnabled() OptBool {
	return s.IsEnabled
}

// GetPath returns the value of Path.
func (s *StorageHostfiles) GetPath() string {
	return s.Path
}

// SetUUID sets the value of UUID.
func (s *StorageHostfiles) SetUUID(val OptString) {
	s.UUID = val
}

// SetName sets the value of Name.
func (s *StorageHostfiles) SetName(val string) {
	s.Name = val
}

// SetIsEnabled sets the value of IsEnabled.
func (s *StorageHostfiles) SetIsEnabled(val OptBool) {
	s.IsEnabled = val
}

// SetPath sets the value of Path.
func (s *StorageHostfiles) SetPath(val string) {
	s.Path = val
}

// StorageHostfilesDeleteOK is response for StorageHostfilesDelete operation.
type StorageHostfilesDeleteOK struct{}

// Ref: #
type StoragePostgres struct {
	UUID OptString `json:"uuid"`
	// The descriptive name for this storage entry.
	Name string `json:"name"`
	// Indicates whether this storage is enabled.
	IsEnabled OptBool `json:"is_enabled"`
	// The username used to connect to the PostgreSQL database.
	User string `json:"user"`
	// The password used to connect to the PostgreSQL database.
	Password string `json:"password"`
	// The hostname or IP address of the PostgreSQL database server.
	Host string `json:"host"`
	// The port number on which the PostgreSQL database server is listening.
	Port string `json:"port"`
	// Additional connection options in URL query format.
	Options OptString `json:"options"`
}

// GetUUID returns the value of UUID.
func (s *StoragePostgres) GetUUID() OptString {
	return s.UUID
}

// GetName returns the value of Name.
func (s *StoragePostgres) GetName() string {
	return s.Name
}

// GetIsEnabled returns the value of IsEnabled.
func (s *StoragePostgres) GetIsEnabled() OptBool {
	return s.IsEnabled
}

// GetUser returns the value of User.
func (s *StoragePostgres) GetUser() string {
	return s.User
}

// GetPassword returns the value of Password.
func (s *StoragePostgres) GetPassword() string {
	return s.Password
}

// GetHost returns the value of Host.
func (s *StoragePostgres) GetHost() string {
	return s.Host
}

// GetPort returns the value of Port.
func (s *StoragePostgres) GetPort() string {
	return s.Port
}

// GetOptions returns the value of Options.
func (s *StoragePostgres) GetOptions() OptString {
	return s.Options
}

// SetUUID sets the value of UUID.
func (s *StoragePostgres) SetUUID(val OptString) {
	s.UUID = val
}

// SetName sets the value of Name.
func (s *StoragePostgres) SetName(val string) {
	s.Name = val
}

// SetIsEnabled sets the value of IsEnabled.
func (s *StoragePostgres) SetIsEnabled(val OptBool) {
	s.IsEnabled = val
}

// SetUser sets the value of User.
func (s *StoragePostgres) SetUser(val string) {
	s.User = val
}

// SetPassword sets the value of Password.
func (s *StoragePostgres) SetPassword(val string) {
	s.Password = val
}

// SetHost sets the value of Host.
func (s *StoragePostgres) SetHost(val string) {
	s.Host = val
}

// SetPort sets the value of Port.
func (s *StoragePostgres) SetPort(val string) {
	s.Port = val
}

// SetOptions sets the value of Options.
func (s *StoragePostgres) SetOptions(val OptString) {
	s.Options = val
}

// StoragePostgresDeleteOK is response for StoragePostgresDelete operation.
type StoragePostgresDeleteOK struct{}

// Ref: #
type StorageS3 struct {
	UUID OptString `json:"uuid"`
	// The descriptive name for this storage entry.
	Name string `json:"name"`
	// Indicates whether this storage is enabled.
	IsEnabled OptBool `json:"is_enabled"`
	// The S3-compatible provider (e.g., AWS, Azure, or a custom endpoint).
	Provider string `json:"provider"`
	// The region where the bucket is located.
	Region string `json:"region"`
	// The bucket name.
	Bucket string `json:"bucket"`
	// The access key ID.
	AccessKeyID string `json:"access_key_id"`
	// The secret access key.
	SecretAccessKey string `json:"secret_access_key"`
}

// GetUUID returns the value of UUID.
func (s *StorageS3) GetUUID() OptString {
	return s.UUID
}

// GetName returns the value of Name.
func (s *StorageS3) GetName() string {
	return s.Name
}

// GetIsEnabled returns the value of IsEnabled.
func (s *StorageS3) GetIsEnabled() OptBool {
	return s.IsEnabled
}

// GetProvider returns the value of Provider.
func (s *StorageS3) GetProvider() string {
	return s.Provider
}

// GetRegion returns the value of Region.
func (s *StorageS3) GetRegion() string {
	return s.Region
}

// GetBucket returns the value of Bucket.
func (s *StorageS3) GetBucket() string {
	return s.Bucket
}

// GetAccessKeyID returns the value of AccessKeyID.
func (s *StorageS3) GetAccessKeyID() string {
	return s.AccessKeyID
}

// GetSecretAccessKey returns the value of SecretAccessKey.
func (s *StorageS3) GetSecretAccessKey() string {
	return s.SecretAccessKey
}

// SetUUID sets the value of UUID.
func (s *StorageS3) SetUUID(val OptString) {
	s.UUID = val
}

// SetName sets the value of Name.
func (s *StorageS3) SetName(val string) {
	s.Name = val
}

// SetIsEnabled sets the value of IsEnabled.
func (s *StorageS3) SetIsEnabled(val OptBool) {
	s.IsEnabled = val
}

// SetProvider sets the value of Provider.
func (s *StorageS3) SetProvider(val string) {
	s.Provider = val
}

// SetRegion sets the value of Region.
func (s *StorageS3) SetRegion(val string) {
	s.Region = val
}

// SetBucket sets the value of Bucket.
func (s *StorageS3) SetBucket(val string) {
	s.Bucket = val
}

// SetAccessKeyID sets the value of AccessKeyID.
func (s *StorageS3) SetAccessKeyID(val string) {
	s.AccessKeyID = val
}

// SetSecretAccessKey sets the value of SecretAccessKey.
func (s *StorageS3) SetSecretAccessKey(val string) {
	s.SecretAccessKey = val
}

// StorageS3DeleteOK is response for StorageS3Delete operation.
type StorageS3DeleteOK struct{}

// Ref: #
type SyncPolicy struct {
	// Unique identifier for the sync policy.
	UUID string `json:"uuid"`
	// Unique identifier for the user associated with the sync policy.
	UserID string `json:"user_id"`
	// The service this sync policy applies to (e.g., gmail, telegram, whatsapp, linkedin).
	Service string `json:"service"`
	// List of blocked emails or contact identifiers.
	Blocklist []string `json:"blocklist"`
	// List of contacts to exclude from syncing.
	ExcludeList []string `json:"exclude_list"`
	// Indicates whether to sync all messages from the service (true means no filtering).
	SyncAll bool `json:"sync_all"`
	// Additional key-value settings for the sync policy.
	Settings OptSyncPolicySettings `json:"settings"`
	// Timestamp when the policy was created.
	CreatedAt time.Time `json:"created_at"`
	// Timestamp when the policy was last updated.
	UpdatedAt time.Time `json:"updated_at"`
}

// GetUUID returns the value of UUID.
func (s *SyncPolicy) GetUUID() string {
	return s.UUID
}

// GetUserID returns the value of UserID.
func (s *SyncPolicy) GetUserID() string {
	return s.UserID
}

// GetService returns the value of Service.
func (s *SyncPolicy) GetService() string {
	return s.Service
}

// GetBlocklist returns the value of Blocklist.
func (s *SyncPolicy) GetBlocklist() []string {
	return s.Blocklist
}

// GetExcludeList returns the value of ExcludeList.
func (s *SyncPolicy) GetExcludeList() []string {
	return s.ExcludeList
}

// GetSyncAll returns the value of SyncAll.
func (s *SyncPolicy) GetSyncAll() bool {
	return s.SyncAll
}

// GetSettings returns the value of Settings.
func (s *SyncPolicy) GetSettings() OptSyncPolicySettings {
	return s.Settings
}

// GetCreatedAt returns the value of CreatedAt.
func (s *SyncPolicy) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *SyncPolicy) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// SetUUID sets the value of UUID.
func (s *SyncPolicy) SetUUID(val string) {
	s.UUID = val
}

// SetUserID sets the value of UserID.
func (s *SyncPolicy) SetUserID(val string) {
	s.UserID = val
}

// SetService sets the value of Service.
func (s *SyncPolicy) SetService(val string) {
	s.Service = val
}

// SetBlocklist sets the value of Blocklist.
func (s *SyncPolicy) SetBlocklist(val []string) {
	s.Blocklist = val
}

// SetExcludeList sets the value of ExcludeList.
func (s *SyncPolicy) SetExcludeList(val []string) {
	s.ExcludeList = val
}

// SetSyncAll sets the value of SyncAll.
func (s *SyncPolicy) SetSyncAll(val bool) {
	s.SyncAll = val
}

// SetSettings sets the value of Settings.
func (s *SyncPolicy) SetSettings(val OptSyncPolicySettings) {
	s.Settings = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *SyncPolicy) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *SyncPolicy) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// Additional key-value settings for the sync policy.
type SyncPolicySettings map[string]jx.Raw

func (s *SyncPolicySettings) init() SyncPolicySettings {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// SyncpolicyDeleteOK is response for SyncpolicyDelete operation.
type SyncpolicyDeleteOK struct{}

type SyncpolicyListOK struct {
	Policies []SyncPolicy `json:"policies"`
}

// GetPolicies returns the value of Policies.
func (s *SyncpolicyListOK) GetPolicies() []SyncPolicy {
	return s.Policies
}

// SetPolicies sets the value of Policies.
func (s *SyncpolicyListOK) SetPolicies(val []SyncPolicy) {
	s.Policies = val
}

// Telegram API session and user representation.
// Ref: #
type Telegram struct {
	// Session ID.
	ID int `json:"id"`
	// Session phone number.
	Phone string `json:"phone"`
	// Optional description.
	Description OptNilString `json:"description"`
	// Last update time.
	UpdatedAt time.Time `json:"updated_at"`
	// Session creation time.
	CreatedAt time.Time `json:"created_at"`
	// User details.
	User TelegramUser `json:"user"`
}

// GetID returns the value of ID.
func (s *Telegram) GetID() int {
	return s.ID
}

// GetPhone returns the value of Phone.
func (s *Telegram) GetPhone() string {
	return s.Phone
}

// GetDescription returns the value of Description.
func (s *Telegram) GetDescription() OptNilString {
	return s.Description
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Telegram) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Telegram) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUser returns the value of User.
func (s *Telegram) GetUser() TelegramUser {
	return s.User
}

// SetID sets the value of ID.
func (s *Telegram) SetID(val int) {
	s.ID = val
}

// SetPhone sets the value of Phone.
func (s *Telegram) SetPhone(val string) {
	s.Phone = val
}

// SetDescription sets the value of Description.
func (s *Telegram) SetDescription(val OptNilString) {
	s.Description = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Telegram) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Telegram) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUser sets the value of User.
func (s *Telegram) SetUser(val TelegramUser) {
	s.User = val
}

type TelegramParticipants []TelegramParticipantsItem

type TelegramParticipantsItem struct {
	// Unique identifier of the participant (e.g. user ID).
	ParticipantId OptString `json:"participantId"`
	// Arbitrary key-value metadata about the participant.
	Meta OptTelegramParticipantsItemMeta `json:"meta"`
}

// GetParticipantId returns the value of ParticipantId.
func (s *TelegramParticipantsItem) GetParticipantId() OptString {
	return s.ParticipantId
}

// GetMeta returns the value of Meta.
func (s *TelegramParticipantsItem) GetMeta() OptTelegramParticipantsItemMeta {
	return s.Meta
}

// SetParticipantId sets the value of ParticipantId.
func (s *TelegramParticipantsItem) SetParticipantId(val OptString) {
	s.ParticipantId = val
}

// SetMeta sets the value of Meta.
func (s *TelegramParticipantsItem) SetMeta(val OptTelegramParticipantsItemMeta) {
	s.Meta = val
}

// Arbitrary key-value metadata about the participant.
type TelegramParticipantsItemMeta map[string]jx.Raw

func (s *TelegramParticipantsItemMeta) init() TelegramParticipantsItemMeta {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type TelegramSessionHistory []TelegramSessionHistoryItem

type TelegramSessionHistoryItem struct {
	// Unique session identifier.
	SessionId OptString `json:"sessionId"`
	// Timestamp when the session started.
	StartedAt OptDateTime `json:"started_at"`
	// Timestamp when the session ended.
	EndedAt OptDateTime `json:"ended_at"`
	// Arbitrary key-value metadata for the session.
	Meta OptTelegramSessionHistoryItemMeta `json:"meta"`
}

// GetSessionId returns the value of SessionId.
func (s *TelegramSessionHistoryItem) GetSessionId() OptString {
	return s.SessionId
}

// GetStartedAt returns the value of StartedAt.
func (s *TelegramSessionHistoryItem) GetStartedAt() OptDateTime {
	return s.StartedAt
}

// GetEndedAt returns the value of EndedAt.
func (s *TelegramSessionHistoryItem) GetEndedAt() OptDateTime {
	return s.EndedAt
}

// GetMeta returns the value of Meta.
func (s *TelegramSessionHistoryItem) GetMeta() OptTelegramSessionHistoryItemMeta {
	return s.Meta
}

// SetSessionId sets the value of SessionId.
func (s *TelegramSessionHistoryItem) SetSessionId(val OptString) {
	s.SessionId = val
}

// SetStartedAt sets the value of StartedAt.
func (s *TelegramSessionHistoryItem) SetStartedAt(val OptDateTime) {
	s.StartedAt = val
}

// SetEndedAt sets the value of EndedAt.
func (s *TelegramSessionHistoryItem) SetEndedAt(val OptDateTime) {
	s.EndedAt = val
}

// SetMeta sets the value of Meta.
func (s *TelegramSessionHistoryItem) SetMeta(val OptTelegramSessionHistoryItemMeta) {
	s.Meta = val
}

// Arbitrary key-value metadata for the session.
type TelegramSessionHistoryItemMeta map[string]jx.Raw

func (s *TelegramSessionHistoryItemMeta) init() TelegramSessionHistoryItemMeta {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// User details.
type TelegramUser struct {
	// User ID in Telegram.
	ID OptInt `json:"id"`
	// Username in Telegram.
	Username OptString `json:"username"`
	// First name.
	FirstName OptString `json:"first_name"`
	// Last name.
	LastName OptString `json:"last_name"`
	// User's phone number.
	Phone OptString `json:"phone"`
}

// GetID returns the value of ID.
func (s *TelegramUser) GetID() OptInt {
	return s.ID
}

// GetUsername returns the value of Username.
func (s *TelegramUser) GetUsername() OptString {
	return s.Username
}

// GetFirstName returns the value of FirstName.
func (s *TelegramUser) GetFirstName() OptString {
	return s.FirstName
}

// GetLastName returns the value of LastName.
func (s *TelegramUser) GetLastName() OptString {
	return s.LastName
}

// GetPhone returns the value of Phone.
func (s *TelegramUser) GetPhone() OptString {
	return s.Phone
}

// SetID sets the value of ID.
func (s *TelegramUser) SetID(val OptInt) {
	s.ID = val
}

// SetUsername sets the value of Username.
func (s *TelegramUser) SetUsername(val OptString) {
	s.Username = val
}

// SetFirstName sets the value of FirstName.
func (s *TelegramUser) SetFirstName(val OptString) {
	s.FirstName = val
}

// SetLastName sets the value of LastName.
func (s *TelegramUser) SetLastName(val OptString) {
	s.LastName = val
}

// SetPhone sets the value of Phone.
func (s *TelegramUser) SetPhone(val OptString) {
	s.Phone = val
}

type TgSessionCreateReq struct {
	// Phone number in international format.
	Phone string `json:"phone"`
}

// GetPhone returns the value of Phone.
func (s *TgSessionCreateReq) GetPhone() string {
	return s.Phone
}

// SetPhone sets the value of Phone.
func (s *TgSessionCreateReq) SetPhone(val string) {
	s.Phone = val
}

type TgSessionListOK struct {
	// Total number of sessions.
	Total    OptInt     `json:"total"`
	Sessions []Telegram `json:"sessions"`
}

// GetTotal returns the value of Total.
func (s *TgSessionListOK) GetTotal() OptInt {
	return s.Total
}

// GetSessions returns the value of Sessions.
func (s *TgSessionListOK) GetSessions() []Telegram {
	return s.Sessions
}

// SetTotal sets the value of Total.
func (s *TgSessionListOK) SetTotal(val OptInt) {
	s.Total = val
}

// SetSessions sets the value of Sessions.
func (s *TgSessionListOK) SetSessions(val []Telegram) {
	s.Sessions = val
}

type TgSessionVerifyReq struct {
	// Hash of the phone code.
	PhoneCodeHash OptString `json:"phone_code_hash"`
	// Verification code.
	Code OptString `json:"code"`
	// Optional password for 2FA.
	Password OptString `json:"password"`
}

// GetPhoneCodeHash returns the value of PhoneCodeHash.
func (s *TgSessionVerifyReq) GetPhoneCodeHash() OptString {
	return s.PhoneCodeHash
}

// GetCode returns the value of Code.
func (s *TgSessionVerifyReq) GetCode() OptString {
	return s.Code
}

// GetPassword returns the value of Password.
func (s *TgSessionVerifyReq) GetPassword() OptString {
	return s.Password
}

// SetPhoneCodeHash sets the value of PhoneCodeHash.
func (s *TgSessionVerifyReq) SetPhoneCodeHash(val OptString) {
	s.PhoneCodeHash = val
}

// SetCode sets the value of Code.
func (s *TgSessionVerifyReq) SetCode(val OptString) {
	s.Code = val
}

// SetPassword sets the value of Password.
func (s *TgSessionVerifyReq) SetPassword(val OptString) {
	s.Password = val
}

// File upload request metadata.
// Ref: #/UploadFileRequest
type UploadFileRequest struct {
	Name     OptString `json:"name"`
	MimeType OptString `json:"mime_type"`
	// The storage backend where the file should be uploaded.
	StorageType OptUploadFileRequestStorageType `json:"storage_type"`
}

// GetName returns the value of Name.
func (s *UploadFileRequest) GetName() OptString {
	return s.Name
}

// GetMimeType returns the value of MimeType.
func (s *UploadFileRequest) GetMimeType() OptString {
	return s.MimeType
}

// GetStorageType returns the value of StorageType.
func (s *UploadFileRequest) GetStorageType() OptUploadFileRequestStorageType {
	return s.StorageType
}

// SetName sets the value of Name.
func (s *UploadFileRequest) SetName(val OptString) {
	s.Name = val
}

// SetMimeType sets the value of MimeType.
func (s *UploadFileRequest) SetMimeType(val OptString) {
	s.MimeType = val
}

// SetStorageType sets the value of StorageType.
func (s *UploadFileRequest) SetStorageType(val OptUploadFileRequestStorageType) {
	s.StorageType = val
}

// The storage backend where the file should be uploaded.
type UploadFileRequestStorageType string

const (
	UploadFileRequestStorageTypeS3        UploadFileRequestStorageType = "s3"
	UploadFileRequestStorageTypePostgres  UploadFileRequestStorageType = "postgres"
	UploadFileRequestStorageTypeHostfiles UploadFileRequestStorageType = "hostfiles"
)

// AllValues returns all UploadFileRequestStorageType values.
func (UploadFileRequestStorageType) AllValues() []UploadFileRequestStorageType {
	return []UploadFileRequestStorageType{
		UploadFileRequestStorageTypeS3,
		UploadFileRequestStorageTypePostgres,
		UploadFileRequestStorageTypeHostfiles,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UploadFileRequestStorageType) MarshalText() ([]byte, error) {
	switch s {
	case UploadFileRequestStorageTypeS3:
		return []byte(s), nil
	case UploadFileRequestStorageTypePostgres:
		return []byte(s), nil
	case UploadFileRequestStorageTypeHostfiles:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UploadFileRequestStorageType) UnmarshalText(data []byte) error {
	switch UploadFileRequestStorageType(data) {
	case UploadFileRequestStorageTypeS3:
		*s = UploadFileRequestStorageTypeS3
		return nil
	case UploadFileRequestStorageTypePostgres:
		*s = UploadFileRequestStorageTypePostgres
		return nil
	case UploadFileRequestStorageTypeHostfiles:
		*s = UploadFileRequestStorageTypeHostfiles
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Response after uploading a file.
// Ref: #/UploadFileResponse
type UploadFileResponse struct {
	File OptFileObject `json:"file"`
}

// GetFile returns the value of File.
func (s *UploadFileResponse) GetFile() OptFileObject {
	return s.File
}

// SetFile sets the value of File.
func (s *UploadFileResponse) SetFile(val OptFileObject) {
	s.File = val
}

// Request to generate a pre-signed URL for upload.
// Ref: #/UploadPresignedUrlRequest
type UploadPresignedUrlRequest struct {
	Name     OptString `json:"name"`
	MimeType OptString `json:"mime_type"`
	// The target storage backend.
	StorageType OptUploadPresignedUrlRequestStorageType `json:"storage_type"`
}

// GetName returns the value of Name.
func (s *UploadPresignedUrlRequest) GetName() OptString {
	return s.Name
}

// GetMimeType returns the value of MimeType.
func (s *UploadPresignedUrlRequest) GetMimeType() OptString {
	return s.MimeType
}

// GetStorageType returns the value of StorageType.
func (s *UploadPresignedUrlRequest) GetStorageType() OptUploadPresignedUrlRequestStorageType {
	return s.StorageType
}

// SetName sets the value of Name.
func (s *UploadPresignedUrlRequest) SetName(val OptString) {
	s.Name = val
}

// SetMimeType sets the value of MimeType.
func (s *UploadPresignedUrlRequest) SetMimeType(val OptString) {
	s.MimeType = val
}

// SetStorageType sets the value of StorageType.
func (s *UploadPresignedUrlRequest) SetStorageType(val OptUploadPresignedUrlRequestStorageType) {
	s.StorageType = val
}

// The target storage backend.
type UploadPresignedUrlRequestStorageType string

const (
	UploadPresignedUrlRequestStorageTypeS3        UploadPresignedUrlRequestStorageType = "s3"
	UploadPresignedUrlRequestStorageTypePostgres  UploadPresignedUrlRequestStorageType = "postgres"
	UploadPresignedUrlRequestStorageTypeHostfiles UploadPresignedUrlRequestStorageType = "hostfiles"
)

// AllValues returns all UploadPresignedUrlRequestStorageType values.
func (UploadPresignedUrlRequestStorageType) AllValues() []UploadPresignedUrlRequestStorageType {
	return []UploadPresignedUrlRequestStorageType{
		UploadPresignedUrlRequestStorageTypeS3,
		UploadPresignedUrlRequestStorageTypePostgres,
		UploadPresignedUrlRequestStorageTypeHostfiles,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UploadPresignedUrlRequestStorageType) MarshalText() ([]byte, error) {
	switch s {
	case UploadPresignedUrlRequestStorageTypeS3:
		return []byte(s), nil
	case UploadPresignedUrlRequestStorageTypePostgres:
		return []byte(s), nil
	case UploadPresignedUrlRequestStorageTypeHostfiles:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UploadPresignedUrlRequestStorageType) UnmarshalText(data []byte) error {
	switch UploadPresignedUrlRequestStorageType(data) {
	case UploadPresignedUrlRequestStorageTypeS3:
		*s = UploadPresignedUrlRequestStorageTypeS3
		return nil
	case UploadPresignedUrlRequestStorageTypePostgres:
		*s = UploadPresignedUrlRequestStorageTypePostgres
		return nil
	case UploadPresignedUrlRequestStorageTypeHostfiles:
		*s = UploadPresignedUrlRequestStorageTypeHostfiles
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Response with a pre-signed URL for upload.
// Ref: #/UploadPresignedUrlResponse
type UploadPresignedUrlResponse struct {
	// Pre-signed URL for uploading the file.
	UploadURL OptString     `json:"upload_url"`
	File      OptFileObject `json:"file"`
}

// GetUploadURL returns the value of UploadURL.
func (s *UploadPresignedUrlResponse) GetUploadURL() OptString {
	return s.UploadURL
}

// GetFile returns the value of File.
func (s *UploadPresignedUrlResponse) GetFile() OptFileObject {
	return s.File
}

// SetUploadURL sets the value of UploadURL.
func (s *UploadPresignedUrlResponse) SetUploadURL(val OptString) {
	s.UploadURL = val
}

// SetFile sets the value of File.
func (s *UploadPresignedUrlResponse) SetFile(val OptFileObject) {
	s.File = val
}
