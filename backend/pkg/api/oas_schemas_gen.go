// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"
	"net/url"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/google/uuid"
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

type BearerAuth struct {
	Token string
}

// GetToken returns the value of Token.
func (s *BearerAuth) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *BearerAuth) SetToken(val string) {
	s.Token = val
}

// Ref: #
type Contact struct {
	UUID                    OptString             `json:"uuid"`
	UserUUID                OptString             `json:"user_uuid"`
	InstanceUUID            OptString             `json:"instance_uuid"`
	Status                  OptString             `json:"status"`
	Names                   *ContactNames         `json:"names"`
	NamesSearch             OptString             `json:"names_search"`
	Last                    OptString             `json:"last"`
	First                   OptString             `json:"first"`
	Middle                  OptString             `json:"middle"`
	Birthday                OptDateTime           `json:"birthday"`
	BirthdayType            OptString             `json:"birthday_type"`
	Salary                  OptString             `json:"salary"`
	SalaryData              *ContactSalaryData    `json:"salary_data"`
	LastPositions           *ContactLastPositions `json:"last_positions"`
	LastPositionID          OptInt                `json:"last_position_id"`
	LastPositionCompanyID   OptInt                `json:"last_position_company_id"`
	LastPositionCompanyName OptString             `json:"last_position_company_name"`
	LastPositionTitle       OptString             `json:"last_position_title"`
	LastPositionStartDate   OptDateTime           `json:"last_position_start_date"`
	LastPositionEndDate     OptDateTime           `json:"last_position_end_date"`
	LastPositionEndNow      OptBool               `json:"last_position_end_now"`
	LastPositionDescription OptString             `json:"last_position_description"`
	NoteSearch              OptString             `json:"note_search"`
	NoteKpiID               *ContactNoteKpiID     `json:"note_kpi_id"`
	Phones                  *ContactPhones        `json:"phones"`
	PhoneSearch             OptString             `json:"phone_search"`
	Phone1                  OptString             `json:"phone1"`
	Phone1Type              OptString             `json:"phone1_type"`
	Phone1Country           OptString             `json:"phone1_country"`
	Phone2                  OptString             `json:"phone2"`
	Phone2Type              OptString             `json:"phone2_type"`
	Phone2Country           OptString             `json:"phone2_country"`
	Phone3                  OptString             `json:"phone3"`
	Phone3Type              OptString             `json:"phone3_type"`
	Phone3Country           OptString             `json:"phone3_country"`
	Phone4                  OptString             `json:"phone4"`
	Phone4Type              OptString             `json:"phone4_type"`
	Phone4Country           OptString             `json:"phone4_country"`
	Phone5                  OptString             `json:"phone5"`
	Phone5Type              OptString             `json:"phone5_type"`
	Phone5Country           OptString             `json:"phone5_country"`
	Emails                  *ContactEmails        `json:"emails"`
	EmailSearch             OptString             `json:"email_search"`
	Email1                  OptString             `json:"email1"`
	Email1Type              OptString             `json:"email1_type"`
	Email2                  OptString             `json:"email2"`
	Email2Type              OptString             `json:"email2_type"`
	Email3                  OptString             `json:"email3"`
	Email3Type              OptString             `json:"email3_type"`
	Email4                  OptString             `json:"email4"`
	Email4Type              OptString             `json:"email4_type"`
	Email5                  OptString             `json:"email5"`
	Email5Type              OptString             `json:"email5_type"`
	Messengers              *ContactMessengers    `json:"messengers"`
	MessengersSearch        OptString             `json:"messengers_search"`
	SkypeUUID               OptString             `json:"skype_uuid"`
	Skype                   OptString             `json:"skype"`
	WhatsappUUID            OptString             `json:"whatsapp_uuid"`
	Whatsapp                OptString             `json:"whatsapp"`
	TelegramUUID            OptString             `json:"telegram_uuid"`
	Telegram                OptString             `json:"telegram"`
	WechatUUID              OptString             `json:"wechat_uuid"`
	Wechat                  OptString             `json:"wechat"`
	LineUUID                OptString             `json:"line_uuid"`
	Line                    OptString             `json:"line"`
	Socials                 *ContactSocials       `json:"socials"`
	SocialsSearch           OptString             `json:"socials_search"`
	LinkedinUUID            OptString             `json:"linkedin_uuid"`
	LinkedinURL             OptString             `json:"linkedin_url"`
	FacebookUUID            OptString             `json:"facebook_uuid"`
	FacebookURL             OptString             `json:"facebook_url"`
	TwitterUUID             OptString             `json:"twitter_uuid"`
	TwitterURL              OptString             `json:"twitter_url"`
	GithubUUID              OptString             `json:"github_uuid"`
	GithubURL               OptString             `json:"github_url"`
	VkUUID                  OptString             `json:"vk_uuid"`
	VkURL                   OptString             `json:"vk_url"`
	OdnoUUID                OptString             `json:"odno_uuid"`
	OdnoURL                 OptString             `json:"odno_url"`
	HhruUUID                OptString             `json:"hhru_uuid"`
	HhruURL                 OptString             `json:"hhru_url"`
	HabrUUID                OptString             `json:"habr_uuid"`
	HabrURL                 OptString             `json:"habr_url"`
	MoikrugUUID             OptString             `json:"moikrug_uuid"`
	MoikrugURL              OptString             `json:"moikrug_url"`
	InstagramUUID           OptString             `json:"instagram_uuid"`
	InstagramURL            OptString             `json:"instagram_url"`
	Social1UUID             OptString             `json:"social1_uuid"`
	Social1URL              OptString             `json:"social1_url"`
	Social1Type             OptString             `json:"social1_type"`
	Social2UUID             OptString             `json:"social2_uuid"`
	Social2URL              OptString             `json:"social2_url"`
	Social2Type             OptString             `json:"social2_type"`
	Social3UUID             OptString             `json:"social3_uuid"`
	Social3URL              OptString             `json:"social3_url"`
	Social3Type             OptString             `json:"social3_type"`
	Social4UUID             OptString             `json:"social4_uuid"`
	Social4URL              OptString             `json:"social4_url"`
	Social4Type             OptString             `json:"social4_type"`
	Social5UUID             OptString             `json:"social5_uuid"`
	Social5URL              OptString             `json:"social5_url"`
	Social5Type             OptString             `json:"social5_type"`
	Social6UUID             OptString             `json:"social6_uuid"`
	Social6URL              OptString             `json:"social6_url"`
	Social6Type             OptString             `json:"social6_type"`
	Social7UUID             OptString             `json:"social7_uuid"`
	Social7URL              OptString             `json:"social7_url"`
	Social7Type             OptString             `json:"social7_type"`
	Social8UUID             OptString             `json:"social8_uuid"`
	Social8URL              OptString             `json:"social8_url"`
	Social8Type             OptString             `json:"social8_type"`
	Social9UUID             OptString             `json:"social9_uuid"`
	Social9URL              OptString             `json:"social9_url"`
	Social9Type             OptString             `json:"social9_type"`
	TrackingSource          OptString             `json:"tracking_source"`
	TrackingSlug            OptString             `json:"tracking_slug"`
	CachedImg               OptString             `json:"cached_img"`
	CachedImgData           *ContactCachedImgData `json:"cached_img_data"`
	Crawl                   *ContactCrawl         `json:"crawl"`
	DuplicateUserID         OptString             `json:"duplicate_user_id"`
	DuplicateAlternativeID  OptString             `json:"duplicate_alternative_id"`
	DuplicateReportDate     OptDateTime           `json:"duplicate_report_date"`
	EntryDate               OptDateTime           `json:"entry_date"`
	EditDate                OptDateTime           `json:"edit_date"`
	LastKpiEntryDate        OptDateTime           `json:"last_kpi_entry_date"`
}

// GetUUID returns the value of UUID.
func (s *Contact) GetUUID() OptString {
	return s.UUID
}

// GetUserUUID returns the value of UserUUID.
func (s *Contact) GetUserUUID() OptString {
	return s.UserUUID
}

// GetInstanceUUID returns the value of InstanceUUID.
func (s *Contact) GetInstanceUUID() OptString {
	return s.InstanceUUID
}

// GetStatus returns the value of Status.
func (s *Contact) GetStatus() OptString {
	return s.Status
}

// GetNames returns the value of Names.
func (s *Contact) GetNames() *ContactNames {
	return s.Names
}

// GetNamesSearch returns the value of NamesSearch.
func (s *Contact) GetNamesSearch() OptString {
	return s.NamesSearch
}

// GetLast returns the value of Last.
func (s *Contact) GetLast() OptString {
	return s.Last
}

// GetFirst returns the value of First.
func (s *Contact) GetFirst() OptString {
	return s.First
}

// GetMiddle returns the value of Middle.
func (s *Contact) GetMiddle() OptString {
	return s.Middle
}

// GetBirthday returns the value of Birthday.
func (s *Contact) GetBirthday() OptDateTime {
	return s.Birthday
}

// GetBirthdayType returns the value of BirthdayType.
func (s *Contact) GetBirthdayType() OptString {
	return s.BirthdayType
}

// GetSalary returns the value of Salary.
func (s *Contact) GetSalary() OptString {
	return s.Salary
}

// GetSalaryData returns the value of SalaryData.
func (s *Contact) GetSalaryData() *ContactSalaryData {
	return s.SalaryData
}

// GetLastPositions returns the value of LastPositions.
func (s *Contact) GetLastPositions() *ContactLastPositions {
	return s.LastPositions
}

// GetLastPositionID returns the value of LastPositionID.
func (s *Contact) GetLastPositionID() OptInt {
	return s.LastPositionID
}

// GetLastPositionCompanyID returns the value of LastPositionCompanyID.
func (s *Contact) GetLastPositionCompanyID() OptInt {
	return s.LastPositionCompanyID
}

// GetLastPositionCompanyName returns the value of LastPositionCompanyName.
func (s *Contact) GetLastPositionCompanyName() OptString {
	return s.LastPositionCompanyName
}

// GetLastPositionTitle returns the value of LastPositionTitle.
func (s *Contact) GetLastPositionTitle() OptString {
	return s.LastPositionTitle
}

// GetLastPositionStartDate returns the value of LastPositionStartDate.
func (s *Contact) GetLastPositionStartDate() OptDateTime {
	return s.LastPositionStartDate
}

// GetLastPositionEndDate returns the value of LastPositionEndDate.
func (s *Contact) GetLastPositionEndDate() OptDateTime {
	return s.LastPositionEndDate
}

// GetLastPositionEndNow returns the value of LastPositionEndNow.
func (s *Contact) GetLastPositionEndNow() OptBool {
	return s.LastPositionEndNow
}

// GetLastPositionDescription returns the value of LastPositionDescription.
func (s *Contact) GetLastPositionDescription() OptString {
	return s.LastPositionDescription
}

// GetNoteSearch returns the value of NoteSearch.
func (s *Contact) GetNoteSearch() OptString {
	return s.NoteSearch
}

// GetNoteKpiID returns the value of NoteKpiID.
func (s *Contact) GetNoteKpiID() *ContactNoteKpiID {
	return s.NoteKpiID
}

// GetPhones returns the value of Phones.
func (s *Contact) GetPhones() *ContactPhones {
	return s.Phones
}

// GetPhoneSearch returns the value of PhoneSearch.
func (s *Contact) GetPhoneSearch() OptString {
	return s.PhoneSearch
}

// GetPhone1 returns the value of Phone1.
func (s *Contact) GetPhone1() OptString {
	return s.Phone1
}

// GetPhone1Type returns the value of Phone1Type.
func (s *Contact) GetPhone1Type() OptString {
	return s.Phone1Type
}

// GetPhone1Country returns the value of Phone1Country.
func (s *Contact) GetPhone1Country() OptString {
	return s.Phone1Country
}

// GetPhone2 returns the value of Phone2.
func (s *Contact) GetPhone2() OptString {
	return s.Phone2
}

// GetPhone2Type returns the value of Phone2Type.
func (s *Contact) GetPhone2Type() OptString {
	return s.Phone2Type
}

// GetPhone2Country returns the value of Phone2Country.
func (s *Contact) GetPhone2Country() OptString {
	return s.Phone2Country
}

// GetPhone3 returns the value of Phone3.
func (s *Contact) GetPhone3() OptString {
	return s.Phone3
}

// GetPhone3Type returns the value of Phone3Type.
func (s *Contact) GetPhone3Type() OptString {
	return s.Phone3Type
}

// GetPhone3Country returns the value of Phone3Country.
func (s *Contact) GetPhone3Country() OptString {
	return s.Phone3Country
}

// GetPhone4 returns the value of Phone4.
func (s *Contact) GetPhone4() OptString {
	return s.Phone4
}

// GetPhone4Type returns the value of Phone4Type.
func (s *Contact) GetPhone4Type() OptString {
	return s.Phone4Type
}

// GetPhone4Country returns the value of Phone4Country.
func (s *Contact) GetPhone4Country() OptString {
	return s.Phone4Country
}

// GetPhone5 returns the value of Phone5.
func (s *Contact) GetPhone5() OptString {
	return s.Phone5
}

// GetPhone5Type returns the value of Phone5Type.
func (s *Contact) GetPhone5Type() OptString {
	return s.Phone5Type
}

// GetPhone5Country returns the value of Phone5Country.
func (s *Contact) GetPhone5Country() OptString {
	return s.Phone5Country
}

// GetEmails returns the value of Emails.
func (s *Contact) GetEmails() *ContactEmails {
	return s.Emails
}

// GetEmailSearch returns the value of EmailSearch.
func (s *Contact) GetEmailSearch() OptString {
	return s.EmailSearch
}

// GetEmail1 returns the value of Email1.
func (s *Contact) GetEmail1() OptString {
	return s.Email1
}

// GetEmail1Type returns the value of Email1Type.
func (s *Contact) GetEmail1Type() OptString {
	return s.Email1Type
}

// GetEmail2 returns the value of Email2.
func (s *Contact) GetEmail2() OptString {
	return s.Email2
}

// GetEmail2Type returns the value of Email2Type.
func (s *Contact) GetEmail2Type() OptString {
	return s.Email2Type
}

// GetEmail3 returns the value of Email3.
func (s *Contact) GetEmail3() OptString {
	return s.Email3
}

// GetEmail3Type returns the value of Email3Type.
func (s *Contact) GetEmail3Type() OptString {
	return s.Email3Type
}

// GetEmail4 returns the value of Email4.
func (s *Contact) GetEmail4() OptString {
	return s.Email4
}

// GetEmail4Type returns the value of Email4Type.
func (s *Contact) GetEmail4Type() OptString {
	return s.Email4Type
}

// GetEmail5 returns the value of Email5.
func (s *Contact) GetEmail5() OptString {
	return s.Email5
}

// GetEmail5Type returns the value of Email5Type.
func (s *Contact) GetEmail5Type() OptString {
	return s.Email5Type
}

// GetMessengers returns the value of Messengers.
func (s *Contact) GetMessengers() *ContactMessengers {
	return s.Messengers
}

// GetMessengersSearch returns the value of MessengersSearch.
func (s *Contact) GetMessengersSearch() OptString {
	return s.MessengersSearch
}

// GetSkypeUUID returns the value of SkypeUUID.
func (s *Contact) GetSkypeUUID() OptString {
	return s.SkypeUUID
}

// GetSkype returns the value of Skype.
func (s *Contact) GetSkype() OptString {
	return s.Skype
}

// GetWhatsappUUID returns the value of WhatsappUUID.
func (s *Contact) GetWhatsappUUID() OptString {
	return s.WhatsappUUID
}

// GetWhatsapp returns the value of Whatsapp.
func (s *Contact) GetWhatsapp() OptString {
	return s.Whatsapp
}

// GetTelegramUUID returns the value of TelegramUUID.
func (s *Contact) GetTelegramUUID() OptString {
	return s.TelegramUUID
}

// GetTelegram returns the value of Telegram.
func (s *Contact) GetTelegram() OptString {
	return s.Telegram
}

// GetWechatUUID returns the value of WechatUUID.
func (s *Contact) GetWechatUUID() OptString {
	return s.WechatUUID
}

// GetWechat returns the value of Wechat.
func (s *Contact) GetWechat() OptString {
	return s.Wechat
}

// GetLineUUID returns the value of LineUUID.
func (s *Contact) GetLineUUID() OptString {
	return s.LineUUID
}

// GetLine returns the value of Line.
func (s *Contact) GetLine() OptString {
	return s.Line
}

// GetSocials returns the value of Socials.
func (s *Contact) GetSocials() *ContactSocials {
	return s.Socials
}

// GetSocialsSearch returns the value of SocialsSearch.
func (s *Contact) GetSocialsSearch() OptString {
	return s.SocialsSearch
}

// GetLinkedinUUID returns the value of LinkedinUUID.
func (s *Contact) GetLinkedinUUID() OptString {
	return s.LinkedinUUID
}

// GetLinkedinURL returns the value of LinkedinURL.
func (s *Contact) GetLinkedinURL() OptString {
	return s.LinkedinURL
}

// GetFacebookUUID returns the value of FacebookUUID.
func (s *Contact) GetFacebookUUID() OptString {
	return s.FacebookUUID
}

// GetFacebookURL returns the value of FacebookURL.
func (s *Contact) GetFacebookURL() OptString {
	return s.FacebookURL
}

// GetTwitterUUID returns the value of TwitterUUID.
func (s *Contact) GetTwitterUUID() OptString {
	return s.TwitterUUID
}

// GetTwitterURL returns the value of TwitterURL.
func (s *Contact) GetTwitterURL() OptString {
	return s.TwitterURL
}

// GetGithubUUID returns the value of GithubUUID.
func (s *Contact) GetGithubUUID() OptString {
	return s.GithubUUID
}

// GetGithubURL returns the value of GithubURL.
func (s *Contact) GetGithubURL() OptString {
	return s.GithubURL
}

// GetVkUUID returns the value of VkUUID.
func (s *Contact) GetVkUUID() OptString {
	return s.VkUUID
}

// GetVkURL returns the value of VkURL.
func (s *Contact) GetVkURL() OptString {
	return s.VkURL
}

// GetOdnoUUID returns the value of OdnoUUID.
func (s *Contact) GetOdnoUUID() OptString {
	return s.OdnoUUID
}

// GetOdnoURL returns the value of OdnoURL.
func (s *Contact) GetOdnoURL() OptString {
	return s.OdnoURL
}

// GetHhruUUID returns the value of HhruUUID.
func (s *Contact) GetHhruUUID() OptString {
	return s.HhruUUID
}

// GetHhruURL returns the value of HhruURL.
func (s *Contact) GetHhruURL() OptString {
	return s.HhruURL
}

// GetHabrUUID returns the value of HabrUUID.
func (s *Contact) GetHabrUUID() OptString {
	return s.HabrUUID
}

// GetHabrURL returns the value of HabrURL.
func (s *Contact) GetHabrURL() OptString {
	return s.HabrURL
}

// GetMoikrugUUID returns the value of MoikrugUUID.
func (s *Contact) GetMoikrugUUID() OptString {
	return s.MoikrugUUID
}

// GetMoikrugURL returns the value of MoikrugURL.
func (s *Contact) GetMoikrugURL() OptString {
	return s.MoikrugURL
}

// GetInstagramUUID returns the value of InstagramUUID.
func (s *Contact) GetInstagramUUID() OptString {
	return s.InstagramUUID
}

// GetInstagramURL returns the value of InstagramURL.
func (s *Contact) GetInstagramURL() OptString {
	return s.InstagramURL
}

// GetSocial1UUID returns the value of Social1UUID.
func (s *Contact) GetSocial1UUID() OptString {
	return s.Social1UUID
}

// GetSocial1URL returns the value of Social1URL.
func (s *Contact) GetSocial1URL() OptString {
	return s.Social1URL
}

// GetSocial1Type returns the value of Social1Type.
func (s *Contact) GetSocial1Type() OptString {
	return s.Social1Type
}

// GetSocial2UUID returns the value of Social2UUID.
func (s *Contact) GetSocial2UUID() OptString {
	return s.Social2UUID
}

// GetSocial2URL returns the value of Social2URL.
func (s *Contact) GetSocial2URL() OptString {
	return s.Social2URL
}

// GetSocial2Type returns the value of Social2Type.
func (s *Contact) GetSocial2Type() OptString {
	return s.Social2Type
}

// GetSocial3UUID returns the value of Social3UUID.
func (s *Contact) GetSocial3UUID() OptString {
	return s.Social3UUID
}

// GetSocial3URL returns the value of Social3URL.
func (s *Contact) GetSocial3URL() OptString {
	return s.Social3URL
}

// GetSocial3Type returns the value of Social3Type.
func (s *Contact) GetSocial3Type() OptString {
	return s.Social3Type
}

// GetSocial4UUID returns the value of Social4UUID.
func (s *Contact) GetSocial4UUID() OptString {
	return s.Social4UUID
}

// GetSocial4URL returns the value of Social4URL.
func (s *Contact) GetSocial4URL() OptString {
	return s.Social4URL
}

// GetSocial4Type returns the value of Social4Type.
func (s *Contact) GetSocial4Type() OptString {
	return s.Social4Type
}

// GetSocial5UUID returns the value of Social5UUID.
func (s *Contact) GetSocial5UUID() OptString {
	return s.Social5UUID
}

// GetSocial5URL returns the value of Social5URL.
func (s *Contact) GetSocial5URL() OptString {
	return s.Social5URL
}

// GetSocial5Type returns the value of Social5Type.
func (s *Contact) GetSocial5Type() OptString {
	return s.Social5Type
}

// GetSocial6UUID returns the value of Social6UUID.
func (s *Contact) GetSocial6UUID() OptString {
	return s.Social6UUID
}

// GetSocial6URL returns the value of Social6URL.
func (s *Contact) GetSocial6URL() OptString {
	return s.Social6URL
}

// GetSocial6Type returns the value of Social6Type.
func (s *Contact) GetSocial6Type() OptString {
	return s.Social6Type
}

// GetSocial7UUID returns the value of Social7UUID.
func (s *Contact) GetSocial7UUID() OptString {
	return s.Social7UUID
}

// GetSocial7URL returns the value of Social7URL.
func (s *Contact) GetSocial7URL() OptString {
	return s.Social7URL
}

// GetSocial7Type returns the value of Social7Type.
func (s *Contact) GetSocial7Type() OptString {
	return s.Social7Type
}

// GetSocial8UUID returns the value of Social8UUID.
func (s *Contact) GetSocial8UUID() OptString {
	return s.Social8UUID
}

// GetSocial8URL returns the value of Social8URL.
func (s *Contact) GetSocial8URL() OptString {
	return s.Social8URL
}

// GetSocial8Type returns the value of Social8Type.
func (s *Contact) GetSocial8Type() OptString {
	return s.Social8Type
}

// GetSocial9UUID returns the value of Social9UUID.
func (s *Contact) GetSocial9UUID() OptString {
	return s.Social9UUID
}

// GetSocial9URL returns the value of Social9URL.
func (s *Contact) GetSocial9URL() OptString {
	return s.Social9URL
}

// GetSocial9Type returns the value of Social9Type.
func (s *Contact) GetSocial9Type() OptString {
	return s.Social9Type
}

// GetTrackingSource returns the value of TrackingSource.
func (s *Contact) GetTrackingSource() OptString {
	return s.TrackingSource
}

// GetTrackingSlug returns the value of TrackingSlug.
func (s *Contact) GetTrackingSlug() OptString {
	return s.TrackingSlug
}

// GetCachedImg returns the value of CachedImg.
func (s *Contact) GetCachedImg() OptString {
	return s.CachedImg
}

// GetCachedImgData returns the value of CachedImgData.
func (s *Contact) GetCachedImgData() *ContactCachedImgData {
	return s.CachedImgData
}

// GetCrawl returns the value of Crawl.
func (s *Contact) GetCrawl() *ContactCrawl {
	return s.Crawl
}

// GetDuplicateUserID returns the value of DuplicateUserID.
func (s *Contact) GetDuplicateUserID() OptString {
	return s.DuplicateUserID
}

// GetDuplicateAlternativeID returns the value of DuplicateAlternativeID.
func (s *Contact) GetDuplicateAlternativeID() OptString {
	return s.DuplicateAlternativeID
}

// GetDuplicateReportDate returns the value of DuplicateReportDate.
func (s *Contact) GetDuplicateReportDate() OptDateTime {
	return s.DuplicateReportDate
}

// GetEntryDate returns the value of EntryDate.
func (s *Contact) GetEntryDate() OptDateTime {
	return s.EntryDate
}

// GetEditDate returns the value of EditDate.
func (s *Contact) GetEditDate() OptDateTime {
	return s.EditDate
}

// GetLastKpiEntryDate returns the value of LastKpiEntryDate.
func (s *Contact) GetLastKpiEntryDate() OptDateTime {
	return s.LastKpiEntryDate
}

// SetUUID sets the value of UUID.
func (s *Contact) SetUUID(val OptString) {
	s.UUID = val
}

// SetUserUUID sets the value of UserUUID.
func (s *Contact) SetUserUUID(val OptString) {
	s.UserUUID = val
}

// SetInstanceUUID sets the value of InstanceUUID.
func (s *Contact) SetInstanceUUID(val OptString) {
	s.InstanceUUID = val
}

// SetStatus sets the value of Status.
func (s *Contact) SetStatus(val OptString) {
	s.Status = val
}

// SetNames sets the value of Names.
func (s *Contact) SetNames(val *ContactNames) {
	s.Names = val
}

// SetNamesSearch sets the value of NamesSearch.
func (s *Contact) SetNamesSearch(val OptString) {
	s.NamesSearch = val
}

// SetLast sets the value of Last.
func (s *Contact) SetLast(val OptString) {
	s.Last = val
}

// SetFirst sets the value of First.
func (s *Contact) SetFirst(val OptString) {
	s.First = val
}

// SetMiddle sets the value of Middle.
func (s *Contact) SetMiddle(val OptString) {
	s.Middle = val
}

// SetBirthday sets the value of Birthday.
func (s *Contact) SetBirthday(val OptDateTime) {
	s.Birthday = val
}

// SetBirthdayType sets the value of BirthdayType.
func (s *Contact) SetBirthdayType(val OptString) {
	s.BirthdayType = val
}

// SetSalary sets the value of Salary.
func (s *Contact) SetSalary(val OptString) {
	s.Salary = val
}

// SetSalaryData sets the value of SalaryData.
func (s *Contact) SetSalaryData(val *ContactSalaryData) {
	s.SalaryData = val
}

// SetLastPositions sets the value of LastPositions.
func (s *Contact) SetLastPositions(val *ContactLastPositions) {
	s.LastPositions = val
}

// SetLastPositionID sets the value of LastPositionID.
func (s *Contact) SetLastPositionID(val OptInt) {
	s.LastPositionID = val
}

// SetLastPositionCompanyID sets the value of LastPositionCompanyID.
func (s *Contact) SetLastPositionCompanyID(val OptInt) {
	s.LastPositionCompanyID = val
}

// SetLastPositionCompanyName sets the value of LastPositionCompanyName.
func (s *Contact) SetLastPositionCompanyName(val OptString) {
	s.LastPositionCompanyName = val
}

// SetLastPositionTitle sets the value of LastPositionTitle.
func (s *Contact) SetLastPositionTitle(val OptString) {
	s.LastPositionTitle = val
}

// SetLastPositionStartDate sets the value of LastPositionStartDate.
func (s *Contact) SetLastPositionStartDate(val OptDateTime) {
	s.LastPositionStartDate = val
}

// SetLastPositionEndDate sets the value of LastPositionEndDate.
func (s *Contact) SetLastPositionEndDate(val OptDateTime) {
	s.LastPositionEndDate = val
}

// SetLastPositionEndNow sets the value of LastPositionEndNow.
func (s *Contact) SetLastPositionEndNow(val OptBool) {
	s.LastPositionEndNow = val
}

// SetLastPositionDescription sets the value of LastPositionDescription.
func (s *Contact) SetLastPositionDescription(val OptString) {
	s.LastPositionDescription = val
}

// SetNoteSearch sets the value of NoteSearch.
func (s *Contact) SetNoteSearch(val OptString) {
	s.NoteSearch = val
}

// SetNoteKpiID sets the value of NoteKpiID.
func (s *Contact) SetNoteKpiID(val *ContactNoteKpiID) {
	s.NoteKpiID = val
}

// SetPhones sets the value of Phones.
func (s *Contact) SetPhones(val *ContactPhones) {
	s.Phones = val
}

// SetPhoneSearch sets the value of PhoneSearch.
func (s *Contact) SetPhoneSearch(val OptString) {
	s.PhoneSearch = val
}

// SetPhone1 sets the value of Phone1.
func (s *Contact) SetPhone1(val OptString) {
	s.Phone1 = val
}

// SetPhone1Type sets the value of Phone1Type.
func (s *Contact) SetPhone1Type(val OptString) {
	s.Phone1Type = val
}

// SetPhone1Country sets the value of Phone1Country.
func (s *Contact) SetPhone1Country(val OptString) {
	s.Phone1Country = val
}

// SetPhone2 sets the value of Phone2.
func (s *Contact) SetPhone2(val OptString) {
	s.Phone2 = val
}

// SetPhone2Type sets the value of Phone2Type.
func (s *Contact) SetPhone2Type(val OptString) {
	s.Phone2Type = val
}

// SetPhone2Country sets the value of Phone2Country.
func (s *Contact) SetPhone2Country(val OptString) {
	s.Phone2Country = val
}

// SetPhone3 sets the value of Phone3.
func (s *Contact) SetPhone3(val OptString) {
	s.Phone3 = val
}

// SetPhone3Type sets the value of Phone3Type.
func (s *Contact) SetPhone3Type(val OptString) {
	s.Phone3Type = val
}

// SetPhone3Country sets the value of Phone3Country.
func (s *Contact) SetPhone3Country(val OptString) {
	s.Phone3Country = val
}

// SetPhone4 sets the value of Phone4.
func (s *Contact) SetPhone4(val OptString) {
	s.Phone4 = val
}

// SetPhone4Type sets the value of Phone4Type.
func (s *Contact) SetPhone4Type(val OptString) {
	s.Phone4Type = val
}

// SetPhone4Country sets the value of Phone4Country.
func (s *Contact) SetPhone4Country(val OptString) {
	s.Phone4Country = val
}

// SetPhone5 sets the value of Phone5.
func (s *Contact) SetPhone5(val OptString) {
	s.Phone5 = val
}

// SetPhone5Type sets the value of Phone5Type.
func (s *Contact) SetPhone5Type(val OptString) {
	s.Phone5Type = val
}

// SetPhone5Country sets the value of Phone5Country.
func (s *Contact) SetPhone5Country(val OptString) {
	s.Phone5Country = val
}

// SetEmails sets the value of Emails.
func (s *Contact) SetEmails(val *ContactEmails) {
	s.Emails = val
}

// SetEmailSearch sets the value of EmailSearch.
func (s *Contact) SetEmailSearch(val OptString) {
	s.EmailSearch = val
}

// SetEmail1 sets the value of Email1.
func (s *Contact) SetEmail1(val OptString) {
	s.Email1 = val
}

// SetEmail1Type sets the value of Email1Type.
func (s *Contact) SetEmail1Type(val OptString) {
	s.Email1Type = val
}

// SetEmail2 sets the value of Email2.
func (s *Contact) SetEmail2(val OptString) {
	s.Email2 = val
}

// SetEmail2Type sets the value of Email2Type.
func (s *Contact) SetEmail2Type(val OptString) {
	s.Email2Type = val
}

// SetEmail3 sets the value of Email3.
func (s *Contact) SetEmail3(val OptString) {
	s.Email3 = val
}

// SetEmail3Type sets the value of Email3Type.
func (s *Contact) SetEmail3Type(val OptString) {
	s.Email3Type = val
}

// SetEmail4 sets the value of Email4.
func (s *Contact) SetEmail4(val OptString) {
	s.Email4 = val
}

// SetEmail4Type sets the value of Email4Type.
func (s *Contact) SetEmail4Type(val OptString) {
	s.Email4Type = val
}

// SetEmail5 sets the value of Email5.
func (s *Contact) SetEmail5(val OptString) {
	s.Email5 = val
}

// SetEmail5Type sets the value of Email5Type.
func (s *Contact) SetEmail5Type(val OptString) {
	s.Email5Type = val
}

// SetMessengers sets the value of Messengers.
func (s *Contact) SetMessengers(val *ContactMessengers) {
	s.Messengers = val
}

// SetMessengersSearch sets the value of MessengersSearch.
func (s *Contact) SetMessengersSearch(val OptString) {
	s.MessengersSearch = val
}

// SetSkypeUUID sets the value of SkypeUUID.
func (s *Contact) SetSkypeUUID(val OptString) {
	s.SkypeUUID = val
}

// SetSkype sets the value of Skype.
func (s *Contact) SetSkype(val OptString) {
	s.Skype = val
}

// SetWhatsappUUID sets the value of WhatsappUUID.
func (s *Contact) SetWhatsappUUID(val OptString) {
	s.WhatsappUUID = val
}

// SetWhatsapp sets the value of Whatsapp.
func (s *Contact) SetWhatsapp(val OptString) {
	s.Whatsapp = val
}

// SetTelegramUUID sets the value of TelegramUUID.
func (s *Contact) SetTelegramUUID(val OptString) {
	s.TelegramUUID = val
}

// SetTelegram sets the value of Telegram.
func (s *Contact) SetTelegram(val OptString) {
	s.Telegram = val
}

// SetWechatUUID sets the value of WechatUUID.
func (s *Contact) SetWechatUUID(val OptString) {
	s.WechatUUID = val
}

// SetWechat sets the value of Wechat.
func (s *Contact) SetWechat(val OptString) {
	s.Wechat = val
}

// SetLineUUID sets the value of LineUUID.
func (s *Contact) SetLineUUID(val OptString) {
	s.LineUUID = val
}

// SetLine sets the value of Line.
func (s *Contact) SetLine(val OptString) {
	s.Line = val
}

// SetSocials sets the value of Socials.
func (s *Contact) SetSocials(val *ContactSocials) {
	s.Socials = val
}

// SetSocialsSearch sets the value of SocialsSearch.
func (s *Contact) SetSocialsSearch(val OptString) {
	s.SocialsSearch = val
}

// SetLinkedinUUID sets the value of LinkedinUUID.
func (s *Contact) SetLinkedinUUID(val OptString) {
	s.LinkedinUUID = val
}

// SetLinkedinURL sets the value of LinkedinURL.
func (s *Contact) SetLinkedinURL(val OptString) {
	s.LinkedinURL = val
}

// SetFacebookUUID sets the value of FacebookUUID.
func (s *Contact) SetFacebookUUID(val OptString) {
	s.FacebookUUID = val
}

// SetFacebookURL sets the value of FacebookURL.
func (s *Contact) SetFacebookURL(val OptString) {
	s.FacebookURL = val
}

// SetTwitterUUID sets the value of TwitterUUID.
func (s *Contact) SetTwitterUUID(val OptString) {
	s.TwitterUUID = val
}

// SetTwitterURL sets the value of TwitterURL.
func (s *Contact) SetTwitterURL(val OptString) {
	s.TwitterURL = val
}

// SetGithubUUID sets the value of GithubUUID.
func (s *Contact) SetGithubUUID(val OptString) {
	s.GithubUUID = val
}

// SetGithubURL sets the value of GithubURL.
func (s *Contact) SetGithubURL(val OptString) {
	s.GithubURL = val
}

// SetVkUUID sets the value of VkUUID.
func (s *Contact) SetVkUUID(val OptString) {
	s.VkUUID = val
}

// SetVkURL sets the value of VkURL.
func (s *Contact) SetVkURL(val OptString) {
	s.VkURL = val
}

// SetOdnoUUID sets the value of OdnoUUID.
func (s *Contact) SetOdnoUUID(val OptString) {
	s.OdnoUUID = val
}

// SetOdnoURL sets the value of OdnoURL.
func (s *Contact) SetOdnoURL(val OptString) {
	s.OdnoURL = val
}

// SetHhruUUID sets the value of HhruUUID.
func (s *Contact) SetHhruUUID(val OptString) {
	s.HhruUUID = val
}

// SetHhruURL sets the value of HhruURL.
func (s *Contact) SetHhruURL(val OptString) {
	s.HhruURL = val
}

// SetHabrUUID sets the value of HabrUUID.
func (s *Contact) SetHabrUUID(val OptString) {
	s.HabrUUID = val
}

// SetHabrURL sets the value of HabrURL.
func (s *Contact) SetHabrURL(val OptString) {
	s.HabrURL = val
}

// SetMoikrugUUID sets the value of MoikrugUUID.
func (s *Contact) SetMoikrugUUID(val OptString) {
	s.MoikrugUUID = val
}

// SetMoikrugURL sets the value of MoikrugURL.
func (s *Contact) SetMoikrugURL(val OptString) {
	s.MoikrugURL = val
}

// SetInstagramUUID sets the value of InstagramUUID.
func (s *Contact) SetInstagramUUID(val OptString) {
	s.InstagramUUID = val
}

// SetInstagramURL sets the value of InstagramURL.
func (s *Contact) SetInstagramURL(val OptString) {
	s.InstagramURL = val
}

// SetSocial1UUID sets the value of Social1UUID.
func (s *Contact) SetSocial1UUID(val OptString) {
	s.Social1UUID = val
}

// SetSocial1URL sets the value of Social1URL.
func (s *Contact) SetSocial1URL(val OptString) {
	s.Social1URL = val
}

// SetSocial1Type sets the value of Social1Type.
func (s *Contact) SetSocial1Type(val OptString) {
	s.Social1Type = val
}

// SetSocial2UUID sets the value of Social2UUID.
func (s *Contact) SetSocial2UUID(val OptString) {
	s.Social2UUID = val
}

// SetSocial2URL sets the value of Social2URL.
func (s *Contact) SetSocial2URL(val OptString) {
	s.Social2URL = val
}

// SetSocial2Type sets the value of Social2Type.
func (s *Contact) SetSocial2Type(val OptString) {
	s.Social2Type = val
}

// SetSocial3UUID sets the value of Social3UUID.
func (s *Contact) SetSocial3UUID(val OptString) {
	s.Social3UUID = val
}

// SetSocial3URL sets the value of Social3URL.
func (s *Contact) SetSocial3URL(val OptString) {
	s.Social3URL = val
}

// SetSocial3Type sets the value of Social3Type.
func (s *Contact) SetSocial3Type(val OptString) {
	s.Social3Type = val
}

// SetSocial4UUID sets the value of Social4UUID.
func (s *Contact) SetSocial4UUID(val OptString) {
	s.Social4UUID = val
}

// SetSocial4URL sets the value of Social4URL.
func (s *Contact) SetSocial4URL(val OptString) {
	s.Social4URL = val
}

// SetSocial4Type sets the value of Social4Type.
func (s *Contact) SetSocial4Type(val OptString) {
	s.Social4Type = val
}

// SetSocial5UUID sets the value of Social5UUID.
func (s *Contact) SetSocial5UUID(val OptString) {
	s.Social5UUID = val
}

// SetSocial5URL sets the value of Social5URL.
func (s *Contact) SetSocial5URL(val OptString) {
	s.Social5URL = val
}

// SetSocial5Type sets the value of Social5Type.
func (s *Contact) SetSocial5Type(val OptString) {
	s.Social5Type = val
}

// SetSocial6UUID sets the value of Social6UUID.
func (s *Contact) SetSocial6UUID(val OptString) {
	s.Social6UUID = val
}

// SetSocial6URL sets the value of Social6URL.
func (s *Contact) SetSocial6URL(val OptString) {
	s.Social6URL = val
}

// SetSocial6Type sets the value of Social6Type.
func (s *Contact) SetSocial6Type(val OptString) {
	s.Social6Type = val
}

// SetSocial7UUID sets the value of Social7UUID.
func (s *Contact) SetSocial7UUID(val OptString) {
	s.Social7UUID = val
}

// SetSocial7URL sets the value of Social7URL.
func (s *Contact) SetSocial7URL(val OptString) {
	s.Social7URL = val
}

// SetSocial7Type sets the value of Social7Type.
func (s *Contact) SetSocial7Type(val OptString) {
	s.Social7Type = val
}

// SetSocial8UUID sets the value of Social8UUID.
func (s *Contact) SetSocial8UUID(val OptString) {
	s.Social8UUID = val
}

// SetSocial8URL sets the value of Social8URL.
func (s *Contact) SetSocial8URL(val OptString) {
	s.Social8URL = val
}

// SetSocial8Type sets the value of Social8Type.
func (s *Contact) SetSocial8Type(val OptString) {
	s.Social8Type = val
}

// SetSocial9UUID sets the value of Social9UUID.
func (s *Contact) SetSocial9UUID(val OptString) {
	s.Social9UUID = val
}

// SetSocial9URL sets the value of Social9URL.
func (s *Contact) SetSocial9URL(val OptString) {
	s.Social9URL = val
}

// SetSocial9Type sets the value of Social9Type.
func (s *Contact) SetSocial9Type(val OptString) {
	s.Social9Type = val
}

// SetTrackingSource sets the value of TrackingSource.
func (s *Contact) SetTrackingSource(val OptString) {
	s.TrackingSource = val
}

// SetTrackingSlug sets the value of TrackingSlug.
func (s *Contact) SetTrackingSlug(val OptString) {
	s.TrackingSlug = val
}

// SetCachedImg sets the value of CachedImg.
func (s *Contact) SetCachedImg(val OptString) {
	s.CachedImg = val
}

// SetCachedImgData sets the value of CachedImgData.
func (s *Contact) SetCachedImgData(val *ContactCachedImgData) {
	s.CachedImgData = val
}

// SetCrawl sets the value of Crawl.
func (s *Contact) SetCrawl(val *ContactCrawl) {
	s.Crawl = val
}

// SetDuplicateUserID sets the value of DuplicateUserID.
func (s *Contact) SetDuplicateUserID(val OptString) {
	s.DuplicateUserID = val
}

// SetDuplicateAlternativeID sets the value of DuplicateAlternativeID.
func (s *Contact) SetDuplicateAlternativeID(val OptString) {
	s.DuplicateAlternativeID = val
}

// SetDuplicateReportDate sets the value of DuplicateReportDate.
func (s *Contact) SetDuplicateReportDate(val OptDateTime) {
	s.DuplicateReportDate = val
}

// SetEntryDate sets the value of EntryDate.
func (s *Contact) SetEntryDate(val OptDateTime) {
	s.EntryDate = val
}

// SetEditDate sets the value of EditDate.
func (s *Contact) SetEditDate(val OptDateTime) {
	s.EditDate = val
}

// SetLastKpiEntryDate sets the value of LastKpiEntryDate.
func (s *Contact) SetLastKpiEntryDate(val OptDateTime) {
	s.LastKpiEntryDate = val
}

type ContactCachedImgData struct{}

type ContactCrawl struct{}

type ContactEmails struct{}

type ContactLastPositions struct{}

type ContactMessengers struct{}

type ContactNames struct{}

type ContactNoteKpiID struct{}

type ContactPhones struct{}

type ContactSalaryData struct{}

type ContactSocials struct{}

// Ref: #
type Datasource struct {
	UUID      OptString   `json:"uuid"`
	UserUUID  string      `json:"user_uuid"`
	Type      string      `json:"type"`
	Name      string      `json:"name"`
	IsEnabled OptBool     `json:"is_enabled"`
	Provider  string      `json:"provider"`
	CreatedAt OptDateTime `json:"created_at"`
	UpdatedAt OptDateTime `json:"updated_at"`
}

// GetUUID returns the value of UUID.
func (s *Datasource) GetUUID() OptString {
	return s.UUID
}

// GetUserUUID returns the value of UserUUID.
func (s *Datasource) GetUserUUID() string {
	return s.UserUUID
}

// GetType returns the value of Type.
func (s *Datasource) GetType() string {
	return s.Type
}

// GetName returns the value of Name.
func (s *Datasource) GetName() string {
	return s.Name
}

// GetIsEnabled returns the value of IsEnabled.
func (s *Datasource) GetIsEnabled() OptBool {
	return s.IsEnabled
}

// GetProvider returns the value of Provider.
func (s *Datasource) GetProvider() string {
	return s.Provider
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Datasource) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Datasource) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// SetUUID sets the value of UUID.
func (s *Datasource) SetUUID(val OptString) {
	s.UUID = val
}

// SetUserUUID sets the value of UserUUID.
func (s *Datasource) SetUserUUID(val string) {
	s.UserUUID = val
}

// SetType sets the value of Type.
func (s *Datasource) SetType(val string) {
	s.Type = val
}

// SetName sets the value of Name.
func (s *Datasource) SetName(val string) {
	s.Name = val
}

// SetIsEnabled sets the value of IsEnabled.
func (s *Datasource) SetIsEnabled(val OptBool) {
	s.IsEnabled = val
}

// SetProvider sets the value of Provider.
func (s *Datasource) SetProvider(val string) {
	s.Provider = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Datasource) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Datasource) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// Ref: #
type DatasourceEmail struct {
	UUID            OptString   `json:"uuid"`
	UserUUID        string      `json:"user_uuid"`
	Email           string      `json:"email"`
	Name            string      `json:"name"`
	IsEnabled       OptBool     `json:"is_enabled"`
	Provider        string      `json:"provider"`
	OAuth2ClientID  OptString   `json:"oauth2_client_id"`
	OAuth2TokenUUID OptString   `json:"oauth2_token_uuid"`
	ImapServer      string      `json:"imap_server"`
	SMTPServer      string      `json:"smtp_server"`
	SMTPTLS         OptBool     `json:"smtp_tls"`
	Password        string      `json:"password"`
	CreatedAt       OptDateTime `json:"created_at"`
	UpdatedAt       OptDateTime `json:"updated_at"`
}

// GetUUID returns the value of UUID.
func (s *DatasourceEmail) GetUUID() OptString {
	return s.UUID
}

// GetUserUUID returns the value of UserUUID.
func (s *DatasourceEmail) GetUserUUID() string {
	return s.UserUUID
}

// GetEmail returns the value of Email.
func (s *DatasourceEmail) GetEmail() string {
	return s.Email
}

// GetName returns the value of Name.
func (s *DatasourceEmail) GetName() string {
	return s.Name
}

// GetIsEnabled returns the value of IsEnabled.
func (s *DatasourceEmail) GetIsEnabled() OptBool {
	return s.IsEnabled
}

// GetProvider returns the value of Provider.
func (s *DatasourceEmail) GetProvider() string {
	return s.Provider
}

// GetOAuth2ClientID returns the value of OAuth2ClientID.
func (s *DatasourceEmail) GetOAuth2ClientID() OptString {
	return s.OAuth2ClientID
}

// GetOAuth2TokenUUID returns the value of OAuth2TokenUUID.
func (s *DatasourceEmail) GetOAuth2TokenUUID() OptString {
	return s.OAuth2TokenUUID
}

// GetImapServer returns the value of ImapServer.
func (s *DatasourceEmail) GetImapServer() string {
	return s.ImapServer
}

// GetSMTPServer returns the value of SMTPServer.
func (s *DatasourceEmail) GetSMTPServer() string {
	return s.SMTPServer
}

// GetSMTPTLS returns the value of SMTPTLS.
func (s *DatasourceEmail) GetSMTPTLS() OptBool {
	return s.SMTPTLS
}

// GetPassword returns the value of Password.
func (s *DatasourceEmail) GetPassword() string {
	return s.Password
}

// GetCreatedAt returns the value of CreatedAt.
func (s *DatasourceEmail) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *DatasourceEmail) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// SetUUID sets the value of UUID.
func (s *DatasourceEmail) SetUUID(val OptString) {
	s.UUID = val
}

// SetUserUUID sets the value of UserUUID.
func (s *DatasourceEmail) SetUserUUID(val string) {
	s.UserUUID = val
}

// SetEmail sets the value of Email.
func (s *DatasourceEmail) SetEmail(val string) {
	s.Email = val
}

// SetName sets the value of Name.
func (s *DatasourceEmail) SetName(val string) {
	s.Name = val
}

// SetIsEnabled sets the value of IsEnabled.
func (s *DatasourceEmail) SetIsEnabled(val OptBool) {
	s.IsEnabled = val
}

// SetProvider sets the value of Provider.
func (s *DatasourceEmail) SetProvider(val string) {
	s.Provider = val
}

// SetOAuth2ClientID sets the value of OAuth2ClientID.
func (s *DatasourceEmail) SetOAuth2ClientID(val OptString) {
	s.OAuth2ClientID = val
}

// SetOAuth2TokenUUID sets the value of OAuth2TokenUUID.
func (s *DatasourceEmail) SetOAuth2TokenUUID(val OptString) {
	s.OAuth2TokenUUID = val
}

// SetImapServer sets the value of ImapServer.
func (s *DatasourceEmail) SetImapServer(val string) {
	s.ImapServer = val
}

// SetSMTPServer sets the value of SMTPServer.
func (s *DatasourceEmail) SetSMTPServer(val string) {
	s.SMTPServer = val
}

// SetSMTPTLS sets the value of SMTPTLS.
func (s *DatasourceEmail) SetSMTPTLS(val OptBool) {
	s.SMTPTLS = val
}

// SetPassword sets the value of Password.
func (s *DatasourceEmail) SetPassword(val string) {
	s.Password = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *DatasourceEmail) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *DatasourceEmail) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// DatasourceEmailDeleteOK is response for DatasourceEmailDelete operation.
type DatasourceEmailDeleteOK struct{}

type DatasourceEmailRunPipelineOK struct {
	// List of labels.
	Labels []EmailLabel `json:"labels"`
}

// GetLabels returns the value of Labels.
func (s *DatasourceEmailRunPipelineOK) GetLabels() []EmailLabel {
	return s.Labels
}

// SetLabels sets the value of Labels.
func (s *DatasourceEmailRunPipelineOK) SetLabels(val []EmailLabel) {
	s.Labels = val
}

// LinkedIn datasource object representation.
// Ref: #
type DatasourceLinkedin struct {
	UUID      OptString `json:"uuid"`
	UserUUID  string    `json:"user_uuid"`
	Name      string    `json:"name"`
	IsEnabled OptBool   `json:"is_enabled"`
	Provider  string    `json:"provider"`
	// LinkedIn username or email for login.
	Username string `json:"username"`
	// LinkedIn password (or OAuth2 tokens if relevant).
	Password string `json:"password"`
	// Arbitrary LinkedIn bridging config pulled from linkedin.tpl.yaml
	// (presence bridging, encryption, etc.).
	Settings  OptDatasourceLinkedinSettings `json:"settings"`
	CreatedAt OptDateTime                   `json:"created_at"`
	UpdatedAt OptDateTime                   `json:"updated_at"`
}

// GetUUID returns the value of UUID.
func (s *DatasourceLinkedin) GetUUID() OptString {
	return s.UUID
}

// GetUserUUID returns the value of UserUUID.
func (s *DatasourceLinkedin) GetUserUUID() string {
	return s.UserUUID
}

// GetName returns the value of Name.
func (s *DatasourceLinkedin) GetName() string {
	return s.Name
}

// GetIsEnabled returns the value of IsEnabled.
func (s *DatasourceLinkedin) GetIsEnabled() OptBool {
	return s.IsEnabled
}

// GetProvider returns the value of Provider.
func (s *DatasourceLinkedin) GetProvider() string {
	return s.Provider
}

// GetUsername returns the value of Username.
func (s *DatasourceLinkedin) GetUsername() string {
	return s.Username
}

// GetPassword returns the value of Password.
func (s *DatasourceLinkedin) GetPassword() string {
	return s.Password
}

// GetSettings returns the value of Settings.
func (s *DatasourceLinkedin) GetSettings() OptDatasourceLinkedinSettings {
	return s.Settings
}

// GetCreatedAt returns the value of CreatedAt.
func (s *DatasourceLinkedin) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *DatasourceLinkedin) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// SetUUID sets the value of UUID.
func (s *DatasourceLinkedin) SetUUID(val OptString) {
	s.UUID = val
}

// SetUserUUID sets the value of UserUUID.
func (s *DatasourceLinkedin) SetUserUUID(val string) {
	s.UserUUID = val
}

// SetName sets the value of Name.
func (s *DatasourceLinkedin) SetName(val string) {
	s.Name = val
}

// SetIsEnabled sets the value of IsEnabled.
func (s *DatasourceLinkedin) SetIsEnabled(val OptBool) {
	s.IsEnabled = val
}

// SetProvider sets the value of Provider.
func (s *DatasourceLinkedin) SetProvider(val string) {
	s.Provider = val
}

// SetUsername sets the value of Username.
func (s *DatasourceLinkedin) SetUsername(val string) {
	s.Username = val
}

// SetPassword sets the value of Password.
func (s *DatasourceLinkedin) SetPassword(val string) {
	s.Password = val
}

// SetSettings sets the value of Settings.
func (s *DatasourceLinkedin) SetSettings(val OptDatasourceLinkedinSettings) {
	s.Settings = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *DatasourceLinkedin) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *DatasourceLinkedin) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// DatasourceLinkedinDeleteOK is response for DatasourceLinkedinDelete operation.
type DatasourceLinkedinDeleteOK struct{}

// Arbitrary LinkedIn bridging config pulled from linkedin.tpl.yaml
// (presence bridging, encryption, etc.).
type DatasourceLinkedinSettings map[string]jx.Raw

func (s *DatasourceLinkedinSettings) init() DatasourceLinkedinSettings {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// DatasourceSetOAuth2ClientNoContent is response for DatasourceSetOAuth2Client operation.
type DatasourceSetOAuth2ClientNoContent struct{}

type DatasourceSetOAuth2ClientReq struct {
	// OAuth2 client ID.
	ClientID string `json:"client_id"`
}

// GetClientID returns the value of ClientID.
func (s *DatasourceSetOAuth2ClientReq) GetClientID() string {
	return s.ClientID
}

// SetClientID sets the value of ClientID.
func (s *DatasourceSetOAuth2ClientReq) SetClientID(val string) {
	s.ClientID = val
}

// Ref: #
type DatasourceTelegram struct {
	UUID      OptString `json:"uuid"`
	UserUUID  string    `json:"user_uuid"`
	Name      string    `json:"name"`
	IsEnabled OptBool   `json:"is_enabled"`
	Provider  string    `json:"provider"`
	// The phone number for the Telegram account (international format).
	PhoneNumber string `json:"phone_number"`
	// Telegram API ID from my.telegram.org.
	APIID string `json:"api_id"`
	// Telegram API hash.
	APIHash string `json:"api_hash"`
	// Optional 2FA password.
	Password OptString `json:"password"`
	// Additional Telegram bridging config from telegram.tpl.yaml
	// (proxy, concurrency, presence bridging, encryption, etc.).
	Settings       OptDatasourceTelegramSettings `json:"settings"`
	SessionHistory TelegramSessionHistory        `json:"sessionHistory"`
	Participants   TelegramParticipants          `json:"participants"`
	// Arbitrary key-value metadata about the account.
	Meta      OptDatasourceTelegramMeta `json:"meta"`
	CreatedAt OptDateTime               `json:"created_at"`
	UpdatedAt OptDateTime               `json:"updated_at"`
}

// GetUUID returns the value of UUID.
func (s *DatasourceTelegram) GetUUID() OptString {
	return s.UUID
}

// GetUserUUID returns the value of UserUUID.
func (s *DatasourceTelegram) GetUserUUID() string {
	return s.UserUUID
}

// GetName returns the value of Name.
func (s *DatasourceTelegram) GetName() string {
	return s.Name
}

// GetIsEnabled returns the value of IsEnabled.
func (s *DatasourceTelegram) GetIsEnabled() OptBool {
	return s.IsEnabled
}

// GetProvider returns the value of Provider.
func (s *DatasourceTelegram) GetProvider() string {
	return s.Provider
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *DatasourceTelegram) GetPhoneNumber() string {
	return s.PhoneNumber
}

// GetAPIID returns the value of APIID.
func (s *DatasourceTelegram) GetAPIID() string {
	return s.APIID
}

// GetAPIHash returns the value of APIHash.
func (s *DatasourceTelegram) GetAPIHash() string {
	return s.APIHash
}

// GetPassword returns the value of Password.
func (s *DatasourceTelegram) GetPassword() OptString {
	return s.Password
}

// GetSettings returns the value of Settings.
func (s *DatasourceTelegram) GetSettings() OptDatasourceTelegramSettings {
	return s.Settings
}

// GetSessionHistory returns the value of SessionHistory.
func (s *DatasourceTelegram) GetSessionHistory() TelegramSessionHistory {
	return s.SessionHistory
}

// GetParticipants returns the value of Participants.
func (s *DatasourceTelegram) GetParticipants() TelegramParticipants {
	return s.Participants
}

// GetMeta returns the value of Meta.
func (s *DatasourceTelegram) GetMeta() OptDatasourceTelegramMeta {
	return s.Meta
}

// GetCreatedAt returns the value of CreatedAt.
func (s *DatasourceTelegram) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *DatasourceTelegram) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// SetUUID sets the value of UUID.
func (s *DatasourceTelegram) SetUUID(val OptString) {
	s.UUID = val
}

// SetUserUUID sets the value of UserUUID.
func (s *DatasourceTelegram) SetUserUUID(val string) {
	s.UserUUID = val
}

// SetName sets the value of Name.
func (s *DatasourceTelegram) SetName(val string) {
	s.Name = val
}

// SetIsEnabled sets the value of IsEnabled.
func (s *DatasourceTelegram) SetIsEnabled(val OptBool) {
	s.IsEnabled = val
}

// SetProvider sets the value of Provider.
func (s *DatasourceTelegram) SetProvider(val string) {
	s.Provider = val
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *DatasourceTelegram) SetPhoneNumber(val string) {
	s.PhoneNumber = val
}

// SetAPIID sets the value of APIID.
func (s *DatasourceTelegram) SetAPIID(val string) {
	s.APIID = val
}

// SetAPIHash sets the value of APIHash.
func (s *DatasourceTelegram) SetAPIHash(val string) {
	s.APIHash = val
}

// SetPassword sets the value of Password.
func (s *DatasourceTelegram) SetPassword(val OptString) {
	s.Password = val
}

// SetSettings sets the value of Settings.
func (s *DatasourceTelegram) SetSettings(val OptDatasourceTelegramSettings) {
	s.Settings = val
}

// SetSessionHistory sets the value of SessionHistory.
func (s *DatasourceTelegram) SetSessionHistory(val TelegramSessionHistory) {
	s.SessionHistory = val
}

// SetParticipants sets the value of Participants.
func (s *DatasourceTelegram) SetParticipants(val TelegramParticipants) {
	s.Participants = val
}

// SetMeta sets the value of Meta.
func (s *DatasourceTelegram) SetMeta(val OptDatasourceTelegramMeta) {
	s.Meta = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *DatasourceTelegram) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *DatasourceTelegram) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// DatasourceTelegramDeleteOK is response for DatasourceTelegramDelete operation.
type DatasourceTelegramDeleteOK struct{}

// Arbitrary key-value metadata about the account.
type DatasourceTelegramMeta map[string]jx.Raw

func (s *DatasourceTelegramMeta) init() DatasourceTelegramMeta {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Additional Telegram bridging config from telegram.tpl.yaml
// (proxy, concurrency, presence bridging, encryption, etc.).
type DatasourceTelegramSettings map[string]jx.Raw

func (s *DatasourceTelegramSettings) init() DatasourceTelegramSettings {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// WhatsApp datasource object representation.
// Ref: #
type DatasourceWhatsapp struct {
	UUID      OptString `json:"uuid"`
	UserUUID  string    `json:"user_uuid"`
	Name      string    `json:"name"`
	IsEnabled OptBool   `json:"is_enabled"`
	Provider  string    `json:"provider"`
	// The phone number for the WhatsApp account.
	PhoneNumber string `json:"phone_number"`
	// Label for the WhatsApp device connection.
	DeviceName OptString `json:"device_name"`
	// Additional WhatsApp bridging config from whatsapp.tpl.yaml
	// (proxy, presence bridging, call notices, status broadcast, etc.).
	Settings  OptDatasourceWhatsappSettings `json:"settings"`
	CreatedAt OptDateTime                   `json:"created_at"`
	UpdatedAt OptDateTime                   `json:"updated_at"`
}

// GetUUID returns the value of UUID.
func (s *DatasourceWhatsapp) GetUUID() OptString {
	return s.UUID
}

// GetUserUUID returns the value of UserUUID.
func (s *DatasourceWhatsapp) GetUserUUID() string {
	return s.UserUUID
}

// GetName returns the value of Name.
func (s *DatasourceWhatsapp) GetName() string {
	return s.Name
}

// GetIsEnabled returns the value of IsEnabled.
func (s *DatasourceWhatsapp) GetIsEnabled() OptBool {
	return s.IsEnabled
}

// GetProvider returns the value of Provider.
func (s *DatasourceWhatsapp) GetProvider() string {
	return s.Provider
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *DatasourceWhatsapp) GetPhoneNumber() string {
	return s.PhoneNumber
}

// GetDeviceName returns the value of DeviceName.
func (s *DatasourceWhatsapp) GetDeviceName() OptString {
	return s.DeviceName
}

// GetSettings returns the value of Settings.
func (s *DatasourceWhatsapp) GetSettings() OptDatasourceWhatsappSettings {
	return s.Settings
}

// GetCreatedAt returns the value of CreatedAt.
func (s *DatasourceWhatsapp) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *DatasourceWhatsapp) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// SetUUID sets the value of UUID.
func (s *DatasourceWhatsapp) SetUUID(val OptString) {
	s.UUID = val
}

// SetUserUUID sets the value of UserUUID.
func (s *DatasourceWhatsapp) SetUserUUID(val string) {
	s.UserUUID = val
}

// SetName sets the value of Name.
func (s *DatasourceWhatsapp) SetName(val string) {
	s.Name = val
}

// SetIsEnabled sets the value of IsEnabled.
func (s *DatasourceWhatsapp) SetIsEnabled(val OptBool) {
	s.IsEnabled = val
}

// SetProvider sets the value of Provider.
func (s *DatasourceWhatsapp) SetProvider(val string) {
	s.Provider = val
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *DatasourceWhatsapp) SetPhoneNumber(val string) {
	s.PhoneNumber = val
}

// SetDeviceName sets the value of DeviceName.
func (s *DatasourceWhatsapp) SetDeviceName(val OptString) {
	s.DeviceName = val
}

// SetSettings sets the value of Settings.
func (s *DatasourceWhatsapp) SetSettings(val OptDatasourceWhatsappSettings) {
	s.Settings = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *DatasourceWhatsapp) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *DatasourceWhatsapp) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// DatasourceWhatsappDeleteOK is response for DatasourceWhatsappDelete operation.
type DatasourceWhatsappDeleteOK struct{}

// Additional WhatsApp bridging config from whatsapp.tpl.yaml
// (proxy, presence bridging, call notices, status broadcast, etc.).
type DatasourceWhatsappSettings map[string]jx.Raw

func (s *DatasourceWhatsappSettings) init() DatasourceWhatsappSettings {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// DeleteContactOK is response for DeleteContact operation.
type DeleteContactOK struct{}

// DeleteUserOK is response for DeleteUser operation.
type DeleteUserOK struct{}

// Ref: #
type EmailLabel struct {
	HTTPStatusCode        int64              `json:"HTTPStatusCode"`
	Header                EmailLabelHeader   `json:"Header"`
	ID                    OptString          `json:"id"`
	Color                 OptEmailLabelColor `json:"color"`
	LabelListVisibility   OptString          `json:"labelListVisibility"`
	MessageListVisibility OptString          `json:"messageListVisibility"`
	MessagesTotal         OptInt64           `json:"messagesTotal"`
	MessagesUnread        OptInt64           `json:"messagesUnread"`
	Name                  OptString          `json:"name"`
	ThreadsTotal          OptInt64           `json:"threadsTotal"`
	ThreadsUnread         OptInt64           `json:"threadsUnread"`
	Type                  OptString          `json:"type"`
}

// GetHTTPStatusCode returns the value of HTTPStatusCode.
func (s *EmailLabel) GetHTTPStatusCode() int64 {
	return s.HTTPStatusCode
}

// GetHeader returns the value of Header.
func (s *EmailLabel) GetHeader() EmailLabelHeader {
	return s.Header
}

// GetID returns the value of ID.
func (s *EmailLabel) GetID() OptString {
	return s.ID
}

// GetColor returns the value of Color.
func (s *EmailLabel) GetColor() OptEmailLabelColor {
	return s.Color
}

// GetLabelListVisibility returns the value of LabelListVisibility.
func (s *EmailLabel) GetLabelListVisibility() OptString {
	return s.LabelListVisibility
}

// GetMessageListVisibility returns the value of MessageListVisibility.
func (s *EmailLabel) GetMessageListVisibility() OptString {
	return s.MessageListVisibility
}

// GetMessagesTotal returns the value of MessagesTotal.
func (s *EmailLabel) GetMessagesTotal() OptInt64 {
	return s.MessagesTotal
}

// GetMessagesUnread returns the value of MessagesUnread.
func (s *EmailLabel) GetMessagesUnread() OptInt64 {
	return s.MessagesUnread
}

// GetName returns the value of Name.
func (s *EmailLabel) GetName() OptString {
	return s.Name
}

// GetThreadsTotal returns the value of ThreadsTotal.
func (s *EmailLabel) GetThreadsTotal() OptInt64 {
	return s.ThreadsTotal
}

// GetThreadsUnread returns the value of ThreadsUnread.
func (s *EmailLabel) GetThreadsUnread() OptInt64 {
	return s.ThreadsUnread
}

// GetType returns the value of Type.
func (s *EmailLabel) GetType() OptString {
	return s.Type
}

// SetHTTPStatusCode sets the value of HTTPStatusCode.
func (s *EmailLabel) SetHTTPStatusCode(val int64) {
	s.HTTPStatusCode = val
}

// SetHeader sets the value of Header.
func (s *EmailLabel) SetHeader(val EmailLabelHeader) {
	s.Header = val
}

// SetID sets the value of ID.
func (s *EmailLabel) SetID(val OptString) {
	s.ID = val
}

// SetColor sets the value of Color.
func (s *EmailLabel) SetColor(val OptEmailLabelColor) {
	s.Color = val
}

// SetLabelListVisibility sets the value of LabelListVisibility.
func (s *EmailLabel) SetLabelListVisibility(val OptString) {
	s.LabelListVisibility = val
}

// SetMessageListVisibility sets the value of MessageListVisibility.
func (s *EmailLabel) SetMessageListVisibility(val OptString) {
	s.MessageListVisibility = val
}

// SetMessagesTotal sets the value of MessagesTotal.
func (s *EmailLabel) SetMessagesTotal(val OptInt64) {
	s.MessagesTotal = val
}

// SetMessagesUnread sets the value of MessagesUnread.
func (s *EmailLabel) SetMessagesUnread(val OptInt64) {
	s.MessagesUnread = val
}

// SetName sets the value of Name.
func (s *EmailLabel) SetName(val OptString) {
	s.Name = val
}

// SetThreadsTotal sets the value of ThreadsTotal.
func (s *EmailLabel) SetThreadsTotal(val OptInt64) {
	s.ThreadsTotal = val
}

// SetThreadsUnread sets the value of ThreadsUnread.
func (s *EmailLabel) SetThreadsUnread(val OptInt64) {
	s.ThreadsUnread = val
}

// SetType sets the value of Type.
func (s *EmailLabel) SetType(val OptString) {
	s.Type = val
}

type EmailLabelColor struct {
	BackgroundColor OptString `json:"backgroundColor"`
	TextColor       OptString `json:"textColor"`
}

// GetBackgroundColor returns the value of BackgroundColor.
func (s *EmailLabelColor) GetBackgroundColor() OptString {
	return s.BackgroundColor
}

// GetTextColor returns the value of TextColor.
func (s *EmailLabelColor) GetTextColor() OptString {
	return s.TextColor
}

// SetBackgroundColor sets the value of BackgroundColor.
func (s *EmailLabelColor) SetBackgroundColor(val OptString) {
	s.BackgroundColor = val
}

// SetTextColor sets the value of TextColor.
func (s *EmailLabelColor) SetTextColor(val OptString) {
	s.TextColor = val
}

type EmailLabelHeader map[string][]string

func (s *EmailLabelHeader) init() EmailLabelHeader {
	m := *s
	if m == nil {
		m = map[string][]string{}
		*s = m
	}
	return m
}

// Ref: #
type Error struct {
	// A human-readable explanation specific to this occurrence of the problem.
	Detail OptString `json:"detail"`
	// Optional list of individual error details.
	Errors []ErrorErrorsItem `json:"errors"`
	// HTTP status code.
	Status OptInt64 `json:"status"`
}

// GetDetail returns the value of Detail.
func (s *Error) GetDetail() OptString {
	return s.Detail
}

// GetErrors returns the value of Errors.
func (s *Error) GetErrors() []ErrorErrorsItem {
	return s.Errors
}

// GetStatus returns the value of Status.
func (s *Error) GetStatus() OptInt64 {
	return s.Status
}

// SetDetail sets the value of Detail.
func (s *Error) SetDetail(val OptString) {
	s.Detail = val
}

// SetErrors sets the value of Errors.
func (s *Error) SetErrors(val []ErrorErrorsItem) {
	s.Errors = val
}

// SetStatus sets the value of Status.
func (s *Error) SetStatus(val OptInt64) {
	s.Status = val
}

type ErrorErrorsItem struct {
	// Where the error occurred, e.g. 'body.items[3].tags' or 'path.thing-id'.
	Location OptString `json:"location"`
	// Error message text.
	Message OptString `json:"message"`
	// The value at the given location.
	Value OptString `json:"value"`
}

// GetLocation returns the value of Location.
func (s *ErrorErrorsItem) GetLocation() OptString {
	return s.Location
}

// GetMessage returns the value of Message.
func (s *ErrorErrorsItem) GetMessage() OptString {
	return s.Message
}

// GetValue returns the value of Value.
func (s *ErrorErrorsItem) GetValue() OptString {
	return s.Value
}

// SetLocation sets the value of Location.
func (s *ErrorErrorsItem) SetLocation(val OptString) {
	s.Location = val
}

// SetMessage sets the value of Message.
func (s *ErrorErrorsItem) SetMessage(val OptString) {
	s.Message = val
}

// SetValue sets the value of Value.
func (s *ErrorErrorsItem) SetValue(val OptString) {
	s.Value = val
}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

// FileDeleteOK is response for FileDelete operation.
type FileDeleteOK struct{}

// Represents a stored file, independent of the storage backend.
// Ref: #/FileObject
type FileObject struct {
	// Unique identifier for the file.
	UUID OptString `json:"uuid"`
	// Which storage backend is used, e.g. 's3', 'postgres', or 'hostfiles'.
	StorageType string `json:"storage_type"`
	// UUID referencing a 'storage' record (optional).
	StorageUUID string `json:"storage_uuid"`
	// Original filename. e.g. 'photo.jpg' or 'mail.raw'.
	Name string `json:"name"`
	// MIME type, e.g. 'application/pdf' or 'message/rfc822'.
	MimeType OptString `json:"mime_type"`
	// Size in bytes.
	Size OptInt `json:"size"`
	// Optional. If storage_type='postgres', file content can be provided here (base64-encoded).
	Data OptString `json:"data"`
	// Optional. If hostfiles or s3, the path or object key. e.g. 'my-bucket/xx/uuid.pdf'.
	Path OptString `json:"path"`
	// Indicates if this file is the entire raw email.
	IsRaw OptBool `json:"is_raw"`
	// Raw headers if needed (for emails or similar).
	RawHeaders OptString `json:"raw_headers"`
	// Indicates whether the raw email is contained in this file.
	HasRawEmail OptBool `json:"has_raw_email"`
	// Indicates if this is an inline/embedded file (e.g. images in HTML emails).
	IsInline OptBool `json:"is_inline"`
	// Timestamp when the file was created.
	CreatedAt OptDateTime `json:"created_at"`
	// Timestamp when the file was last modified.
	UpdatedAt OptDateTime `json:"updated_at"`
}

// GetUUID returns the value of UUID.
func (s *FileObject) GetUUID() OptString {
	return s.UUID
}

// GetStorageType returns the value of StorageType.
func (s *FileObject) GetStorageType() string {
	return s.StorageType
}

// GetStorageUUID returns the value of StorageUUID.
func (s *FileObject) GetStorageUUID() string {
	return s.StorageUUID
}

// GetName returns the value of Name.
func (s *FileObject) GetName() string {
	return s.Name
}

// GetMimeType returns the value of MimeType.
func (s *FileObject) GetMimeType() OptString {
	return s.MimeType
}

// GetSize returns the value of Size.
func (s *FileObject) GetSize() OptInt {
	return s.Size
}

// GetData returns the value of Data.
func (s *FileObject) GetData() OptString {
	return s.Data
}

// GetPath returns the value of Path.
func (s *FileObject) GetPath() OptString {
	return s.Path
}

// GetIsRaw returns the value of IsRaw.
func (s *FileObject) GetIsRaw() OptBool {
	return s.IsRaw
}

// GetRawHeaders returns the value of RawHeaders.
func (s *FileObject) GetRawHeaders() OptString {
	return s.RawHeaders
}

// GetHasRawEmail returns the value of HasRawEmail.
func (s *FileObject) GetHasRawEmail() OptBool {
	return s.HasRawEmail
}

// GetIsInline returns the value of IsInline.
func (s *FileObject) GetIsInline() OptBool {
	return s.IsInline
}

// GetCreatedAt returns the value of CreatedAt.
func (s *FileObject) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *FileObject) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// SetUUID sets the value of UUID.
func (s *FileObject) SetUUID(val OptString) {
	s.UUID = val
}

// SetStorageType sets the value of StorageType.
func (s *FileObject) SetStorageType(val string) {
	s.StorageType = val
}

// SetStorageUUID sets the value of StorageUUID.
func (s *FileObject) SetStorageUUID(val string) {
	s.StorageUUID = val
}

// SetName sets the value of Name.
func (s *FileObject) SetName(val string) {
	s.Name = val
}

// SetMimeType sets the value of MimeType.
func (s *FileObject) SetMimeType(val OptString) {
	s.MimeType = val
}

// SetSize sets the value of Size.
func (s *FileObject) SetSize(val OptInt) {
	s.Size = val
}

// SetData sets the value of Data.
func (s *FileObject) SetData(val OptString) {
	s.Data = val
}

// SetPath sets the value of Path.
func (s *FileObject) SetPath(val OptString) {
	s.Path = val
}

// SetIsRaw sets the value of IsRaw.
func (s *FileObject) SetIsRaw(val OptBool) {
	s.IsRaw = val
}

// SetRawHeaders sets the value of RawHeaders.
func (s *FileObject) SetRawHeaders(val OptString) {
	s.RawHeaders = val
}

// SetHasRawEmail sets the value of HasRawEmail.
func (s *FileObject) SetHasRawEmail(val OptBool) {
	s.HasRawEmail = val
}

// SetIsInline sets the value of IsInline.
func (s *FileObject) SetIsInline(val OptBool) {
	s.IsInline = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *FileObject) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *FileObject) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

type FileUpdateReq struct {
	// Updated name of the file.
	Name string `json:"name"`
}

// GetName returns the value of Name.
func (s *FileUpdateReq) GetName() string {
	return s.Name
}

// SetName sets the value of Name.
func (s *FileUpdateReq) SetName(val string) {
	s.Name = val
}

// Request to generate a download link.
// Ref: #/GenerateDownloadLinkRequest
type GenerateDownloadLinkRequest struct {
	FileUUID OptString `json:"file_uuid"`
	// Expiration time in seconds for the download link.
	Expiration OptInt `json:"expiration"`
}

// GetFileUUID returns the value of FileUUID.
func (s *GenerateDownloadLinkRequest) GetFileUUID() OptString {
	return s.FileUUID
}

// GetExpiration returns the value of Expiration.
func (s *GenerateDownloadLinkRequest) GetExpiration() OptInt {
	return s.Expiration
}

// SetFileUUID sets the value of FileUUID.
func (s *GenerateDownloadLinkRequest) SetFileUUID(val OptString) {
	s.FileUUID = val
}

// SetExpiration sets the value of Expiration.
func (s *GenerateDownloadLinkRequest) SetExpiration(val OptInt) {
	s.Expiration = val
}

// Response containing a signed download link.
// Ref: #/GenerateDownloadLinkResponse
type GenerateDownloadLinkResponse struct {
	// Signed URL for downloading the file.
	URL OptString `json:"url"`
}

// GetURL returns the value of URL.
func (s *GenerateDownloadLinkResponse) GetURL() OptString {
	return s.URL
}

// SetURL sets the value of URL.
func (s *GenerateDownloadLinkResponse) SetURL(val OptString) {
	s.URL = val
}

// Ref: #
type Message struct {
	// Unique identifier for the message.
	UUID OptString `json:"uuid"`
	// Data source or platform the message originated from - email, whatsapp, telegram, linkedin, custom.
	Type string `json:"type"`
	// Specifies the type or classification of the message - text, media, system, notification,
	// attachment, invite, event, call.
	Format string `json:"format"`
	// ID of the chat/conversation this message belongs to.
	ChatUUID OptString `json:"chat_uuid"`
	// ID of a sub-thread if this message is part of a threaded conversation.
	ThreadUUID OptString `json:"thread_uuid"`
	// Original system's message ID (e.g., Gmail 'messageId').
	ExternalMessageID OptString `json:"external_message_id"`
	// Identifier of the user or account sending the message.
	Sender string `json:"sender"`
	// List of users or accounts receiving the message (e.g., To, CC).
	Recipients []string `json:"recipients"`
	// Subject or title of the message (applicable to emails or similar).
	Subject OptString `json:"subject"`
	// Text content or body of the message.
	Body       string               `json:"body"`
	BodyParsed OptMessageBodyParsed `json:"body_parsed"`
	// Collection of reactions (e.g., likes, emojis) applied to this message.
	Reactions OptMessageReactions `json:"reactions"`
	// List of file attachments associated with this message.
	Attachments []FileObject `json:"attachments"`
	// ID or handle of the original sender if this message is forwarded.
	ForwardFrom OptString `json:"forward_from"`
	// ID of the message this one is directly replying to, if any.
	ReplyToMessageUUID OptString `json:"reply_to_message_uuid"`
	// ID of the original chat if this message is forwarded.
	ForwardFromChatUUID OptString `json:"forward_from_chat_uuid"`
	// ID of the original message if this is forwarded.
	ForwardFromMessageUUID OptString `json:"forward_from_message_uuid"`
	// Additional context or metadata about the forwarded message.
	ForwardMeta OptMessageForwardMeta `json:"forward_meta"`
	Meta        OptMessageMeta        `json:"meta"`
	// The date and time when the object was created.
	CreatedAt OptDateTime `json:"created_at"`
	// The date and time when the message was last updated.
	UpdatedAt OptDateTime `json:"updated_at"`
}

// GetUUID returns the value of UUID.
func (s *Message) GetUUID() OptString {
	return s.UUID
}

// GetType returns the value of Type.
func (s *Message) GetType() string {
	return s.Type
}

// GetFormat returns the value of Format.
func (s *Message) GetFormat() string {
	return s.Format
}

// GetChatUUID returns the value of ChatUUID.
func (s *Message) GetChatUUID() OptString {
	return s.ChatUUID
}

// GetThreadUUID returns the value of ThreadUUID.
func (s *Message) GetThreadUUID() OptString {
	return s.ThreadUUID
}

// GetExternalMessageID returns the value of ExternalMessageID.
func (s *Message) GetExternalMessageID() OptString {
	return s.ExternalMessageID
}

// GetSender returns the value of Sender.
func (s *Message) GetSender() string {
	return s.Sender
}

// GetRecipients returns the value of Recipients.
func (s *Message) GetRecipients() []string {
	return s.Recipients
}

// GetSubject returns the value of Subject.
func (s *Message) GetSubject() OptString {
	return s.Subject
}

// GetBody returns the value of Body.
func (s *Message) GetBody() string {
	return s.Body
}

// GetBodyParsed returns the value of BodyParsed.
func (s *Message) GetBodyParsed() OptMessageBodyParsed {
	return s.BodyParsed
}

// GetReactions returns the value of Reactions.
func (s *Message) GetReactions() OptMessageReactions {
	return s.Reactions
}

// GetAttachments returns the value of Attachments.
func (s *Message) GetAttachments() []FileObject {
	return s.Attachments
}

// GetForwardFrom returns the value of ForwardFrom.
func (s *Message) GetForwardFrom() OptString {
	return s.ForwardFrom
}

// GetReplyToMessageUUID returns the value of ReplyToMessageUUID.
func (s *Message) GetReplyToMessageUUID() OptString {
	return s.ReplyToMessageUUID
}

// GetForwardFromChatUUID returns the value of ForwardFromChatUUID.
func (s *Message) GetForwardFromChatUUID() OptString {
	return s.ForwardFromChatUUID
}

// GetForwardFromMessageUUID returns the value of ForwardFromMessageUUID.
func (s *Message) GetForwardFromMessageUUID() OptString {
	return s.ForwardFromMessageUUID
}

// GetForwardMeta returns the value of ForwardMeta.
func (s *Message) GetForwardMeta() OptMessageForwardMeta {
	return s.ForwardMeta
}

// GetMeta returns the value of Meta.
func (s *Message) GetMeta() OptMessageMeta {
	return s.Meta
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Message) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Message) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// SetUUID sets the value of UUID.
func (s *Message) SetUUID(val OptString) {
	s.UUID = val
}

// SetType sets the value of Type.
func (s *Message) SetType(val string) {
	s.Type = val
}

// SetFormat sets the value of Format.
func (s *Message) SetFormat(val string) {
	s.Format = val
}

// SetChatUUID sets the value of ChatUUID.
func (s *Message) SetChatUUID(val OptString) {
	s.ChatUUID = val
}

// SetThreadUUID sets the value of ThreadUUID.
func (s *Message) SetThreadUUID(val OptString) {
	s.ThreadUUID = val
}

// SetExternalMessageID sets the value of ExternalMessageID.
func (s *Message) SetExternalMessageID(val OptString) {
	s.ExternalMessageID = val
}

// SetSender sets the value of Sender.
func (s *Message) SetSender(val string) {
	s.Sender = val
}

// SetRecipients sets the value of Recipients.
func (s *Message) SetRecipients(val []string) {
	s.Recipients = val
}

// SetSubject sets the value of Subject.
func (s *Message) SetSubject(val OptString) {
	s.Subject = val
}

// SetBody sets the value of Body.
func (s *Message) SetBody(val string) {
	s.Body = val
}

// SetBodyParsed sets the value of BodyParsed.
func (s *Message) SetBodyParsed(val OptMessageBodyParsed) {
	s.BodyParsed = val
}

// SetReactions sets the value of Reactions.
func (s *Message) SetReactions(val OptMessageReactions) {
	s.Reactions = val
}

// SetAttachments sets the value of Attachments.
func (s *Message) SetAttachments(val []FileObject) {
	s.Attachments = val
}

// SetForwardFrom sets the value of ForwardFrom.
func (s *Message) SetForwardFrom(val OptString) {
	s.ForwardFrom = val
}

// SetReplyToMessageUUID sets the value of ReplyToMessageUUID.
func (s *Message) SetReplyToMessageUUID(val OptString) {
	s.ReplyToMessageUUID = val
}

// SetForwardFromChatUUID sets the value of ForwardFromChatUUID.
func (s *Message) SetForwardFromChatUUID(val OptString) {
	s.ForwardFromChatUUID = val
}

// SetForwardFromMessageUUID sets the value of ForwardFromMessageUUID.
func (s *Message) SetForwardFromMessageUUID(val OptString) {
	s.ForwardFromMessageUUID = val
}

// SetForwardMeta sets the value of ForwardMeta.
func (s *Message) SetForwardMeta(val OptMessageForwardMeta) {
	s.ForwardMeta = val
}

// SetMeta sets the value of Meta.
func (s *Message) SetMeta(val OptMessageMeta) {
	s.Meta = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Message) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Message) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// Ref: #
type MessageBodyParsed struct {
	// Plain text representation of the subject.
	SubjectText OptString `json:"subject_text"`
	// Slate.js JSON representation of the subject.
	SubjectSlate OptMessageBodyParsedSubjectSlate `json:"subject_slate"`
	// Plain text representation of the body.
	BodyText string `json:"body_text"`
	// Binary representation of the body (e.g., base64-encoded rich content).
	BodyByte []byte `json:"body_byte"`
	// Slate.js JSON representation of the message body.
	BodySlate OptMessageBodyParsedBodySlate `json:"body_slate"`
}

// GetSubjectText returns the value of SubjectText.
func (s *MessageBodyParsed) GetSubjectText() OptString {
	return s.SubjectText
}

// GetSubjectSlate returns the value of SubjectSlate.
func (s *MessageBodyParsed) GetSubjectSlate() OptMessageBodyParsedSubjectSlate {
	return s.SubjectSlate
}

// GetBodyText returns the value of BodyText.
func (s *MessageBodyParsed) GetBodyText() string {
	return s.BodyText
}

// GetBodyByte returns the value of BodyByte.
func (s *MessageBodyParsed) GetBodyByte() []byte {
	return s.BodyByte
}

// GetBodySlate returns the value of BodySlate.
func (s *MessageBodyParsed) GetBodySlate() OptMessageBodyParsedBodySlate {
	return s.BodySlate
}

// SetSubjectText sets the value of SubjectText.
func (s *MessageBodyParsed) SetSubjectText(val OptString) {
	s.SubjectText = val
}

// SetSubjectSlate sets the value of SubjectSlate.
func (s *MessageBodyParsed) SetSubjectSlate(val OptMessageBodyParsedSubjectSlate) {
	s.SubjectSlate = val
}

// SetBodyText sets the value of BodyText.
func (s *MessageBodyParsed) SetBodyText(val string) {
	s.BodyText = val
}

// SetBodyByte sets the value of BodyByte.
func (s *MessageBodyParsed) SetBodyByte(val []byte) {
	s.BodyByte = val
}

// SetBodySlate sets the value of BodySlate.
func (s *MessageBodyParsed) SetBodySlate(val OptMessageBodyParsedBodySlate) {
	s.BodySlate = val
}

// Slate.js JSON representation of the message body.
type MessageBodyParsedBodySlate map[string]jx.Raw

func (s *MessageBodyParsedBodySlate) init() MessageBodyParsedBodySlate {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Slate.js JSON representation of the subject.
type MessageBodyParsedSubjectSlate map[string]jx.Raw

func (s *MessageBodyParsedSubjectSlate) init() MessageBodyParsedSubjectSlate {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type MessageEmailQueryOK struct {
	// List of messages matching the query.
	Messages []Message `json:"messages"`
}

// GetMessages returns the value of Messages.
func (s *MessageEmailQueryOK) GetMessages() []Message {
	return s.Messages
}

// SetMessages sets the value of Messages.
func (s *MessageEmailQueryOK) SetMessages(val []Message) {
	s.Messages = val
}

// Additional context or metadata about the forwarded message.
type MessageForwardMeta map[string]jx.Raw

func (s *MessageForwardMeta) init() MessageForwardMeta {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type MessageLinkedinQueryOK struct {
	// List of messages matching the query.
	Messages []Message `json:"messages"`
}

// GetMessages returns the value of Messages.
func (s *MessageLinkedinQueryOK) GetMessages() []Message {
	return s.Messages
}

// SetMessages sets the value of Messages.
func (s *MessageLinkedinQueryOK) SetMessages(val []Message) {
	s.Messages = val
}

// Ref: #
type MessageMeta struct {
	// Indicates whether this message has a complete raw email stored as an attachment (with FileObject.
	// is_raw=true).
	HasRawEmail OptBool `json:"has_raw_email"`
	// Optional flag indicating if it's inbound (true) or outbound (false).
	IsIncoming OptBool `json:"is_incoming"`
}

// GetHasRawEmail returns the value of HasRawEmail.
func (s *MessageMeta) GetHasRawEmail() OptBool {
	return s.HasRawEmail
}

// GetIsIncoming returns the value of IsIncoming.
func (s *MessageMeta) GetIsIncoming() OptBool {
	return s.IsIncoming
}

// SetHasRawEmail sets the value of HasRawEmail.
func (s *MessageMeta) SetHasRawEmail(val OptBool) {
	s.HasRawEmail = val
}

// SetIsIncoming sets the value of IsIncoming.
func (s *MessageMeta) SetIsIncoming(val OptBool) {
	s.IsIncoming = val
}

// Ref: #
type MessageQuery struct {
	// Platform or data source to query from.
	Source MessageQuerySource `json:"source"`
	// Free-text or advanced operator query. E.g., 'from:', 'to:', 'subject:', 'after:', 'before:'.
	Query OptString `json:"query"`
	// ID of the chat/conversation to filter messages from.
	ChatID OptString `json:"chat_id"`
	// ID of a sub-thread within the conversation.
	ThreadID OptString `json:"thread_id"`
	// Filter messages sent after this date/time.
	StartDate OptDateTime `json:"start_date"`
	// Filter messages sent before this date/time.
	EndDate OptDateTime `json:"end_date"`
	// Sort order by timestamp ('asc' or 'desc').
	Order OptMessageQueryOrder `json:"order"`
	// Maximum number of messages to return.
	Limit OptInt `json:"limit"`
	// Number of records to skip for pagination.
	Offset OptInt `json:"offset"`
	// Specifies the storage backend for message data.
	StorageType OptMessageQueryStorageType `json:"storage_type"`
	// Enable fuzzy matching if true.
	Fuzzy OptBool `json:"fuzzy"`
}

// GetSource returns the value of Source.
func (s *MessageQuery) GetSource() MessageQuerySource {
	return s.Source
}

// GetQuery returns the value of Query.
func (s *MessageQuery) GetQuery() OptString {
	return s.Query
}

// GetChatID returns the value of ChatID.
func (s *MessageQuery) GetChatID() OptString {
	return s.ChatID
}

// GetThreadID returns the value of ThreadID.
func (s *MessageQuery) GetThreadID() OptString {
	return s.ThreadID
}

// GetStartDate returns the value of StartDate.
func (s *MessageQuery) GetStartDate() OptDateTime {
	return s.StartDate
}

// GetEndDate returns the value of EndDate.
func (s *MessageQuery) GetEndDate() OptDateTime {
	return s.EndDate
}

// GetOrder returns the value of Order.
func (s *MessageQuery) GetOrder() OptMessageQueryOrder {
	return s.Order
}

// GetLimit returns the value of Limit.
func (s *MessageQuery) GetLimit() OptInt {
	return s.Limit
}

// GetOffset returns the value of Offset.
func (s *MessageQuery) GetOffset() OptInt {
	return s.Offset
}

// GetStorageType returns the value of StorageType.
func (s *MessageQuery) GetStorageType() OptMessageQueryStorageType {
	return s.StorageType
}

// GetFuzzy returns the value of Fuzzy.
func (s *MessageQuery) GetFuzzy() OptBool {
	return s.Fuzzy
}

// SetSource sets the value of Source.
func (s *MessageQuery) SetSource(val MessageQuerySource) {
	s.Source = val
}

// SetQuery sets the value of Query.
func (s *MessageQuery) SetQuery(val OptString) {
	s.Query = val
}

// SetChatID sets the value of ChatID.
func (s *MessageQuery) SetChatID(val OptString) {
	s.ChatID = val
}

// SetThreadID sets the value of ThreadID.
func (s *MessageQuery) SetThreadID(val OptString) {
	s.ThreadID = val
}

// SetStartDate sets the value of StartDate.
func (s *MessageQuery) SetStartDate(val OptDateTime) {
	s.StartDate = val
}

// SetEndDate sets the value of EndDate.
func (s *MessageQuery) SetEndDate(val OptDateTime) {
	s.EndDate = val
}

// SetOrder sets the value of Order.
func (s *MessageQuery) SetOrder(val OptMessageQueryOrder) {
	s.Order = val
}

// SetLimit sets the value of Limit.
func (s *MessageQuery) SetLimit(val OptInt) {
	s.Limit = val
}

// SetOffset sets the value of Offset.
func (s *MessageQuery) SetOffset(val OptInt) {
	s.Offset = val
}

// SetStorageType sets the value of StorageType.
func (s *MessageQuery) SetStorageType(val OptMessageQueryStorageType) {
	s.StorageType = val
}

// SetFuzzy sets the value of Fuzzy.
func (s *MessageQuery) SetFuzzy(val OptBool) {
	s.Fuzzy = val
}

// Sort order by timestamp ('asc' or 'desc').
type MessageQueryOrder string

const (
	MessageQueryOrderAsc  MessageQueryOrder = "asc"
	MessageQueryOrderDesc MessageQueryOrder = "desc"
)

// AllValues returns all MessageQueryOrder values.
func (MessageQueryOrder) AllValues() []MessageQueryOrder {
	return []MessageQueryOrder{
		MessageQueryOrderAsc,
		MessageQueryOrderDesc,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s MessageQueryOrder) MarshalText() ([]byte, error) {
	switch s {
	case MessageQueryOrderAsc:
		return []byte(s), nil
	case MessageQueryOrderDesc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *MessageQueryOrder) UnmarshalText(data []byte) error {
	switch MessageQueryOrder(data) {
	case MessageQueryOrderAsc:
		*s = MessageQueryOrderAsc
		return nil
	case MessageQueryOrderDesc:
		*s = MessageQueryOrderDesc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Platform or data source to query from.
type MessageQuerySource string

const (
	MessageQuerySourceEmail    MessageQuerySource = "email"
	MessageQuerySourceWhatsapp MessageQuerySource = "whatsapp"
	MessageQuerySourceTelegram MessageQuerySource = "telegram"
	MessageQuerySourceLinkedin MessageQuerySource = "linkedin"
	MessageQuerySourceCustom   MessageQuerySource = "custom"
)

// AllValues returns all MessageQuerySource values.
func (MessageQuerySource) AllValues() []MessageQuerySource {
	return []MessageQuerySource{
		MessageQuerySourceEmail,
		MessageQuerySourceWhatsapp,
		MessageQuerySourceTelegram,
		MessageQuerySourceLinkedin,
		MessageQuerySourceCustom,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s MessageQuerySource) MarshalText() ([]byte, error) {
	switch s {
	case MessageQuerySourceEmail:
		return []byte(s), nil
	case MessageQuerySourceWhatsapp:
		return []byte(s), nil
	case MessageQuerySourceTelegram:
		return []byte(s), nil
	case MessageQuerySourceLinkedin:
		return []byte(s), nil
	case MessageQuerySourceCustom:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *MessageQuerySource) UnmarshalText(data []byte) error {
	switch MessageQuerySource(data) {
	case MessageQuerySourceEmail:
		*s = MessageQuerySourceEmail
		return nil
	case MessageQuerySourceWhatsapp:
		*s = MessageQuerySourceWhatsapp
		return nil
	case MessageQuerySourceTelegram:
		*s = MessageQuerySourceTelegram
		return nil
	case MessageQuerySourceLinkedin:
		*s = MessageQuerySourceLinkedin
		return nil
	case MessageQuerySourceCustom:
		*s = MessageQuerySourceCustom
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Specifies the storage backend for message data.
type MessageQueryStorageType string

const (
	MessageQueryStorageTypePostgres  MessageQueryStorageType = "postgres"
	MessageQueryStorageTypeS3        MessageQueryStorageType = "s3"
	MessageQueryStorageTypeHostfiles MessageQueryStorageType = "hostfiles"
)

// AllValues returns all MessageQueryStorageType values.
func (MessageQueryStorageType) AllValues() []MessageQueryStorageType {
	return []MessageQueryStorageType{
		MessageQueryStorageTypePostgres,
		MessageQueryStorageTypeS3,
		MessageQueryStorageTypeHostfiles,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s MessageQueryStorageType) MarshalText() ([]byte, error) {
	switch s {
	case MessageQueryStorageTypePostgres:
		return []byte(s), nil
	case MessageQueryStorageTypeS3:
		return []byte(s), nil
	case MessageQueryStorageTypeHostfiles:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *MessageQueryStorageType) UnmarshalText(data []byte) error {
	switch MessageQueryStorageType(data) {
	case MessageQueryStorageTypePostgres:
		*s = MessageQueryStorageTypePostgres
		return nil
	case MessageQueryStorageTypeS3:
		*s = MessageQueryStorageTypeS3
		return nil
	case MessageQueryStorageTypeHostfiles:
		*s = MessageQueryStorageTypeHostfiles
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Collection of reactions (e.g., likes, emojis) applied to this message.
type MessageReactions map[string]int

func (s *MessageReactions) init() MessageReactions {
	m := *s
	if m == nil {
		m = map[string]int{}
		*s = m
	}
	return m
}

type MessageTelegramQueryOK struct {
	// List of messages matching the query.
	Messages []Message `json:"messages"`
}

// GetMessages returns the value of Messages.
func (s *MessageTelegramQueryOK) GetMessages() []Message {
	return s.Messages
}

// SetMessages sets the value of Messages.
func (s *MessageTelegramQueryOK) SetMessages(val []Message) {
	s.Messages = val
}

type MessageWhatsappQueryOK struct {
	// List of messages matching the query.
	Messages []Message `json:"messages"`
}

// GetMessages returns the value of Messages.
func (s *MessageWhatsappQueryOK) GetMessages() []Message {
	return s.Messages
}

// SetMessages sets the value of Messages.
func (s *MessageWhatsappQueryOK) SetMessages(val []Message) {
	s.Messages = val
}

// Ref: #
type OAuth2Client struct {
	ID        string    `json:"id"`
	Name      string    `json:"name"`
	Provider  string    `json:"provider"`
	Secret    string    `json:"secret"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *OAuth2Client) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *OAuth2Client) GetName() string {
	return s.Name
}

// GetProvider returns the value of Provider.
func (s *OAuth2Client) GetProvider() string {
	return s.Provider
}

// GetSecret returns the value of Secret.
func (s *OAuth2Client) GetSecret() string {
	return s.Secret
}

// GetCreatedAt returns the value of CreatedAt.
func (s *OAuth2Client) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *OAuth2Client) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *OAuth2Client) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *OAuth2Client) SetName(val string) {
	s.Name = val
}

// SetProvider sets the value of Provider.
func (s *OAuth2Client) SetProvider(val string) {
	s.Provider = val
}

// SetSecret sets the value of Secret.
func (s *OAuth2Client) SetSecret(val string) {
	s.Secret = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *OAuth2Client) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *OAuth2Client) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// OAuth2ClientCallbackFound is response for OAuth2ClientCallback operation.
type OAuth2ClientCallbackFound struct {
	Location OptURI
}

// GetLocation returns the value of Location.
func (s *OAuth2ClientCallbackFound) GetLocation() OptURI {
	return s.Location
}

// SetLocation sets the value of Location.
func (s *OAuth2ClientCallbackFound) SetLocation(val OptURI) {
	s.Location = val
}

type OAuth2ClientCreateReq struct {
	// ID of the client.
	ID string `json:"id"`
	// Name of the client.
	Name string `json:"name"`
	// Provider of the client.
	Provider string `json:"provider"`
	// Secret of the client.
	Secret string `json:"secret"`
}

// GetID returns the value of ID.
func (s *OAuth2ClientCreateReq) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *OAuth2ClientCreateReq) GetName() string {
	return s.Name
}

// GetProvider returns the value of Provider.
func (s *OAuth2ClientCreateReq) GetProvider() string {
	return s.Provider
}

// GetSecret returns the value of Secret.
func (s *OAuth2ClientCreateReq) GetSecret() string {
	return s.Secret
}

// SetID sets the value of ID.
func (s *OAuth2ClientCreateReq) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *OAuth2ClientCreateReq) SetName(val string) {
	s.Name = val
}

// SetProvider sets the value of Provider.
func (s *OAuth2ClientCreateReq) SetProvider(val string) {
	s.Provider = val
}

// SetSecret sets the value of Secret.
func (s *OAuth2ClientCreateReq) SetSecret(val string) {
	s.Secret = val
}

// OAuth2ClientDeleteOK is response for OAuth2ClientDelete operation.
type OAuth2ClientDeleteOK struct{}

type OAuth2ClientListOK struct {
	// List of OAuth2 clients.
	Clients []OAuth2Client `json:"clients"`
}

// GetClients returns the value of Clients.
func (s *OAuth2ClientListOK) GetClients() []OAuth2Client {
	return s.Clients
}

// SetClients sets the value of Clients.
func (s *OAuth2ClientListOK) SetClients(val []OAuth2Client) {
	s.Clients = val
}

type OAuth2ClientLoginOK struct {
	// Auth code URL.
	AuthCodeURL string `json:"auth_code_url"`
}

// GetAuthCodeURL returns the value of AuthCodeURL.
func (s *OAuth2ClientLoginOK) GetAuthCodeURL() string {
	return s.AuthCodeURL
}

// SetAuthCodeURL sets the value of AuthCodeURL.
func (s *OAuth2ClientLoginOK) SetAuthCodeURL(val string) {
	s.AuthCodeURL = val
}

type OAuth2ClientLoginReq struct {
	// Client ID.
	ClientID string `json:"client_id"`
	// Query parameters.
	Query OAuth2ClientLoginReqQuery `json:"query"`
}

// GetClientID returns the value of ClientID.
func (s *OAuth2ClientLoginReq) GetClientID() string {
	return s.ClientID
}

// GetQuery returns the value of Query.
func (s *OAuth2ClientLoginReq) GetQuery() OAuth2ClientLoginReqQuery {
	return s.Query
}

// SetClientID sets the value of ClientID.
func (s *OAuth2ClientLoginReq) SetClientID(val string) {
	s.ClientID = val
}

// SetQuery sets the value of Query.
func (s *OAuth2ClientLoginReq) SetQuery(val OAuth2ClientLoginReqQuery) {
	s.Query = val
}

// Query parameters.
type OAuth2ClientLoginReqQuery map[string][]string

func (s *OAuth2ClientLoginReqQuery) init() OAuth2ClientLoginReqQuery {
	m := *s
	if m == nil {
		m = map[string][]string{}
		*s = m
	}
	return m
}

// Ref: #
type OAuth2ClientToken struct {
	UUID      string    `json:"uuid"`
	ClientID  string    `json:"client_id"`
	Name      string    `json:"name"`
	Token     string    `json:"token"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

// GetUUID returns the value of UUID.
func (s *OAuth2ClientToken) GetUUID() string {
	return s.UUID
}

// GetClientID returns the value of ClientID.
func (s *OAuth2ClientToken) GetClientID() string {
	return s.ClientID
}

// GetName returns the value of Name.
func (s *OAuth2ClientToken) GetName() string {
	return s.Name
}

// GetToken returns the value of Token.
func (s *OAuth2ClientToken) GetToken() string {
	return s.Token
}

// GetCreatedAt returns the value of CreatedAt.
func (s *OAuth2ClientToken) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *OAuth2ClientToken) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// SetUUID sets the value of UUID.
func (s *OAuth2ClientToken) SetUUID(val string) {
	s.UUID = val
}

// SetClientID sets the value of ClientID.
func (s *OAuth2ClientToken) SetClientID(val string) {
	s.ClientID = val
}

// SetName sets the value of Name.
func (s *OAuth2ClientToken) SetName(val string) {
	s.Name = val
}

// SetToken sets the value of Token.
func (s *OAuth2ClientToken) SetToken(val string) {
	s.Token = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *OAuth2ClientToken) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *OAuth2ClientToken) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// OAuth2ClientTokenDeleteOK is response for OAuth2ClientTokenDelete operation.
type OAuth2ClientTokenDeleteOK struct{}

type OAuth2ClientUpdateReq struct {
	// Name of the client.
	Name string `json:"name"`
	// Provider of the client.
	Provider string `json:"provider"`
	// Secret of the client.
	Secret string `json:"secret"`
}

// GetName returns the value of Name.
func (s *OAuth2ClientUpdateReq) GetName() string {
	return s.Name
}

// GetProvider returns the value of Provider.
func (s *OAuth2ClientUpdateReq) GetProvider() string {
	return s.Provider
}

// GetSecret returns the value of Secret.
func (s *OAuth2ClientUpdateReq) GetSecret() string {
	return s.Secret
}

// SetName sets the value of Name.
func (s *OAuth2ClientUpdateReq) SetName(val string) {
	s.Name = val
}

// SetProvider sets the value of Provider.
func (s *OAuth2ClientUpdateReq) SetProvider(val string) {
	s.Provider = val
}

// SetSecret sets the value of Secret.
func (s *OAuth2ClientUpdateReq) SetSecret(val string) {
	s.Secret = val
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatasourceLinkedinSettings returns new OptDatasourceLinkedinSettings with value set to v.
func NewOptDatasourceLinkedinSettings(v DatasourceLinkedinSettings) OptDatasourceLinkedinSettings {
	return OptDatasourceLinkedinSettings{
		Value: v,
		Set:   true,
	}
}

// OptDatasourceLinkedinSettings is optional DatasourceLinkedinSettings.
type OptDatasourceLinkedinSettings struct {
	Value DatasourceLinkedinSettings
	Set   bool
}

// IsSet returns true if OptDatasourceLinkedinSettings was set.
func (o OptDatasourceLinkedinSettings) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatasourceLinkedinSettings) Reset() {
	var v DatasourceLinkedinSettings
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatasourceLinkedinSettings) SetTo(v DatasourceLinkedinSettings) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatasourceLinkedinSettings) Get() (v DatasourceLinkedinSettings, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatasourceLinkedinSettings) Or(d DatasourceLinkedinSettings) DatasourceLinkedinSettings {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatasourceTelegramMeta returns new OptDatasourceTelegramMeta with value set to v.
func NewOptDatasourceTelegramMeta(v DatasourceTelegramMeta) OptDatasourceTelegramMeta {
	return OptDatasourceTelegramMeta{
		Value: v,
		Set:   true,
	}
}

// OptDatasourceTelegramMeta is optional DatasourceTelegramMeta.
type OptDatasourceTelegramMeta struct {
	Value DatasourceTelegramMeta
	Set   bool
}

// IsSet returns true if OptDatasourceTelegramMeta was set.
func (o OptDatasourceTelegramMeta) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatasourceTelegramMeta) Reset() {
	var v DatasourceTelegramMeta
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatasourceTelegramMeta) SetTo(v DatasourceTelegramMeta) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatasourceTelegramMeta) Get() (v DatasourceTelegramMeta, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatasourceTelegramMeta) Or(d DatasourceTelegramMeta) DatasourceTelegramMeta {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatasourceTelegramSettings returns new OptDatasourceTelegramSettings with value set to v.
func NewOptDatasourceTelegramSettings(v DatasourceTelegramSettings) OptDatasourceTelegramSettings {
	return OptDatasourceTelegramSettings{
		Value: v,
		Set:   true,
	}
}

// OptDatasourceTelegramSettings is optional DatasourceTelegramSettings.
type OptDatasourceTelegramSettings struct {
	Value DatasourceTelegramSettings
	Set   bool
}

// IsSet returns true if OptDatasourceTelegramSettings was set.
func (o OptDatasourceTelegramSettings) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatasourceTelegramSettings) Reset() {
	var v DatasourceTelegramSettings
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatasourceTelegramSettings) SetTo(v DatasourceTelegramSettings) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatasourceTelegramSettings) Get() (v DatasourceTelegramSettings, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatasourceTelegramSettings) Or(d DatasourceTelegramSettings) DatasourceTelegramSettings {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatasourceWhatsappSettings returns new OptDatasourceWhatsappSettings with value set to v.
func NewOptDatasourceWhatsappSettings(v DatasourceWhatsappSettings) OptDatasourceWhatsappSettings {
	return OptDatasourceWhatsappSettings{
		Value: v,
		Set:   true,
	}
}

// OptDatasourceWhatsappSettings is optional DatasourceWhatsappSettings.
type OptDatasourceWhatsappSettings struct {
	Value DatasourceWhatsappSettings
	Set   bool
}

// IsSet returns true if OptDatasourceWhatsappSettings was set.
func (o OptDatasourceWhatsappSettings) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatasourceWhatsappSettings) Reset() {
	var v DatasourceWhatsappSettings
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatasourceWhatsappSettings) SetTo(v DatasourceWhatsappSettings) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatasourceWhatsappSettings) Get() (v DatasourceWhatsappSettings, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatasourceWhatsappSettings) Or(d DatasourceWhatsappSettings) DatasourceWhatsappSettings {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEmailLabelColor returns new OptEmailLabelColor with value set to v.
func NewOptEmailLabelColor(v EmailLabelColor) OptEmailLabelColor {
	return OptEmailLabelColor{
		Value: v,
		Set:   true,
	}
}

// OptEmailLabelColor is optional EmailLabelColor.
type OptEmailLabelColor struct {
	Value EmailLabelColor
	Set   bool
}

// IsSet returns true if OptEmailLabelColor was set.
func (o OptEmailLabelColor) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEmailLabelColor) Reset() {
	var v EmailLabelColor
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEmailLabelColor) SetTo(v EmailLabelColor) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEmailLabelColor) Get() (v EmailLabelColor, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEmailLabelColor) Or(d EmailLabelColor) EmailLabelColor {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFileObject returns new OptFileObject with value set to v.
func NewOptFileObject(v FileObject) OptFileObject {
	return OptFileObject{
		Value: v,
		Set:   true,
	}
}

// OptFileObject is optional FileObject.
type OptFileObject struct {
	Value FileObject
	Set   bool
}

// IsSet returns true if OptFileObject was set.
func (o OptFileObject) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFileObject) Reset() {
	var v FileObject
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFileObject) SetTo(v FileObject) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFileObject) Get() (v FileObject, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFileObject) Or(d FileObject) FileObject {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat64 returns new OptFloat64 with value set to v.
func NewOptFloat64(v float64) OptFloat64 {
	return OptFloat64{
		Value: v,
		Set:   true,
	}
}

// OptFloat64 is optional float64.
type OptFloat64 struct {
	Value float64
	Set   bool
}

// IsSet returns true if OptFloat64 was set.
func (o OptFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat64) SetTo(v float64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat64) Get() (v float64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt32 returns new OptInt32 with value set to v.
func NewOptInt32(v int32) OptInt32 {
	return OptInt32{
		Value: v,
		Set:   true,
	}
}

// OptInt32 is optional int32.
type OptInt32 struct {
	Value int32
	Set   bool
}

// IsSet returns true if OptInt32 was set.
func (o OptInt32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt32) Reset() {
	var v int32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt32) SetTo(v int32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt32) Get() (v int32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt32) Or(d int32) int32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt64 returns new OptInt64 with value set to v.
func NewOptInt64(v int64) OptInt64 {
	return OptInt64{
		Value: v,
		Set:   true,
	}
}

// OptInt64 is optional int64.
type OptInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptInt64 was set.
func (o OptInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMessageBodyParsed returns new OptMessageBodyParsed with value set to v.
func NewOptMessageBodyParsed(v MessageBodyParsed) OptMessageBodyParsed {
	return OptMessageBodyParsed{
		Value: v,
		Set:   true,
	}
}

// OptMessageBodyParsed is optional MessageBodyParsed.
type OptMessageBodyParsed struct {
	Value MessageBodyParsed
	Set   bool
}

// IsSet returns true if OptMessageBodyParsed was set.
func (o OptMessageBodyParsed) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMessageBodyParsed) Reset() {
	var v MessageBodyParsed
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMessageBodyParsed) SetTo(v MessageBodyParsed) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMessageBodyParsed) Get() (v MessageBodyParsed, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMessageBodyParsed) Or(d MessageBodyParsed) MessageBodyParsed {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMessageBodyParsedBodySlate returns new OptMessageBodyParsedBodySlate with value set to v.
func NewOptMessageBodyParsedBodySlate(v MessageBodyParsedBodySlate) OptMessageBodyParsedBodySlate {
	return OptMessageBodyParsedBodySlate{
		Value: v,
		Set:   true,
	}
}

// OptMessageBodyParsedBodySlate is optional MessageBodyParsedBodySlate.
type OptMessageBodyParsedBodySlate struct {
	Value MessageBodyParsedBodySlate
	Set   bool
}

// IsSet returns true if OptMessageBodyParsedBodySlate was set.
func (o OptMessageBodyParsedBodySlate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMessageBodyParsedBodySlate) Reset() {
	var v MessageBodyParsedBodySlate
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMessageBodyParsedBodySlate) SetTo(v MessageBodyParsedBodySlate) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMessageBodyParsedBodySlate) Get() (v MessageBodyParsedBodySlate, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMessageBodyParsedBodySlate) Or(d MessageBodyParsedBodySlate) MessageBodyParsedBodySlate {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMessageBodyParsedSubjectSlate returns new OptMessageBodyParsedSubjectSlate with value set to v.
func NewOptMessageBodyParsedSubjectSlate(v MessageBodyParsedSubjectSlate) OptMessageBodyParsedSubjectSlate {
	return OptMessageBodyParsedSubjectSlate{
		Value: v,
		Set:   true,
	}
}

// OptMessageBodyParsedSubjectSlate is optional MessageBodyParsedSubjectSlate.
type OptMessageBodyParsedSubjectSlate struct {
	Value MessageBodyParsedSubjectSlate
	Set   bool
}

// IsSet returns true if OptMessageBodyParsedSubjectSlate was set.
func (o OptMessageBodyParsedSubjectSlate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMessageBodyParsedSubjectSlate) Reset() {
	var v MessageBodyParsedSubjectSlate
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMessageBodyParsedSubjectSlate) SetTo(v MessageBodyParsedSubjectSlate) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMessageBodyParsedSubjectSlate) Get() (v MessageBodyParsedSubjectSlate, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMessageBodyParsedSubjectSlate) Or(d MessageBodyParsedSubjectSlate) MessageBodyParsedSubjectSlate {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMessageForwardMeta returns new OptMessageForwardMeta with value set to v.
func NewOptMessageForwardMeta(v MessageForwardMeta) OptMessageForwardMeta {
	return OptMessageForwardMeta{
		Value: v,
		Set:   true,
	}
}

// OptMessageForwardMeta is optional MessageForwardMeta.
type OptMessageForwardMeta struct {
	Value MessageForwardMeta
	Set   bool
}

// IsSet returns true if OptMessageForwardMeta was set.
func (o OptMessageForwardMeta) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMessageForwardMeta) Reset() {
	var v MessageForwardMeta
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMessageForwardMeta) SetTo(v MessageForwardMeta) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMessageForwardMeta) Get() (v MessageForwardMeta, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMessageForwardMeta) Or(d MessageForwardMeta) MessageForwardMeta {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMessageMeta returns new OptMessageMeta with value set to v.
func NewOptMessageMeta(v MessageMeta) OptMessageMeta {
	return OptMessageMeta{
		Value: v,
		Set:   true,
	}
}

// OptMessageMeta is optional MessageMeta.
type OptMessageMeta struct {
	Value MessageMeta
	Set   bool
}

// IsSet returns true if OptMessageMeta was set.
func (o OptMessageMeta) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMessageMeta) Reset() {
	var v MessageMeta
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMessageMeta) SetTo(v MessageMeta) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMessageMeta) Get() (v MessageMeta, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMessageMeta) Or(d MessageMeta) MessageMeta {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMessageQueryOrder returns new OptMessageQueryOrder with value set to v.
func NewOptMessageQueryOrder(v MessageQueryOrder) OptMessageQueryOrder {
	return OptMessageQueryOrder{
		Value: v,
		Set:   true,
	}
}

// OptMessageQueryOrder is optional MessageQueryOrder.
type OptMessageQueryOrder struct {
	Value MessageQueryOrder
	Set   bool
}

// IsSet returns true if OptMessageQueryOrder was set.
func (o OptMessageQueryOrder) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMessageQueryOrder) Reset() {
	var v MessageQueryOrder
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMessageQueryOrder) SetTo(v MessageQueryOrder) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMessageQueryOrder) Get() (v MessageQueryOrder, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMessageQueryOrder) Or(d MessageQueryOrder) MessageQueryOrder {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMessageQueryStorageType returns new OptMessageQueryStorageType with value set to v.
func NewOptMessageQueryStorageType(v MessageQueryStorageType) OptMessageQueryStorageType {
	return OptMessageQueryStorageType{
		Value: v,
		Set:   true,
	}
}

// OptMessageQueryStorageType is optional MessageQueryStorageType.
type OptMessageQueryStorageType struct {
	Value MessageQueryStorageType
	Set   bool
}

// IsSet returns true if OptMessageQueryStorageType was set.
func (o OptMessageQueryStorageType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMessageQueryStorageType) Reset() {
	var v MessageQueryStorageType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMessageQueryStorageType) SetTo(v MessageQueryStorageType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMessageQueryStorageType) Get() (v MessageQueryStorageType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMessageQueryStorageType) Or(d MessageQueryStorageType) MessageQueryStorageType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMessageReactions returns new OptMessageReactions with value set to v.
func NewOptMessageReactions(v MessageReactions) OptMessageReactions {
	return OptMessageReactions{
		Value: v,
		Set:   true,
	}
}

// OptMessageReactions is optional MessageReactions.
type OptMessageReactions struct {
	Value MessageReactions
	Set   bool
}

// IsSet returns true if OptMessageReactions was set.
func (o OptMessageReactions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMessageReactions) Reset() {
	var v MessageReactions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMessageReactions) SetTo(v MessageReactions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMessageReactions) Get() (v MessageReactions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMessageReactions) Or(d MessageReactions) MessageReactions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilDateTime returns new OptNilDateTime with value set to v.
func NewOptNilDateTime(v time.Time) OptNilDateTime {
	return OptNilDateTime{
		Value: v,
		Set:   true,
	}
}

// OptNilDateTime is optional nullable time.Time.
type OptNilDateTime struct {
	Value time.Time
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilDateTime was set.
func (o OptNilDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilDateTime) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilDateTime) SetToNull() {
	o.Set = true
	o.Null = true
	var v time.Time
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilDateTime) Get() (v time.Time, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilString returns new OptNilString with value set to v.
func NewOptNilString(v string) OptNilString {
	return OptNilString{
		Value: v,
		Set:   true,
	}
}

// OptNilString is optional nullable string.
type OptNilString struct {
	Value string
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilString was set.
func (o OptNilString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilString) Reset() {
	var v string
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilString) SetTo(v string) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilString) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilString) SetToNull() {
	o.Set = true
	o.Null = true
	var v string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPipelineEdgeType returns new OptPipelineEdgeType with value set to v.
func NewOptPipelineEdgeType(v PipelineEdgeType) OptPipelineEdgeType {
	return OptPipelineEdgeType{
		Value: v,
		Set:   true,
	}
}

// OptPipelineEdgeType is optional PipelineEdgeType.
type OptPipelineEdgeType struct {
	Value PipelineEdgeType
	Set   bool
}

// IsSet returns true if OptPipelineEdgeType was set.
func (o OptPipelineEdgeType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPipelineEdgeType) Reset() {
	var v PipelineEdgeType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPipelineEdgeType) SetTo(v PipelineEdgeType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPipelineEdgeType) Get() (v PipelineEdgeType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPipelineEdgeType) Or(d PipelineEdgeType) PipelineEdgeType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPipelineFlow returns new OptPipelineFlow with value set to v.
func NewOptPipelineFlow(v PipelineFlow) OptPipelineFlow {
	return OptPipelineFlow{
		Value: v,
		Set:   true,
	}
}

// OptPipelineFlow is optional PipelineFlow.
type OptPipelineFlow struct {
	Value PipelineFlow
	Set   bool
}

// IsSet returns true if OptPipelineFlow was set.
func (o OptPipelineFlow) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPipelineFlow) Reset() {
	var v PipelineFlow
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPipelineFlow) SetTo(v PipelineFlow) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPipelineFlow) Get() (v PipelineFlow, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPipelineFlow) Or(d PipelineFlow) PipelineFlow {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPipelineNodeDataConfig returns new OptPipelineNodeDataConfig with value set to v.
func NewOptPipelineNodeDataConfig(v PipelineNodeDataConfig) OptPipelineNodeDataConfig {
	return OptPipelineNodeDataConfig{
		Value: v,
		Set:   true,
	}
}

// OptPipelineNodeDataConfig is optional PipelineNodeDataConfig.
type OptPipelineNodeDataConfig struct {
	Value PipelineNodeDataConfig
	Set   bool
}

// IsSet returns true if OptPipelineNodeDataConfig was set.
func (o OptPipelineNodeDataConfig) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPipelineNodeDataConfig) Reset() {
	var v PipelineNodeDataConfig
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPipelineNodeDataConfig) SetTo(v PipelineNodeDataConfig) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPipelineNodeDataConfig) Get() (v PipelineNodeDataConfig, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPipelineNodeDataConfig) Or(d PipelineNodeDataConfig) PipelineNodeDataConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStorageListOrderBy returns new OptStorageListOrderBy with value set to v.
func NewOptStorageListOrderBy(v StorageListOrderBy) OptStorageListOrderBy {
	return OptStorageListOrderBy{
		Value: v,
		Set:   true,
	}
}

// OptStorageListOrderBy is optional StorageListOrderBy.
type OptStorageListOrderBy struct {
	Value StorageListOrderBy
	Set   bool
}

// IsSet returns true if OptStorageListOrderBy was set.
func (o OptStorageListOrderBy) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStorageListOrderBy) Reset() {
	var v StorageListOrderBy
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStorageListOrderBy) SetTo(v StorageListOrderBy) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStorageListOrderBy) Get() (v StorageListOrderBy, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStorageListOrderBy) Or(d StorageListOrderBy) StorageListOrderBy {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStorageListOrderDirection returns new OptStorageListOrderDirection with value set to v.
func NewOptStorageListOrderDirection(v StorageListOrderDirection) OptStorageListOrderDirection {
	return OptStorageListOrderDirection{
		Value: v,
		Set:   true,
	}
}

// OptStorageListOrderDirection is optional StorageListOrderDirection.
type OptStorageListOrderDirection struct {
	Value StorageListOrderDirection
	Set   bool
}

// IsSet returns true if OptStorageListOrderDirection was set.
func (o OptStorageListOrderDirection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStorageListOrderDirection) Reset() {
	var v StorageListOrderDirection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStorageListOrderDirection) SetTo(v StorageListOrderDirection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStorageListOrderDirection) Get() (v StorageListOrderDirection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStorageListOrderDirection) Or(d StorageListOrderDirection) StorageListOrderDirection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSyncPolicySettings returns new OptSyncPolicySettings with value set to v.
func NewOptSyncPolicySettings(v SyncPolicySettings) OptSyncPolicySettings {
	return OptSyncPolicySettings{
		Value: v,
		Set:   true,
	}
}

// OptSyncPolicySettings is optional SyncPolicySettings.
type OptSyncPolicySettings struct {
	Value SyncPolicySettings
	Set   bool
}

// IsSet returns true if OptSyncPolicySettings was set.
func (o OptSyncPolicySettings) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSyncPolicySettings) Reset() {
	var v SyncPolicySettings
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSyncPolicySettings) SetTo(v SyncPolicySettings) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSyncPolicySettings) Get() (v SyncPolicySettings, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSyncPolicySettings) Or(d SyncPolicySettings) SyncPolicySettings {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTelegramParticipantsItemMeta returns new OptTelegramParticipantsItemMeta with value set to v.
func NewOptTelegramParticipantsItemMeta(v TelegramParticipantsItemMeta) OptTelegramParticipantsItemMeta {
	return OptTelegramParticipantsItemMeta{
		Value: v,
		Set:   true,
	}
}

// OptTelegramParticipantsItemMeta is optional TelegramParticipantsItemMeta.
type OptTelegramParticipantsItemMeta struct {
	Value TelegramParticipantsItemMeta
	Set   bool
}

// IsSet returns true if OptTelegramParticipantsItemMeta was set.
func (o OptTelegramParticipantsItemMeta) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTelegramParticipantsItemMeta) Reset() {
	var v TelegramParticipantsItemMeta
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTelegramParticipantsItemMeta) SetTo(v TelegramParticipantsItemMeta) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTelegramParticipantsItemMeta) Get() (v TelegramParticipantsItemMeta, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTelegramParticipantsItemMeta) Or(d TelegramParticipantsItemMeta) TelegramParticipantsItemMeta {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTelegramSessionHistoryItemMeta returns new OptTelegramSessionHistoryItemMeta with value set to v.
func NewOptTelegramSessionHistoryItemMeta(v TelegramSessionHistoryItemMeta) OptTelegramSessionHistoryItemMeta {
	return OptTelegramSessionHistoryItemMeta{
		Value: v,
		Set:   true,
	}
}

// OptTelegramSessionHistoryItemMeta is optional TelegramSessionHistoryItemMeta.
type OptTelegramSessionHistoryItemMeta struct {
	Value TelegramSessionHistoryItemMeta
	Set   bool
}

// IsSet returns true if OptTelegramSessionHistoryItemMeta was set.
func (o OptTelegramSessionHistoryItemMeta) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTelegramSessionHistoryItemMeta) Reset() {
	var v TelegramSessionHistoryItemMeta
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTelegramSessionHistoryItemMeta) SetTo(v TelegramSessionHistoryItemMeta) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTelegramSessionHistoryItemMeta) Get() (v TelegramSessionHistoryItemMeta, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTelegramSessionHistoryItemMeta) Or(d TelegramSessionHistoryItemMeta) TelegramSessionHistoryItemMeta {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptURI returns new OptURI with value set to v.
func NewOptURI(v url.URL) OptURI {
	return OptURI{
		Value: v,
		Set:   true,
	}
}

// OptURI is optional url.URL.
type OptURI struct {
	Value url.URL
	Set   bool
}

// IsSet returns true if OptURI was set.
func (o OptURI) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptURI) Reset() {
	var v url.URL
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptURI) SetTo(v url.URL) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptURI) Get() (v url.URL, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptURI) Or(d url.URL) url.URL {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUUID returns new OptUUID with value set to v.
func NewOptUUID(v uuid.UUID) OptUUID {
	return OptUUID{
		Value: v,
		Set:   true,
	}
}

// OptUUID is optional uuid.UUID.
type OptUUID struct {
	Value uuid.UUID
	Set   bool
}

// IsSet returns true if OptUUID was set.
func (o OptUUID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUUID) Reset() {
	var v uuid.UUID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUUID) SetTo(v uuid.UUID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUUID) Get() (v uuid.UUID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUUID) Or(d uuid.UUID) uuid.UUID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUploadPresignedUrlRequestStorageType returns new OptUploadPresignedUrlRequestStorageType with value set to v.
func NewOptUploadPresignedUrlRequestStorageType(v UploadPresignedUrlRequestStorageType) OptUploadPresignedUrlRequestStorageType {
	return OptUploadPresignedUrlRequestStorageType{
		Value: v,
		Set:   true,
	}
}

// OptUploadPresignedUrlRequestStorageType is optional UploadPresignedUrlRequestStorageType.
type OptUploadPresignedUrlRequestStorageType struct {
	Value UploadPresignedUrlRequestStorageType
	Set   bool
}

// IsSet returns true if OptUploadPresignedUrlRequestStorageType was set.
func (o OptUploadPresignedUrlRequestStorageType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUploadPresignedUrlRequestStorageType) Reset() {
	var v UploadPresignedUrlRequestStorageType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUploadPresignedUrlRequestStorageType) SetTo(v UploadPresignedUrlRequestStorageType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUploadPresignedUrlRequestStorageType) Get() (v UploadPresignedUrlRequestStorageType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUploadPresignedUrlRequestStorageType) Or(d UploadPresignedUrlRequestStorageType) UploadPresignedUrlRequestStorageType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserMeta returns new OptUserMeta with value set to v.
func NewOptUserMeta(v UserMeta) OptUserMeta {
	return OptUserMeta{
		Value: v,
		Set:   true,
	}
}

// OptUserMeta is optional UserMeta.
type OptUserMeta struct {
	Value UserMeta
	Set   bool
}

// IsSet returns true if OptUserMeta was set.
func (o OptUserMeta) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserMeta) Reset() {
	var v UserMeta
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserMeta) SetTo(v UserMeta) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserMeta) Get() (v UserMeta, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserMeta) Or(d UserMeta) UserMeta {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #
type Pipeline struct {
	// Unique identifier.
	UUID OptString `json:"uuid"`
	// Optional. Required for datasources based pipelines.
	DatasourceUUID string `json:"datasource_uuid"`
	// Pipeline type (email, telegram, whatsapp, linkedin) pulled from datasource_uuid.
	Type OptString `json:"type"`
	// Pipeline name.
	Name string `json:"name"`
	// Whether this pipeline is currently active.
	IsEnabled OptBool `json:"is_enabled"`
	// JSON representation of the flow (compatible with @xyflow/react).
	Flow OptPipelineFlow `json:"flow"`
	// Timestamp when the policy was created.
	CreatedAt OptDateTime `json:"created_at"`
	// Timestamp when the policy was last updated.
	UpdatedAt OptDateTime `json:"updated_at"`
}

// GetUUID returns the value of UUID.
func (s *Pipeline) GetUUID() OptString {
	return s.UUID
}

// GetDatasourceUUID returns the value of DatasourceUUID.
func (s *Pipeline) GetDatasourceUUID() string {
	return s.DatasourceUUID
}

// GetType returns the value of Type.
func (s *Pipeline) GetType() OptString {
	return s.Type
}

// GetName returns the value of Name.
func (s *Pipeline) GetName() string {
	return s.Name
}

// GetIsEnabled returns the value of IsEnabled.
func (s *Pipeline) GetIsEnabled() OptBool {
	return s.IsEnabled
}

// GetFlow returns the value of Flow.
func (s *Pipeline) GetFlow() OptPipelineFlow {
	return s.Flow
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Pipeline) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Pipeline) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// SetUUID sets the value of UUID.
func (s *Pipeline) SetUUID(val OptString) {
	s.UUID = val
}

// SetDatasourceUUID sets the value of DatasourceUUID.
func (s *Pipeline) SetDatasourceUUID(val string) {
	s.DatasourceUUID = val
}

// SetType sets the value of Type.
func (s *Pipeline) SetType(val OptString) {
	s.Type = val
}

// SetName sets the value of Name.
func (s *Pipeline) SetName(val string) {
	s.Name = val
}

// SetIsEnabled sets the value of IsEnabled.
func (s *Pipeline) SetIsEnabled(val OptBool) {
	s.IsEnabled = val
}

// SetFlow sets the value of Flow.
func (s *Pipeline) SetFlow(val OptPipelineFlow) {
	s.Flow = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Pipeline) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Pipeline) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// PipelineDeleteOK is response for PipelineDelete operation.
type PipelineDeleteOK struct{}

// Ref: #
type PipelineEdge struct {
	ID     string              `json:"id"`
	Source string              `json:"source"`
	Target string              `json:"target"`
	Type   OptPipelineEdgeType `json:"type"`
}

// GetID returns the value of ID.
func (s *PipelineEdge) GetID() string {
	return s.ID
}

// GetSource returns the value of Source.
func (s *PipelineEdge) GetSource() string {
	return s.Source
}

// GetTarget returns the value of Target.
func (s *PipelineEdge) GetTarget() string {
	return s.Target
}

// GetType returns the value of Type.
func (s *PipelineEdge) GetType() OptPipelineEdgeType {
	return s.Type
}

// SetID sets the value of ID.
func (s *PipelineEdge) SetID(val string) {
	s.ID = val
}

// SetSource sets the value of Source.
func (s *PipelineEdge) SetSource(val string) {
	s.Source = val
}

// SetTarget sets the value of Target.
func (s *PipelineEdge) SetTarget(val string) {
	s.Target = val
}

// SetType sets the value of Type.
func (s *PipelineEdge) SetType(val OptPipelineEdgeType) {
	s.Type = val
}

type PipelineEdgeType string

const (
	PipelineEdgeTypeDefault PipelineEdgeType = "default"
	PipelineEdgeTypeStep    PipelineEdgeType = "step"
)

// AllValues returns all PipelineEdgeType values.
func (PipelineEdgeType) AllValues() []PipelineEdgeType {
	return []PipelineEdgeType{
		PipelineEdgeTypeDefault,
		PipelineEdgeTypeStep,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PipelineEdgeType) MarshalText() ([]byte, error) {
	switch s {
	case PipelineEdgeTypeDefault:
		return []byte(s), nil
	case PipelineEdgeTypeStep:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PipelineEdgeType) UnmarshalText(data []byte) error {
	switch PipelineEdgeType(data) {
	case PipelineEdgeTypeDefault:
		*s = PipelineEdgeTypeDefault
		return nil
	case PipelineEdgeTypeStep:
		*s = PipelineEdgeTypeStep
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// JSON representation of the flow (compatible with @xyflow/react).
type PipelineFlow struct {
	Nodes []PipelineNode `json:"nodes"`
	Edges []PipelineEdge `json:"edges"`
}

// GetNodes returns the value of Nodes.
func (s *PipelineFlow) GetNodes() []PipelineNode {
	return s.Nodes
}

// GetEdges returns the value of Edges.
func (s *PipelineFlow) GetEdges() []PipelineEdge {
	return s.Edges
}

// SetNodes sets the value of Nodes.
func (s *PipelineFlow) SetNodes(val []PipelineNode) {
	s.Nodes = val
}

// SetEdges sets the value of Edges.
func (s *PipelineFlow) SetEdges(val []PipelineEdge) {
	s.Edges = val
}

type PipelineListOK struct {
	Pipelines []Pipeline `json:"pipelines"`
}

// GetPipelines returns the value of Pipelines.
func (s *PipelineListOK) GetPipelines() []Pipeline {
	return s.Pipelines
}

// SetPipelines sets the value of Pipelines.
func (s *PipelineListOK) SetPipelines(val []Pipeline) {
	s.Pipelines = val
}

// Ref: #
type PipelineNode struct {
	ID string `json:"id"`
	// Required. Ex datasource, extractor, filter, storage.
	Type     string               `json:"type"`
	Position PipelineNodePosition `json:"position"`
	Data     PipelineNodeData     `json:"data"`
}

// GetID returns the value of ID.
func (s *PipelineNode) GetID() string {
	return s.ID
}

// GetType returns the value of Type.
func (s *PipelineNode) GetType() string {
	return s.Type
}

// GetPosition returns the value of Position.
func (s *PipelineNode) GetPosition() PipelineNodePosition {
	return s.Position
}

// GetData returns the value of Data.
func (s *PipelineNode) GetData() PipelineNodeData {
	return s.Data
}

// SetID sets the value of ID.
func (s *PipelineNode) SetID(val string) {
	s.ID = val
}

// SetType sets the value of Type.
func (s *PipelineNode) SetType(val string) {
	s.Type = val
}

// SetPosition sets the value of Position.
func (s *PipelineNode) SetPosition(val PipelineNodePosition) {
	s.Position = val
}

// SetData sets the value of Data.
func (s *PipelineNode) SetData(val PipelineNodeData) {
	s.Data = val
}

type PipelineNodeData struct {
	Label     OptString `json:"label"`
	EntryUUID OptString `json:"entry_uuid"`
	// TODO @reactima stricter types.
	Config OptPipelineNodeDataConfig `json:"config"`
}

// GetLabel returns the value of Label.
func (s *PipelineNodeData) GetLabel() OptString {
	return s.Label
}

// GetEntryUUID returns the value of EntryUUID.
func (s *PipelineNodeData) GetEntryUUID() OptString {
	return s.EntryUUID
}

// GetConfig returns the value of Config.
func (s *PipelineNodeData) GetConfig() OptPipelineNodeDataConfig {
	return s.Config
}

// SetLabel sets the value of Label.
func (s *PipelineNodeData) SetLabel(val OptString) {
	s.Label = val
}

// SetEntryUUID sets the value of EntryUUID.
func (s *PipelineNodeData) SetEntryUUID(val OptString) {
	s.EntryUUID = val
}

// SetConfig sets the value of Config.
func (s *PipelineNodeData) SetConfig(val OptPipelineNodeDataConfig) {
	s.Config = val
}

// TODO @reactima stricter types.
type PipelineNodeDataConfig map[string]jx.Raw

func (s *PipelineNodeDataConfig) init() PipelineNodeDataConfig {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type PipelineNodePosition struct {
	X OptFloat64 `json:"x"`
	Y OptFloat64 `json:"y"`
}

// GetX returns the value of X.
func (s *PipelineNodePosition) GetX() OptFloat64 {
	return s.X
}

// GetY returns the value of Y.
func (s *PipelineNodePosition) GetY() OptFloat64 {
	return s.Y
}

// SetX sets the value of X.
func (s *PipelineNodePosition) SetX(val OptFloat64) {
	s.X = val
}

// SetY sets the value of Y.
func (s *PipelineNodePosition) SetY(val OptFloat64) {
	s.Y = val
}

// Ref: #
type Scheduler struct {
	ID             OptString      `json:"id"`
	PipelineUUID   string         `json:"pipeline_uuid"`
	ScheduleType   string         `json:"schedule_type"`
	CronExpression OptNilString   `json:"cron_expression"`
	RunAt          OptNilDateTime `json:"run_at"`
	Timezone       OptString      `json:"timezone"`
	NextRun        OptDateTime    `json:"next_run"`
	LastRun        OptDateTime    `json:"last_run"`
	IsEnabled      OptBool        `json:"is_enabled"`
	IsPaused       OptBool        `json:"is_paused"`
	CreatedAt      OptDateTime    `json:"created_at"`
	UpdatedAt      OptDateTime    `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *Scheduler) GetID() OptString {
	return s.ID
}

// GetPipelineUUID returns the value of PipelineUUID.
func (s *Scheduler) GetPipelineUUID() string {
	return s.PipelineUUID
}

// GetScheduleType returns the value of ScheduleType.
func (s *Scheduler) GetScheduleType() string {
	return s.ScheduleType
}

// GetCronExpression returns the value of CronExpression.
func (s *Scheduler) GetCronExpression() OptNilString {
	return s.CronExpression
}

// GetRunAt returns the value of RunAt.
func (s *Scheduler) GetRunAt() OptNilDateTime {
	return s.RunAt
}

// GetTimezone returns the value of Timezone.
func (s *Scheduler) GetTimezone() OptString {
	return s.Timezone
}

// GetNextRun returns the value of NextRun.
func (s *Scheduler) GetNextRun() OptDateTime {
	return s.NextRun
}

// GetLastRun returns the value of LastRun.
func (s *Scheduler) GetLastRun() OptDateTime {
	return s.LastRun
}

// GetIsEnabled returns the value of IsEnabled.
func (s *Scheduler) GetIsEnabled() OptBool {
	return s.IsEnabled
}

// GetIsPaused returns the value of IsPaused.
func (s *Scheduler) GetIsPaused() OptBool {
	return s.IsPaused
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Scheduler) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Scheduler) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *Scheduler) SetID(val OptString) {
	s.ID = val
}

// SetPipelineUUID sets the value of PipelineUUID.
func (s *Scheduler) SetPipelineUUID(val string) {
	s.PipelineUUID = val
}

// SetScheduleType sets the value of ScheduleType.
func (s *Scheduler) SetScheduleType(val string) {
	s.ScheduleType = val
}

// SetCronExpression sets the value of CronExpression.
func (s *Scheduler) SetCronExpression(val OptNilString) {
	s.CronExpression = val
}

// SetRunAt sets the value of RunAt.
func (s *Scheduler) SetRunAt(val OptNilDateTime) {
	s.RunAt = val
}

// SetTimezone sets the value of Timezone.
func (s *Scheduler) SetTimezone(val OptString) {
	s.Timezone = val
}

// SetNextRun sets the value of NextRun.
func (s *Scheduler) SetNextRun(val OptDateTime) {
	s.NextRun = val
}

// SetLastRun sets the value of LastRun.
func (s *Scheduler) SetLastRun(val OptDateTime) {
	s.LastRun = val
}

// SetIsEnabled sets the value of IsEnabled.
func (s *Scheduler) SetIsEnabled(val OptBool) {
	s.IsEnabled = val
}

// SetIsPaused sets the value of IsPaused.
func (s *Scheduler) SetIsPaused(val OptBool) {
	s.IsPaused = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Scheduler) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Scheduler) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// SchedulerDeleteOK is response for SchedulerDelete operation.
type SchedulerDeleteOK struct{}

type SessionCookieAuth struct {
	APIKey string
}

// GetAPIKey returns the value of APIKey.
func (s *SessionCookieAuth) GetAPIKey() string {
	return s.APIKey
}

// SetAPIKey sets the value of APIKey.
func (s *SessionCookieAuth) SetAPIKey(val string) {
	s.APIKey = val
}

// Data storage settings object.
// Ref: #
type Storage struct {
	// Unique identifier for the storage object.
	UUID string `json:"uuid"`
	// Type of the storage object.
	Type string `json:"type"`
	// Name of the storage object.
	Name OptString `json:"name"`
	// Indicates whether the storage object is enabled.
	IsEnabled bool `json:"is_enabled"`
	// The date and time when the storage object was created.
	CreatedAt OptDateTime `json:"created_at"`
	// The date and time when the storage object was last updated.
	UpdatedAt OptDateTime `json:"updated_at"`
}

// GetUUID returns the value of UUID.
func (s *Storage) GetUUID() string {
	return s.UUID
}

// GetType returns the value of Type.
func (s *Storage) GetType() string {
	return s.Type
}

// GetName returns the value of Name.
func (s *Storage) GetName() OptString {
	return s.Name
}

// GetIsEnabled returns the value of IsEnabled.
func (s *Storage) GetIsEnabled() bool {
	return s.IsEnabled
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Storage) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Storage) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// SetUUID sets the value of UUID.
func (s *Storage) SetUUID(val string) {
	s.UUID = val
}

// SetType sets the value of Type.
func (s *Storage) SetType(val string) {
	s.Type = val
}

// SetName sets the value of Name.
func (s *Storage) SetName(val OptString) {
	s.Name = val
}

// SetIsEnabled sets the value of IsEnabled.
func (s *Storage) SetIsEnabled(val bool) {
	s.IsEnabled = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Storage) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Storage) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// Ref: #
type StorageHostfiles struct {
	UUID OptString `json:"uuid"`
	// The descriptive name for this storage entry.
	Name string `json:"name"`
	// Indicates whether this storage is enabled.
	IsEnabled OptBool `json:"is_enabled"`
	// The absolute or relative path on the server's file system where files will be stored.
	Path string `json:"path"`
}

// GetUUID returns the value of UUID.
func (s *StorageHostfiles) GetUUID() OptString {
	return s.UUID
}

// GetName returns the value of Name.
func (s *StorageHostfiles) GetName() string {
	return s.Name
}

// GetIsEnabled returns the value of IsEnabled.
func (s *StorageHostfiles) GetIsEnabled() OptBool {
	return s.IsEnabled
}

// GetPath returns the value of Path.
func (s *StorageHostfiles) GetPath() string {
	return s.Path
}

// SetUUID sets the value of UUID.
func (s *StorageHostfiles) SetUUID(val OptString) {
	s.UUID = val
}

// SetName sets the value of Name.
func (s *StorageHostfiles) SetName(val string) {
	s.Name = val
}

// SetIsEnabled sets the value of IsEnabled.
func (s *StorageHostfiles) SetIsEnabled(val OptBool) {
	s.IsEnabled = val
}

// SetPath sets the value of Path.
func (s *StorageHostfiles) SetPath(val string) {
	s.Path = val
}

// StorageHostfilesDeleteOK is response for StorageHostfilesDelete operation.
type StorageHostfilesDeleteOK struct{}

type StorageListOrderBy string

const (
	StorageListOrderByCreatedAt StorageListOrderBy = "created_at"
	StorageListOrderByUpdatedAt StorageListOrderBy = "updated_at"
	StorageListOrderByName      StorageListOrderBy = "name"
)

// AllValues returns all StorageListOrderBy values.
func (StorageListOrderBy) AllValues() []StorageListOrderBy {
	return []StorageListOrderBy{
		StorageListOrderByCreatedAt,
		StorageListOrderByUpdatedAt,
		StorageListOrderByName,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StorageListOrderBy) MarshalText() ([]byte, error) {
	switch s {
	case StorageListOrderByCreatedAt:
		return []byte(s), nil
	case StorageListOrderByUpdatedAt:
		return []byte(s), nil
	case StorageListOrderByName:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StorageListOrderBy) UnmarshalText(data []byte) error {
	switch StorageListOrderBy(data) {
	case StorageListOrderByCreatedAt:
		*s = StorageListOrderByCreatedAt
		return nil
	case StorageListOrderByUpdatedAt:
		*s = StorageListOrderByUpdatedAt
		return nil
	case StorageListOrderByName:
		*s = StorageListOrderByName
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type StorageListOrderDirection string

const (
	StorageListOrderDirectionAsc  StorageListOrderDirection = "asc"
	StorageListOrderDirectionDesc StorageListOrderDirection = "desc"
)

// AllValues returns all StorageListOrderDirection values.
func (StorageListOrderDirection) AllValues() []StorageListOrderDirection {
	return []StorageListOrderDirection{
		StorageListOrderDirectionAsc,
		StorageListOrderDirectionDesc,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StorageListOrderDirection) MarshalText() ([]byte, error) {
	switch s {
	case StorageListOrderDirectionAsc:
		return []byte(s), nil
	case StorageListOrderDirectionDesc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StorageListOrderDirection) UnmarshalText(data []byte) error {
	switch StorageListOrderDirection(data) {
	case StorageListOrderDirectionAsc:
		*s = StorageListOrderDirectionAsc
		return nil
	case StorageListOrderDirectionDesc:
		*s = StorageListOrderDirectionDesc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #
type StoragePostgres struct {
	UUID OptString `json:"uuid"`
	// The descriptive name for this storage entry.
	Name string `json:"name"`
	// Indicates whether this storage is enabled.
	IsEnabled OptBool `json:"is_enabled"`
	// If true, reuse the app's primary Postgres connection. If false, use custom credentials below.
	IsSameDatabase OptBool `json:"is_same_database"`
	// The username used to connect to the PostgreSQL database.
	User OptString `json:"user"`
	// The password used to connect to the PostgreSQL database.
	Password OptString `json:"password"`
	// The hostname or IP address of the PostgreSQL database server.
	Host OptString `json:"host"`
	// The port number on which the PostgreSQL database server is listening.
	Port OptString `json:"port"`
	// Additional connection options in URL query format.
	Options OptString `json:"options"`
}

// GetUUID returns the value of UUID.
func (s *StoragePostgres) GetUUID() OptString {
	return s.UUID
}

// GetName returns the value of Name.
func (s *StoragePostgres) GetName() string {
	return s.Name
}

// GetIsEnabled returns the value of IsEnabled.
func (s *StoragePostgres) GetIsEnabled() OptBool {
	return s.IsEnabled
}

// GetIsSameDatabase returns the value of IsSameDatabase.
func (s *StoragePostgres) GetIsSameDatabase() OptBool {
	return s.IsSameDatabase
}

// GetUser returns the value of User.
func (s *StoragePostgres) GetUser() OptString {
	return s.User
}

// GetPassword returns the value of Password.
func (s *StoragePostgres) GetPassword() OptString {
	return s.Password
}

// GetHost returns the value of Host.
func (s *StoragePostgres) GetHost() OptString {
	return s.Host
}

// GetPort returns the value of Port.
func (s *StoragePostgres) GetPort() OptString {
	return s.Port
}

// GetOptions returns the value of Options.
func (s *StoragePostgres) GetOptions() OptString {
	return s.Options
}

// SetUUID sets the value of UUID.
func (s *StoragePostgres) SetUUID(val OptString) {
	s.UUID = val
}

// SetName sets the value of Name.
func (s *StoragePostgres) SetName(val string) {
	s.Name = val
}

// SetIsEnabled sets the value of IsEnabled.
func (s *StoragePostgres) SetIsEnabled(val OptBool) {
	s.IsEnabled = val
}

// SetIsSameDatabase sets the value of IsSameDatabase.
func (s *StoragePostgres) SetIsSameDatabase(val OptBool) {
	s.IsSameDatabase = val
}

// SetUser sets the value of User.
func (s *StoragePostgres) SetUser(val OptString) {
	s.User = val
}

// SetPassword sets the value of Password.
func (s *StoragePostgres) SetPassword(val OptString) {
	s.Password = val
}

// SetHost sets the value of Host.
func (s *StoragePostgres) SetHost(val OptString) {
	s.Host = val
}

// SetPort sets the value of Port.
func (s *StoragePostgres) SetPort(val OptString) {
	s.Port = val
}

// SetOptions sets the value of Options.
func (s *StoragePostgres) SetOptions(val OptString) {
	s.Options = val
}

// StoragePostgresDeleteOK is response for StoragePostgresDelete operation.
type StoragePostgresDeleteOK struct{}

// Ref: #
type StorageS3 struct {
	UUID OptString `json:"uuid"`
	// The descriptive name for this storage entry.
	Name string `json:"name"`
	// Indicates whether this storage is enabled.
	IsEnabled OptBool `json:"is_enabled"`
	// The S3-compatible provider (e.g., AWS, Azure, or a custom endpoint).
	Provider string `json:"provider"`
	// The region where the bucket is located.
	Region string `json:"region"`
	// The bucket name.
	Bucket string `json:"bucket"`
	// The access key ID.
	AccessKeyID string `json:"access_key_id"`
	// The secret access key.
	SecretAccessKey string `json:"secret_access_key"`
}

// GetUUID returns the value of UUID.
func (s *StorageS3) GetUUID() OptString {
	return s.UUID
}

// GetName returns the value of Name.
func (s *StorageS3) GetName() string {
	return s.Name
}

// GetIsEnabled returns the value of IsEnabled.
func (s *StorageS3) GetIsEnabled() OptBool {
	return s.IsEnabled
}

// GetProvider returns the value of Provider.
func (s *StorageS3) GetProvider() string {
	return s.Provider
}

// GetRegion returns the value of Region.
func (s *StorageS3) GetRegion() string {
	return s.Region
}

// GetBucket returns the value of Bucket.
func (s *StorageS3) GetBucket() string {
	return s.Bucket
}

// GetAccessKeyID returns the value of AccessKeyID.
func (s *StorageS3) GetAccessKeyID() string {
	return s.AccessKeyID
}

// GetSecretAccessKey returns the value of SecretAccessKey.
func (s *StorageS3) GetSecretAccessKey() string {
	return s.SecretAccessKey
}

// SetUUID sets the value of UUID.
func (s *StorageS3) SetUUID(val OptString) {
	s.UUID = val
}

// SetName sets the value of Name.
func (s *StorageS3) SetName(val string) {
	s.Name = val
}

// SetIsEnabled sets the value of IsEnabled.
func (s *StorageS3) SetIsEnabled(val OptBool) {
	s.IsEnabled = val
}

// SetProvider sets the value of Provider.
func (s *StorageS3) SetProvider(val string) {
	s.Provider = val
}

// SetRegion sets the value of Region.
func (s *StorageS3) SetRegion(val string) {
	s.Region = val
}

// SetBucket sets the value of Bucket.
func (s *StorageS3) SetBucket(val string) {
	s.Bucket = val
}

// SetAccessKeyID sets the value of AccessKeyID.
func (s *StorageS3) SetAccessKeyID(val string) {
	s.AccessKeyID = val
}

// SetSecretAccessKey sets the value of SecretAccessKey.
func (s *StorageS3) SetSecretAccessKey(val string) {
	s.SecretAccessKey = val
}

// StorageS3DeleteOK is response for StorageS3Delete operation.
type StorageS3DeleteOK struct{}

// Ref: #
type SyncPolicy struct {
	// Unique identifier for the sync policy.
	UUID OptString `json:"uuid"`
	// Unique identifier for the user associated with the sync policy.
	PipelineUUID string `json:"pipeline_uuid"`
	// Policy type (email, telegram, whatsapp, linkedin).
	Type OptString `json:"type"`
	// Sync policy name.
	Name string `json:"name"`
	// Whether this policy is currently active.
	IsEnabled OptBool `json:"is_enabled"`
	// List of blocked emails or contact identifiers.
	Blocklist []string `json:"blocklist"`
	// List of contacts to exclude from syncing.
	ExcludeList []string `json:"exclude_list"`
	// Indicates whether to sync all messages from the service (true means no filtering).
	SyncAll OptBool `json:"sync_all"`
	// Additional key-value settings for the sync policy.
	Settings OptSyncPolicySettings `json:"settings"`
	// Timestamp when the policy was created.
	CreatedAt OptDateTime `json:"created_at"`
	// Timestamp when the policy was last updated.
	UpdatedAt OptDateTime `json:"updated_at"`
}

// GetUUID returns the value of UUID.
func (s *SyncPolicy) GetUUID() OptString {
	return s.UUID
}

// GetPipelineUUID returns the value of PipelineUUID.
func (s *SyncPolicy) GetPipelineUUID() string {
	return s.PipelineUUID
}

// GetType returns the value of Type.
func (s *SyncPolicy) GetType() OptString {
	return s.Type
}

// GetName returns the value of Name.
func (s *SyncPolicy) GetName() string {
	return s.Name
}

// GetIsEnabled returns the value of IsEnabled.
func (s *SyncPolicy) GetIsEnabled() OptBool {
	return s.IsEnabled
}

// GetBlocklist returns the value of Blocklist.
func (s *SyncPolicy) GetBlocklist() []string {
	return s.Blocklist
}

// GetExcludeList returns the value of ExcludeList.
func (s *SyncPolicy) GetExcludeList() []string {
	return s.ExcludeList
}

// GetSyncAll returns the value of SyncAll.
func (s *SyncPolicy) GetSyncAll() OptBool {
	return s.SyncAll
}

// GetSettings returns the value of Settings.
func (s *SyncPolicy) GetSettings() OptSyncPolicySettings {
	return s.Settings
}

// GetCreatedAt returns the value of CreatedAt.
func (s *SyncPolicy) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *SyncPolicy) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// SetUUID sets the value of UUID.
func (s *SyncPolicy) SetUUID(val OptString) {
	s.UUID = val
}

// SetPipelineUUID sets the value of PipelineUUID.
func (s *SyncPolicy) SetPipelineUUID(val string) {
	s.PipelineUUID = val
}

// SetType sets the value of Type.
func (s *SyncPolicy) SetType(val OptString) {
	s.Type = val
}

// SetName sets the value of Name.
func (s *SyncPolicy) SetName(val string) {
	s.Name = val
}

// SetIsEnabled sets the value of IsEnabled.
func (s *SyncPolicy) SetIsEnabled(val OptBool) {
	s.IsEnabled = val
}

// SetBlocklist sets the value of Blocklist.
func (s *SyncPolicy) SetBlocklist(val []string) {
	s.Blocklist = val
}

// SetExcludeList sets the value of ExcludeList.
func (s *SyncPolicy) SetExcludeList(val []string) {
	s.ExcludeList = val
}

// SetSyncAll sets the value of SyncAll.
func (s *SyncPolicy) SetSyncAll(val OptBool) {
	s.SyncAll = val
}

// SetSettings sets the value of Settings.
func (s *SyncPolicy) SetSettings(val OptSyncPolicySettings) {
	s.Settings = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *SyncPolicy) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *SyncPolicy) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// Additional key-value settings for the sync policy.
type SyncPolicySettings map[string]jx.Raw

func (s *SyncPolicySettings) init() SyncPolicySettings {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// SyncpolicyDeleteOK is response for SyncpolicyDelete operation.
type SyncpolicyDeleteOK struct{}

type SyncpolicyListOK struct {
	Policies []SyncPolicy `json:"policies"`
}

// GetPolicies returns the value of Policies.
func (s *SyncpolicyListOK) GetPolicies() []SyncPolicy {
	return s.Policies
}

// SetPolicies sets the value of Policies.
func (s *SyncpolicyListOK) SetPolicies(val []SyncPolicy) {
	s.Policies = val
}

// Telegram API session and user representation.
// Ref: #
type Telegram struct {
	// Session ID.
	ID int `json:"id"`
	// Session phone number.
	Phone string `json:"phone"`
	// Optional description.
	Description OptNilString `json:"description"`
	// Last update time.
	UpdatedAt time.Time `json:"updated_at"`
	// Session creation time.
	CreatedAt time.Time `json:"created_at"`
	// User details.
	User TelegramUser `json:"user"`
}

// GetID returns the value of ID.
func (s *Telegram) GetID() int {
	return s.ID
}

// GetPhone returns the value of Phone.
func (s *Telegram) GetPhone() string {
	return s.Phone
}

// GetDescription returns the value of Description.
func (s *Telegram) GetDescription() OptNilString {
	return s.Description
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Telegram) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Telegram) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUser returns the value of User.
func (s *Telegram) GetUser() TelegramUser {
	return s.User
}

// SetID sets the value of ID.
func (s *Telegram) SetID(val int) {
	s.ID = val
}

// SetPhone sets the value of Phone.
func (s *Telegram) SetPhone(val string) {
	s.Phone = val
}

// SetDescription sets the value of Description.
func (s *Telegram) SetDescription(val OptNilString) {
	s.Description = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Telegram) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Telegram) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUser sets the value of User.
func (s *Telegram) SetUser(val TelegramUser) {
	s.User = val
}

type TelegramParticipants []TelegramParticipantsItem

type TelegramParticipantsItem struct {
	// Unique identifier of the participant (e.g. user ID).
	ParticipantId OptString `json:"participantId"`
	// Arbitrary key-value metadata about the participant.
	Meta OptTelegramParticipantsItemMeta `json:"meta"`
}

// GetParticipantId returns the value of ParticipantId.
func (s *TelegramParticipantsItem) GetParticipantId() OptString {
	return s.ParticipantId
}

// GetMeta returns the value of Meta.
func (s *TelegramParticipantsItem) GetMeta() OptTelegramParticipantsItemMeta {
	return s.Meta
}

// SetParticipantId sets the value of ParticipantId.
func (s *TelegramParticipantsItem) SetParticipantId(val OptString) {
	s.ParticipantId = val
}

// SetMeta sets the value of Meta.
func (s *TelegramParticipantsItem) SetMeta(val OptTelegramParticipantsItemMeta) {
	s.Meta = val
}

// Arbitrary key-value metadata about the participant.
type TelegramParticipantsItemMeta map[string]jx.Raw

func (s *TelegramParticipantsItemMeta) init() TelegramParticipantsItemMeta {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type TelegramSessionHistory []TelegramSessionHistoryItem

type TelegramSessionHistoryItem struct {
	// Unique session identifier.
	SessionId OptString `json:"sessionId"`
	// Timestamp when the session started.
	StartedAt OptDateTime `json:"started_at"`
	// Timestamp when the session ended.
	EndedAt OptDateTime `json:"ended_at"`
	// Arbitrary key-value metadata for the session.
	Meta OptTelegramSessionHistoryItemMeta `json:"meta"`
}

// GetSessionId returns the value of SessionId.
func (s *TelegramSessionHistoryItem) GetSessionId() OptString {
	return s.SessionId
}

// GetStartedAt returns the value of StartedAt.
func (s *TelegramSessionHistoryItem) GetStartedAt() OptDateTime {
	return s.StartedAt
}

// GetEndedAt returns the value of EndedAt.
func (s *TelegramSessionHistoryItem) GetEndedAt() OptDateTime {
	return s.EndedAt
}

// GetMeta returns the value of Meta.
func (s *TelegramSessionHistoryItem) GetMeta() OptTelegramSessionHistoryItemMeta {
	return s.Meta
}

// SetSessionId sets the value of SessionId.
func (s *TelegramSessionHistoryItem) SetSessionId(val OptString) {
	s.SessionId = val
}

// SetStartedAt sets the value of StartedAt.
func (s *TelegramSessionHistoryItem) SetStartedAt(val OptDateTime) {
	s.StartedAt = val
}

// SetEndedAt sets the value of EndedAt.
func (s *TelegramSessionHistoryItem) SetEndedAt(val OptDateTime) {
	s.EndedAt = val
}

// SetMeta sets the value of Meta.
func (s *TelegramSessionHistoryItem) SetMeta(val OptTelegramSessionHistoryItemMeta) {
	s.Meta = val
}

// Arbitrary key-value metadata for the session.
type TelegramSessionHistoryItemMeta map[string]jx.Raw

func (s *TelegramSessionHistoryItemMeta) init() TelegramSessionHistoryItemMeta {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// User details.
type TelegramUser struct {
	// User ID in Telegram.
	ID OptInt `json:"id"`
	// Username in Telegram.
	Username OptString `json:"username"`
	// First name.
	FirstName OptString `json:"first_name"`
	// Last name.
	LastName OptString `json:"last_name"`
	// User's phone number.
	Phone OptString `json:"phone"`
}

// GetID returns the value of ID.
func (s *TelegramUser) GetID() OptInt {
	return s.ID
}

// GetUsername returns the value of Username.
func (s *TelegramUser) GetUsername() OptString {
	return s.Username
}

// GetFirstName returns the value of FirstName.
func (s *TelegramUser) GetFirstName() OptString {
	return s.FirstName
}

// GetLastName returns the value of LastName.
func (s *TelegramUser) GetLastName() OptString {
	return s.LastName
}

// GetPhone returns the value of Phone.
func (s *TelegramUser) GetPhone() OptString {
	return s.Phone
}

// SetID sets the value of ID.
func (s *TelegramUser) SetID(val OptInt) {
	s.ID = val
}

// SetUsername sets the value of Username.
func (s *TelegramUser) SetUsername(val OptString) {
	s.Username = val
}

// SetFirstName sets the value of FirstName.
func (s *TelegramUser) SetFirstName(val OptString) {
	s.FirstName = val
}

// SetLastName sets the value of LastName.
func (s *TelegramUser) SetLastName(val OptString) {
	s.LastName = val
}

// SetPhone sets the value of Phone.
func (s *TelegramUser) SetPhone(val OptString) {
	s.Phone = val
}

type TgSessionCreateReq struct {
	// Phone number in international format.
	Phone string `json:"phone"`
}

// GetPhone returns the value of Phone.
func (s *TgSessionCreateReq) GetPhone() string {
	return s.Phone
}

// SetPhone sets the value of Phone.
func (s *TgSessionCreateReq) SetPhone(val string) {
	s.Phone = val
}

type TgSessionListOK struct {
	// Total number of sessions.
	Total    OptInt     `json:"total"`
	Sessions []Telegram `json:"sessions"`
}

// GetTotal returns the value of Total.
func (s *TgSessionListOK) GetTotal() OptInt {
	return s.Total
}

// GetSessions returns the value of Sessions.
func (s *TgSessionListOK) GetSessions() []Telegram {
	return s.Sessions
}

// SetTotal sets the value of Total.
func (s *TgSessionListOK) SetTotal(val OptInt) {
	s.Total = val
}

// SetSessions sets the value of Sessions.
func (s *TgSessionListOK) SetSessions(val []Telegram) {
	s.Sessions = val
}

type TgSessionVerifyReq struct {
	// Hash of the phone code.
	PhoneCodeHash OptString `json:"phone_code_hash"`
	// Verification code.
	Code OptString `json:"code"`
	// Optional password for 2FA.
	Password OptString `json:"password"`
}

// GetPhoneCodeHash returns the value of PhoneCodeHash.
func (s *TgSessionVerifyReq) GetPhoneCodeHash() OptString {
	return s.PhoneCodeHash
}

// GetCode returns the value of Code.
func (s *TgSessionVerifyReq) GetCode() OptString {
	return s.Code
}

// GetPassword returns the value of Password.
func (s *TgSessionVerifyReq) GetPassword() OptString {
	return s.Password
}

// SetPhoneCodeHash sets the value of PhoneCodeHash.
func (s *TgSessionVerifyReq) SetPhoneCodeHash(val OptString) {
	s.PhoneCodeHash = val
}

// SetCode sets the value of Code.
func (s *TgSessionVerifyReq) SetCode(val OptString) {
	s.Code = val
}

// SetPassword sets the value of Password.
func (s *TgSessionVerifyReq) SetPassword(val OptString) {
	s.Password = val
}

// File upload request metadata.
// Ref: #/UploadFileRequest
type UploadFileRequest struct {
	// Desired name of the file.
	Name OptString `json:"name"`
	// MIME type of the file, defaults to "application/octet-stream".
	MimeType OptString `json:"mime_type"`
	// The UUID of the storage where this file will be uploaded.
	StorageUUID string `json:"storage_uuid"`
}

// GetName returns the value of Name.
func (s *UploadFileRequest) GetName() OptString {
	return s.Name
}

// GetMimeType returns the value of MimeType.
func (s *UploadFileRequest) GetMimeType() OptString {
	return s.MimeType
}

// GetStorageUUID returns the value of StorageUUID.
func (s *UploadFileRequest) GetStorageUUID() string {
	return s.StorageUUID
}

// SetName sets the value of Name.
func (s *UploadFileRequest) SetName(val OptString) {
	s.Name = val
}

// SetMimeType sets the value of MimeType.
func (s *UploadFileRequest) SetMimeType(val OptString) {
	s.MimeType = val
}

// SetStorageUUID sets the value of StorageUUID.
func (s *UploadFileRequest) SetStorageUUID(val string) {
	s.StorageUUID = val
}

// Response after uploading a file.
// Ref: #/UploadFileResponse
type UploadFileResponse struct {
	File OptFileObject `json:"file"`
}

// GetFile returns the value of File.
func (s *UploadFileResponse) GetFile() OptFileObject {
	return s.File
}

// SetFile sets the value of File.
func (s *UploadFileResponse) SetFile(val OptFileObject) {
	s.File = val
}

// Request to generate a pre-signed URL for upload.
// Ref: #/UploadPresignedUrlRequest
type UploadPresignedUrlRequest struct {
	Name     OptString `json:"name"`
	MimeType OptString `json:"mime_type"`
	// The target storage backend.
	StorageType OptUploadPresignedUrlRequestStorageType `json:"storage_type"`
}

// GetName returns the value of Name.
func (s *UploadPresignedUrlRequest) GetName() OptString {
	return s.Name
}

// GetMimeType returns the value of MimeType.
func (s *UploadPresignedUrlRequest) GetMimeType() OptString {
	return s.MimeType
}

// GetStorageType returns the value of StorageType.
func (s *UploadPresignedUrlRequest) GetStorageType() OptUploadPresignedUrlRequestStorageType {
	return s.StorageType
}

// SetName sets the value of Name.
func (s *UploadPresignedUrlRequest) SetName(val OptString) {
	s.Name = val
}

// SetMimeType sets the value of MimeType.
func (s *UploadPresignedUrlRequest) SetMimeType(val OptString) {
	s.MimeType = val
}

// SetStorageType sets the value of StorageType.
func (s *UploadPresignedUrlRequest) SetStorageType(val OptUploadPresignedUrlRequestStorageType) {
	s.StorageType = val
}

// The target storage backend.
type UploadPresignedUrlRequestStorageType string

const (
	UploadPresignedUrlRequestStorageTypeS3        UploadPresignedUrlRequestStorageType = "s3"
	UploadPresignedUrlRequestStorageTypePostgres  UploadPresignedUrlRequestStorageType = "postgres"
	UploadPresignedUrlRequestStorageTypeHostfiles UploadPresignedUrlRequestStorageType = "hostfiles"
)

// AllValues returns all UploadPresignedUrlRequestStorageType values.
func (UploadPresignedUrlRequestStorageType) AllValues() []UploadPresignedUrlRequestStorageType {
	return []UploadPresignedUrlRequestStorageType{
		UploadPresignedUrlRequestStorageTypeS3,
		UploadPresignedUrlRequestStorageTypePostgres,
		UploadPresignedUrlRequestStorageTypeHostfiles,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UploadPresignedUrlRequestStorageType) MarshalText() ([]byte, error) {
	switch s {
	case UploadPresignedUrlRequestStorageTypeS3:
		return []byte(s), nil
	case UploadPresignedUrlRequestStorageTypePostgres:
		return []byte(s), nil
	case UploadPresignedUrlRequestStorageTypeHostfiles:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UploadPresignedUrlRequestStorageType) UnmarshalText(data []byte) error {
	switch UploadPresignedUrlRequestStorageType(data) {
	case UploadPresignedUrlRequestStorageTypeS3:
		*s = UploadPresignedUrlRequestStorageTypeS3
		return nil
	case UploadPresignedUrlRequestStorageTypePostgres:
		*s = UploadPresignedUrlRequestStorageTypePostgres
		return nil
	case UploadPresignedUrlRequestStorageTypeHostfiles:
		*s = UploadPresignedUrlRequestStorageTypeHostfiles
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Response with a pre-signed URL for upload.
// Ref: #/UploadPresignedUrlResponse
type UploadPresignedUrlResponse struct {
	// Pre-signed URL for uploading the file.
	UploadURL OptString     `json:"upload_url"`
	File      OptFileObject `json:"file"`
}

// GetUploadURL returns the value of UploadURL.
func (s *UploadPresignedUrlResponse) GetUploadURL() OptString {
	return s.UploadURL
}

// GetFile returns the value of File.
func (s *UploadPresignedUrlResponse) GetFile() OptFileObject {
	return s.File
}

// SetUploadURL sets the value of UploadURL.
func (s *UploadPresignedUrlResponse) SetUploadURL(val OptString) {
	s.UploadURL = val
}

// SetFile sets the value of File.
func (s *UploadPresignedUrlResponse) SetFile(val OptFileObject) {
	s.File = val
}

// Ref: #
type User struct {
	// Unique identifier for the user.
	UUID OptString `json:"uuid"`
	// User's primary email address.
	Email string `json:"email"`
	// User's password (hashed).
	Password string `json:"password"`
	// User's first name.
	FirstName string `json:"first_name"`
	// User's last name.
	LastName string `json:"last_name"`
	// Indicates if the user is enabled.
	IsEnabled OptBool `json:"is_enabled"`
	// Indicates if the user has administrative privileges.
	IsAdmin OptBool `json:"is_admin"`
	// Arbitrary key-value metadata about the user.
	Meta OptUserMeta `json:"meta"`
	// Timestamp of user creation.
	CreatedAt OptDateTime `json:"created_at"`
	// Timestamp of last update.
	UpdatedAt OptDateTime `json:"updated_at"`
}

// GetUUID returns the value of UUID.
func (s *User) GetUUID() OptString {
	return s.UUID
}

// GetEmail returns the value of Email.
func (s *User) GetEmail() string {
	return s.Email
}

// GetPassword returns the value of Password.
func (s *User) GetPassword() string {
	return s.Password
}

// GetFirstName returns the value of FirstName.
func (s *User) GetFirstName() string {
	return s.FirstName
}

// GetLastName returns the value of LastName.
func (s *User) GetLastName() string {
	return s.LastName
}

// GetIsEnabled returns the value of IsEnabled.
func (s *User) GetIsEnabled() OptBool {
	return s.IsEnabled
}

// GetIsAdmin returns the value of IsAdmin.
func (s *User) GetIsAdmin() OptBool {
	return s.IsAdmin
}

// GetMeta returns the value of Meta.
func (s *User) GetMeta() OptUserMeta {
	return s.Meta
}

// GetCreatedAt returns the value of CreatedAt.
func (s *User) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *User) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// SetUUID sets the value of UUID.
func (s *User) SetUUID(val OptString) {
	s.UUID = val
}

// SetEmail sets the value of Email.
func (s *User) SetEmail(val string) {
	s.Email = val
}

// SetPassword sets the value of Password.
func (s *User) SetPassword(val string) {
	s.Password = val
}

// SetFirstName sets the value of FirstName.
func (s *User) SetFirstName(val string) {
	s.FirstName = val
}

// SetLastName sets the value of LastName.
func (s *User) SetLastName(val string) {
	s.LastName = val
}

// SetIsEnabled sets the value of IsEnabled.
func (s *User) SetIsEnabled(val OptBool) {
	s.IsEnabled = val
}

// SetIsAdmin sets the value of IsAdmin.
func (s *User) SetIsAdmin(val OptBool) {
	s.IsAdmin = val
}

// SetMeta sets the value of Meta.
func (s *User) SetMeta(val OptUserMeta) {
	s.Meta = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *User) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *User) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// Arbitrary key-value metadata about the user.
type UserMeta map[string]jx.Raw

func (s *UserMeta) init() UserMeta {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}
