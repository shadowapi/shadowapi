// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: storage.sql

package query

import (
	"context"
	"time"

	"github.com/gofrs/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createStorage = `-- name: CreateStorage :one
INSERT INTO storage (
  uuid,
  type,
  settings,
  created_at,
  updated_at
) VALUES (
  $1,
  $2,
  $3,
  NOW(),
  NOW()
) RETURNING uuid, user_uuid, name, type, is_enabled, settings, created_at, updated_at
`

type CreateStorageParams struct {
	UUID     uuid.UUID `json:"uuid"`
	Type     string    `json:"type"`
	Settings []byte    `json:"settings"`
}

func (q *Queries) CreateStorage(ctx context.Context, arg CreateStorageParams) (Storage, error) {
	row := q.db.QueryRow(ctx, createStorage, arg.UUID, arg.Type, arg.Settings)
	var i Storage
	err := row.Scan(
		&i.UUID,
		&i.UserUUID,
		&i.Name,
		&i.Type,
		&i.IsEnabled,
		&i.Settings,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteStorage = `-- name: DeleteStorage :exec
DELETE FROM storage WHERE uuid = $1
`

func (q *Queries) DeleteStorage(ctx context.Context, argUuid uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteStorage, argUuid)
	return err
}

const getStorages = `-- name: GetStorages :many
WITH filtered_storages AS (
  SELECT d.uuid, d.user_uuid, d.name, d.type, d.is_enabled, d.settings, d.created_at, d.updated_at FROM storage d WHERE 
    ($5::text IS NULL OR type = $5) AND
    ($6::text IS NULL OR type = $6) AND
    ($7::text IS NULL OR user_uuid = $7) AND
    ($8 IS NULL OR is_enabled = $8) AND
    ($9::text IS NULL OR d.name ILIKE $9))
SELECT
  uuid, user_uuid, name, type, is_enabled, settings, created_at, updated_at,
  (SELECT count(*) FROM filtered_storages) as total_count
FROM filtered_storages
ORDER BY 
  CASE WHEN $1 = 'created_at' AND $2::text = 'asc' THEN created_at END ASC,
  CASE WHEN $1 = 'created_at' AND $2::text = 'desc' THEN created_at END DESC,
  CASE WHEN $1 = 'updated_at' AND $2::text = 'asc' THEN updated_at END ASC,
  CASE WHEN $1 = 'updated_at' AND $2::text = 'desc' THEN updated_at END DESC,
  CASE WHEN $1 = 'name' AND $2::text = 'asc' THEN name END ASC,
  CASE WHEN $1 = 'name' AND $2::text = 'desc' THEN name END DESC,
  created_at DESC
LIMIT NULLIF($4::int, 0) OFFSET $3
`

type GetStoragesParams struct {
	OrderBy        interface{} `json:"order_by"`
	OrderDirection string      `json:"order_direction"`
	Offset         int32       `json:"offset"`
	Limit          int32       `json:"limit"`
	Type           string      `json:"type"`
	UUID           string      `json:"uuid"`
	UserUUID       string      `json:"user_uuid"`
	IsEnabled      interface{} `json:"is_enabled"`
	Name           string      `json:"name"`
}

type GetStoragesRow struct {
	UUID       uuid.UUID          `json:"uuid"`
	UserUUID   *uuid.UUID         `json:"user_uuid"`
	Name       string             `json:"name"`
	Type       string             `json:"type"`
	IsEnabled  bool               `json:"is_enabled"`
	Settings   []byte             `json:"settings"`
	CreatedAt  time.Time          `json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
	TotalCount int64              `json:"total_count"`
}

func (q *Queries) GetStorages(ctx context.Context, arg GetStoragesParams) ([]GetStoragesRow, error) {
	rows, err := q.db.Query(ctx, getStorages,
		arg.OrderBy,
		arg.OrderDirection,
		arg.Offset,
		arg.Limit,
		arg.Type,
		arg.UUID,
		arg.UserUUID,
		arg.IsEnabled,
		arg.Name,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetStoragesRow
	for rows.Next() {
		var i GetStoragesRow
		if err := rows.Scan(
			&i.UUID,
			&i.UserUUID,
			&i.Name,
			&i.Type,
			&i.IsEnabled,
			&i.Settings,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStorage = `-- name: UpdateStorage :exec
UPDATE storage SET
  "type" = $1,
  name = $2,
  settings = $3,
  updated_at = NOW()
WHERE uuid = $4
`

type UpdateStorageParams struct {
	Type     string    `json:"type"`
	Name     string    `json:"name"`
	Settings []byte    `json:"settings"`
	UUID     uuid.UUID `json:"uuid"`
}

func (q *Queries) UpdateStorage(ctx context.Context, arg UpdateStorageParams) error {
	_, err := q.db.Exec(ctx, updateStorage,
		arg.Type,
		arg.Name,
		arg.Settings,
		arg.UUID,
	)
	return err
}
