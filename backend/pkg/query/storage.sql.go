// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: storage.sql

package query

import (
	"context"

	"github.com/gofrs/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createStorage = `-- name: CreateStorage :one
INSERT INTO storage (
  uuid,
  name,
  "type",
  is_enabled,
  settings,
  created_at,
  updated_at
) VALUES (
 $1::uuid,
 NULLIF($2, ''),
 NULLIF($3, ''),
 $4::boolean,
  $5,
  NOW(),
  NOW()
) RETURNING uuid, name, type, is_enabled, settings, created_at, updated_at
`

type CreateStorageParams struct {
	UUID      pgtype.UUID `json:"uuid"`
	Name      interface{} `json:"name"`
	Type      interface{} `json:"type"`
	IsEnabled bool        `json:"is_enabled"`
	Settings  []byte      `json:"settings"`
}

func (q *Queries) CreateStorage(ctx context.Context, arg CreateStorageParams) (Storage, error) {
	row := q.db.QueryRow(ctx, createStorage,
		arg.UUID,
		arg.Name,
		arg.Type,
		arg.IsEnabled,
		arg.Settings,
	)
	var i Storage
	err := row.Scan(
		&i.UUID,
		&i.Name,
		&i.Type,
		&i.IsEnabled,
		&i.Settings,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteStorage = `-- name: DeleteStorage :exec
DELETE FROM storage WHERE uuid = $1::uuid
`

func (q *Queries) DeleteStorage(ctx context.Context, argUuid pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteStorage, argUuid)
	return err
}

const getStorage = `-- name: GetStorage :one
SELECT
    storage.uuid, storage.name, storage.type, storage.is_enabled, storage.settings, storage.created_at, storage.updated_at
FROM storage
WHERE uuid = $1::uuid
`

type GetStorageRow struct {
	Storage Storage `json:"storage"`
}

func (q *Queries) GetStorage(ctx context.Context, argUuid pgtype.UUID) (GetStorageRow, error) {
	row := q.db.QueryRow(ctx, getStorage, argUuid)
	var i GetStorageRow
	err := row.Scan(
		&i.Storage.UUID,
		&i.Storage.Name,
		&i.Storage.Type,
		&i.Storage.IsEnabled,
		&i.Storage.Settings,
		&i.Storage.CreatedAt,
		&i.Storage.UpdatedAt,
	)
	return i, err
}

const getStorages = `-- name: GetStorages :many
WITH filtered_storages AS (
    SELECT d.uuid, d.name, d.type, d.is_enabled, d.settings, d.created_at, d.updated_at
    FROM storage d
    WHERE
        (NULLIF($5, '') IS NULL OR d."type" = $5)
      AND ($6::uuid IS NULL OR d.uuid = $6)
      AND (NULLIF($7::int, -1) IS NULL OR d.is_enabled = $7::boolean)
      AND (NULLIF($8, '') IS NULL OR d.name ILIKE $8)
)
SELECT
    uuid, name, type, is_enabled, settings, created_at, updated_at,
    (SELECT count(*) FROM filtered_storages) AS total_count
FROM filtered_storages
ORDER BY
    CASE WHEN $1 = 'created_at' AND $2 = 'asc' THEN created_at END ASC,
    CASE WHEN $1 = 'created_at' AND $2 = 'desc' THEN created_at END DESC,
    created_at DESC
LIMIT NULLIF($4::int, 0)
    OFFSET $3::int
`

type GetStoragesParams struct {
	OrderBy        interface{} `json:"order_by"`
	OrderDirection interface{} `json:"order_direction"`
	Offset         int32       `json:"offset"`
	Limit          int32       `json:"limit"`
	Type           interface{} `json:"type"`
	UUID           pgtype.UUID `json:"uuid"`
	IsEnabled      int32       `json:"is_enabled"`
	Name           interface{} `json:"name"`
}

type GetStoragesRow struct {
	UUID       uuid.UUID          `json:"uuid"`
	Name       string             `json:"name"`
	Type       string             `json:"type"`
	IsEnabled  bool               `json:"is_enabled"`
	Settings   []byte             `json:"settings"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
	TotalCount int64              `json:"total_count"`
}

func (q *Queries) GetStorages(ctx context.Context, arg GetStoragesParams) ([]GetStoragesRow, error) {
	rows, err := q.db.Query(ctx, getStorages,
		arg.OrderBy,
		arg.OrderDirection,
		arg.Offset,
		arg.Limit,
		arg.Type,
		arg.UUID,
		arg.IsEnabled,
		arg.Name,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetStoragesRow
	for rows.Next() {
		var i GetStoragesRow
		if err := rows.Scan(
			&i.UUID,
			&i.Name,
			&i.Type,
			&i.IsEnabled,
			&i.Settings,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listStorages = `-- name: ListStorages :many
SELECT
    storage.uuid, storage.name, storage.type, storage.is_enabled, storage.settings, storage.created_at, storage.updated_at
FROM storage
ORDER BY created_at DESC
LIMIT NULLIF($2::int, 0)
    OFFSET $1
`

type ListStoragesParams struct {
	Offset int32 `json:"offset"`
	Limit  int32 `json:"limit"`
}

type ListStoragesRow struct {
	Storage Storage `json:"storage"`
}

func (q *Queries) ListStorages(ctx context.Context, arg ListStoragesParams) ([]ListStoragesRow, error) {
	rows, err := q.db.Query(ctx, listStorages, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListStoragesRow
	for rows.Next() {
		var i ListStoragesRow
		if err := rows.Scan(
			&i.Storage.UUID,
			&i.Storage.Name,
			&i.Storage.Type,
			&i.Storage.IsEnabled,
			&i.Storage.Settings,
			&i.Storage.CreatedAt,
			&i.Storage.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStorage = `-- name: UpdateStorage :exec
UPDATE storage SET
  name = NULLIF($1, ''),
  "type" = NULLIF($2, ''),
  is_enabled = $3::boolean,
  settings = $4,
  updated_at = NOW()
WHERE uuid = $5::uuid
`

type UpdateStorageParams struct {
	Name      interface{} `json:"name"`
	Type      interface{} `json:"type"`
	IsEnabled bool        `json:"is_enabled"`
	Settings  []byte      `json:"settings"`
	UUID      pgtype.UUID `json:"uuid"`
}

func (q *Queries) UpdateStorage(ctx context.Context, arg UpdateStorageParams) error {
	_, err := q.db.Exec(ctx, updateStorage,
		arg.Name,
		arg.Type,
		arg.IsEnabled,
		arg.Settings,
		arg.UUID,
	)
	return err
}
