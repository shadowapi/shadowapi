// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package query

import (
	"context"

	"github.com/gofrs/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "user" (
	"uuid", email, password, first_name, last_name, is_enabled, is_admin
) VALUES(
	$1, $2, $3, $4, $5, $6, $7
) RETURNING uuid, email, password, first_name, last_name, is_enabled, is_admin, created_at, updated_at
`

type CreateUserParams struct {
	UUID      uuid.UUID `json:"uuid"`
	Email     string    `json:"email"`
	Password  string    `json:"password"`
	FirstName string    `json:"first_name"`
	LastName  string    `json:"last_name"`
	IsEnabled bool      `json:"is_enabled"`
	IsAdmin   bool      `json:"is_admin"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.UUID,
		arg.Email,
		arg.Password,
		arg.FirstName,
		arg.LastName,
		arg.IsEnabled,
		arg.IsAdmin,
	)
	var i User
	err := row.Scan(
		&i.UUID,
		&i.Email,
		&i.Password,
		&i.FirstName,
		&i.LastName,
		&i.IsEnabled,
		&i.IsAdmin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM "user"
WHERE "uuid" = $1
`

func (q *Queries) DeleteUser(ctx context.Context, argUuid uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, argUuid)
	return err
}

const getUser = `-- name: GetUser :one
SELECT uuid, email, password, first_name, last_name, is_enabled, is_admin, created_at, updated_at FROM "user"
WHERE
	($1::text <> '' AND "uuid"::text = $1::text) OR
	($2::text <> '' AND email = $2::text)
LIMIT 1
`

type GetUserParams struct {
	UUID  string `json:"uuid"`
	Email string `json:"email"`
}

func (q *Queries) GetUser(ctx context.Context, arg GetUserParams) (User, error) {
	row := q.db.QueryRow(ctx, getUser, arg.UUID, arg.Email)
	var i User
	err := row.Scan(
		&i.UUID,
		&i.Email,
		&i.Password,
		&i.FirstName,
		&i.LastName,
		&i.IsEnabled,
		&i.IsAdmin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT uuid, email, password, first_name, last_name, is_enabled, is_admin, created_at, updated_at FROM "user"
ORDER BY created_at DESC
LIMIT CASE WHEN $2::int = 0 THEN NULL ELSE $2::int END
OFFSET $1::int
`

type ListUsersParams struct {
	OffsetRecords int32 `json:"offset_records"`
	LimitRecords  int32 `json:"limit_records"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.OffsetRecords, arg.LimitRecords)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UUID,
			&i.Email,
			&i.Password,
			&i.FirstName,
			&i.LastName,
			&i.IsEnabled,
			&i.IsAdmin,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE "user" SET
	email = $1,
	password = COALESCE($2, password),
	first_name = $3,
	last_name = $4,
	is_enabled = $5,
	is_admin = $6
WHERE "uuid" = $7
`

type UpdateUserParams struct {
	Email     string    `json:"email"`
	Password  string    `json:"password"`
	FirstName string    `json:"first_name"`
	LastName  string    `json:"last_name"`
	IsEnabled bool      `json:"is_enabled"`
	IsAdmin   bool      `json:"is_admin"`
	UUID      uuid.UUID `json:"uuid"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.Email,
		arg.Password,
		arg.FirstName,
		arg.LastName,
		arg.IsEnabled,
		arg.IsAdmin,
		arg.UUID,
	)
	return err
}
