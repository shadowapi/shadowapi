// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: tg_sessions_states.sql

package query

import (
	"context"
)

const tgGetState = `-- name: TgGetState :one
SELECT id, pts, qts, date, seq FROM tg_sessions_states WHERE id = $1
`

func (q *Queries) TgGetState(ctx context.Context, id int64) (TgSessionsState, error) {
	row := q.db.QueryRow(ctx, tgGetState, id)
	var i TgSessionsState
	err := row.Scan(
		&i.ID,
		&i.Pts,
		&i.Qts,
		&i.Date,
		&i.Seq,
	)
	return i, err
}

const tgUpdateDate = `-- name: TgUpdateDate :exec
UPDATE tg_sessions_states SET date = $1 WHERE id = $2
`

type TgUpdateDateParams struct {
	Date int64 `json:"date"`
	ID   int64 `json:"id"`
}

func (q *Queries) TgUpdateDate(ctx context.Context, arg TgUpdateDateParams) error {
	_, err := q.db.Exec(ctx, tgUpdateDate, arg.Date, arg.ID)
	return err
}

const tgUpdatePts = `-- name: TgUpdatePts :exec
UPDATE tg_sessions_states SET pts = $1 WHERE id = $2
`

type TgUpdatePtsParams struct {
	Pts int64 `json:"pts"`
	ID  int64 `json:"id"`
}

func (q *Queries) TgUpdatePts(ctx context.Context, arg TgUpdatePtsParams) error {
	_, err := q.db.Exec(ctx, tgUpdatePts, arg.Pts, arg.ID)
	return err
}

const tgUpdateQts = `-- name: TgUpdateQts :exec
UPDATE tg_sessions_states SET qts = $1 WHERE id = $2
`

type TgUpdateQtsParams struct {
	Qts int64 `json:"qts"`
	ID  int64 `json:"id"`
}

func (q *Queries) TgUpdateQts(ctx context.Context, arg TgUpdateQtsParams) error {
	_, err := q.db.Exec(ctx, tgUpdateQts, arg.Qts, arg.ID)
	return err
}

const tgUpdateSeq = `-- name: TgUpdateSeq :exec
UPDATE tg_sessions_states SET seq = $1 WHERE id = $2
`

type TgUpdateSeqParams struct {
	Seq int64 `json:"seq"`
	ID  int64 `json:"id"`
}

func (q *Queries) TgUpdateSeq(ctx context.Context, arg TgUpdateSeqParams) error {
	_, err := q.db.Exec(ctx, tgUpdateSeq, arg.Seq, arg.ID)
	return err
}

const tgUpsertState = `-- name: TgUpsertState :exec
INSERT INTO tg_sessions_states (id, pts, qts, "date", seq)
VALUES ($1,
        $2,
        $3,
        $4,
        $5)
ON CONFLICT (id)
    DO UPDATE SET pts = EXCLUDED.pts,
                  qts = EXCLUDED.qts,
                  date = EXCLUDED.date,
                  seq = EXCLUDED.seq
`

type TgUpsertStateParams struct {
	ID   int64 `json:"id"`
	Pts  int64 `json:"pts"`
	Qts  int64 `json:"qts"`
	Date int64 `json:"date"`
	Seq  int64 `json:"seq"`
}

func (q *Queries) TgUpsertState(ctx context.Context, arg TgUpsertStateParams) error {
	_, err := q.db.Exec(ctx, tgUpsertState,
		arg.ID,
		arg.Pts,
		arg.Qts,
		arg.Date,
		arg.Seq,
	)
	return err
}
