// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package query

import (
	"time"

	"github.com/gofrs/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type Datasource struct {
	UUID            uuid.UUID          `json:"uuid"`
	UserUUID        *uuid.UUID         `json:"user_uuid"`
	Name            string             `json:"name"`
	Type            string             `json:"type"`
	IsEnabled       bool               `json:"is_enabled"`
	Oauth2ClientID  pgtype.Text        `json:"oauth2_client_id"`
	OAuth2TokenUUID *uuid.UUID         `json:"oauth2_token_uuid"`
	CreatedAt       time.Time          `json:"created_at"`
	UpdatedAt       pgtype.Timestamptz `json:"updated_at"`
}

type DatasourceEmail struct {
	UUID           uuid.UUID          `json:"uuid"`
	DatasourceUUID *uuid.UUID         `json:"datasource_uuid"`
	Email          string             `json:"email"`
	Password       pgtype.Text        `json:"password"`
	IMAPServer     pgtype.Text        `json:"imap_server"`
	SMTPServer     pgtype.Text        `json:"smtp_server"`
	SMTPTLS        pgtype.Bool        `json:"smtp_tls"`
	Provider       string             `json:"provider"`
	CreatedAt      time.Time          `json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `json:"updated_at"`
}

type Oauth2Client struct {
	ID        string             `json:"id"`
	Name      string             `json:"name"`
	Provider  string             `json:"provider"`
	Secret    string             `json:"secret"`
	CreatedAt time.Time          `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

type Oauth2State struct {
	UUID       uuid.UUID          `json:"uuid"`
	ClientName string             `json:"client_name"`
	ClientID   string             `json:"client_id"`
	State      []byte             `json:"state"`
	CreatedAt  time.Time          `json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
	ExpiredAt  pgtype.Timestamptz `json:"expired_at"`
}

type Oauth2Subject struct {
	UUID       uuid.UUID          `json:"uuid"`
	UserUUID   *uuid.UUID         `json:"user_uuid"`
	ClientName string             `json:"client_name"`
	ClientID   string             `json:"client_id"`
	Token      []byte             `json:"token"`
	CreatedAt  time.Time          `json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
	ExpiredAt  pgtype.Timestamptz `json:"expired_at"`
}

type Oauth2Token struct {
	UUID      uuid.UUID          `json:"uuid"`
	ClientID  string             `json:"client_id"`
	Token     []byte             `json:"token"`
	CreatedAt time.Time          `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

type Pipeline struct {
	UUID      uuid.UUID          `json:"uuid"`
	Name      string             `json:"name"`
	Flow      []byte             `json:"flow"`
	CreatedAt time.Time          `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

type PipelineEntry struct {
	UUID         uuid.UUID          `json:"uuid"`
	PipelineUuid *uuid.UUID         `json:"pipeline_uuid"`
	ParentUuid   *uuid.UUID         `json:"parent_uuid"`
	Type         string             `json:"type"`
	Params       []byte             `json:"params"`
	CreatedAt    time.Time          `json:"created_at"`
	UpdatedAt    pgtype.Timestamptz `json:"updated_at"`
}

type Storage struct {
	UUID      uuid.UUID          `json:"uuid"`
	UserUUID  *uuid.UUID         `json:"user_uuid"`
	Name      string             `json:"name"`
	Type      string             `json:"type"`
	IsEnabled bool               `json:"is_enabled"`
	Settings  []byte             `json:"settings"`
	CreatedAt time.Time          `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

type User struct {
	UUID      uuid.UUID          `json:"uuid"`
	Email     string             `json:"email"`
	Password  string             `json:"password"`
	FirstName string             `json:"first_name"`
	LastName  string             `json:"last_name"`
	IsEnabled bool               `json:"is_enabled"`
	IsAdmin   bool               `json:"is_admin"`
	CreatedAt time.Time          `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}
