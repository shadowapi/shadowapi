// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: file.sql

package query

import (
	"context"

	"github.com/gofrs/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createFile = `-- name: CreateFile :one
INSERT INTO "file" (
    uuid,
    storage_type,
    storage_uuid,
    name,
    mime_type,
    size,
    created_at,
    updated_at
) VALUES (
             $1,
             $2,
             $3,
             $4,
             $5,
             $6,
             NOW(),
             NULL
         ) RETURNING uuid, storage_type, storage_uuid, name, mime_type, size, created_at, updated_at
`

type CreateFileParams struct {
	UUID        uuid.UUID   `json:"uuid"`
	StorageType string      `json:"storage_type"`
	StorageUuid *uuid.UUID  `json:"storage_uuid"`
	Name        string      `json:"name"`
	MimeType    pgtype.Text `json:"mime_type"`
	Size        pgtype.Int8 `json:"size"`
}

func (q *Queries) CreateFile(ctx context.Context, arg CreateFileParams) (File, error) {
	row := q.db.QueryRow(ctx, createFile,
		arg.UUID,
		arg.StorageType,
		arg.StorageUuid,
		arg.Name,
		arg.MimeType,
		arg.Size,
	)
	var i File
	err := row.Scan(
		&i.UUID,
		&i.StorageType,
		&i.StorageUuid,
		&i.Name,
		&i.MimeType,
		&i.Size,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteFile = `-- name: DeleteFile :exec
DELETE FROM "file"
WHERE uuid = $1
`

func (q *Queries) DeleteFile(ctx context.Context, argUuid uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteFile, argUuid)
	return err
}

const getFile = `-- name: GetFile :one
SELECT
    uuid, storage_type, storage_uuid, name, mime_type, size, created_at, updated_at
FROM "file"
WHERE
    uuid = $1
LIMIT 1
`

func (q *Queries) GetFile(ctx context.Context, argUuid uuid.UUID) (File, error) {
	row := q.db.QueryRow(ctx, getFile, argUuid)
	var i File
	err := row.Scan(
		&i.UUID,
		&i.StorageType,
		&i.StorageUuid,
		&i.Name,
		&i.MimeType,
		&i.Size,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listFiles = `-- name: ListFiles :many
SELECT
    uuid, storage_type, storage_uuid, name, mime_type, size, created_at, updated_at
FROM "file"
ORDER BY created_at DESC
LIMIT CASE WHEN $2::int = 0 THEN NULL ELSE $2::int END
    OFFSET $1::int
`

type ListFilesParams struct {
	OffsetRecords int32 `json:"offset_records"`
	LimitRecords  int32 `json:"limit_records"`
}

func (q *Queries) ListFiles(ctx context.Context, arg ListFilesParams) ([]File, error) {
	rows, err := q.db.Query(ctx, listFiles, arg.OffsetRecords, arg.LimitRecords)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []File
	for rows.Next() {
		var i File
		if err := rows.Scan(
			&i.UUID,
			&i.StorageType,
			&i.StorageUuid,
			&i.Name,
			&i.MimeType,
			&i.Size,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFile = `-- name: UpdateFile :exec
UPDATE "file"
SET
    storage_type = COALESCE($1, storage_type),
    storage_uuid = COALESCE($2, storage_uuid),
    name         = COALESCE($3, name),
    mime_type    = COALESCE($4, mime_type),
    size         = COALESCE($5, size),
    updated_at   = NOW()
WHERE uuid = $6
`

type UpdateFileParams struct {
	StorageType string      `json:"storage_type"`
	StorageUuid *uuid.UUID  `json:"storage_uuid"`
	Name        string      `json:"name"`
	MimeType    pgtype.Text `json:"mime_type"`
	Size        pgtype.Int8 `json:"size"`
	UUID        uuid.UUID   `json:"uuid"`
}

func (q *Queries) UpdateFile(ctx context.Context, arg UpdateFileParams) error {
	_, err := q.db.Exec(ctx, updateFile,
		arg.StorageType,
		arg.StorageUuid,
		arg.Name,
		arg.MimeType,
		arg.Size,
		arg.UUID,
	)
	return err
}
