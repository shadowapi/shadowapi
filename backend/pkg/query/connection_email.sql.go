// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: connection_email.sql

package query

import (
	"context"

	"github.com/gofrs/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createDatasourceEmail = `-- name: CreateDatasourceEmail :one
INSERT INTO datasource_email (
	uuid, datasource_uuid, email, provider, password, imap_server, smtp_server, smtp_tls
) VALUES (
	$1, $2, $3, $4, $5, $6, $7, $8
) RETURNING uuid, datasource_uuid, email, password, imap_server, smtp_server, smtp_tls, provider, created_at, updated_at
`

type CreateDatasourceEmailParams struct {
	UUID           uuid.UUID   `json:"uuid"`
	DatasourceUUID *uuid.UUID  `json:"datasource_uuid"`
	Email          string      `json:"email"`
	Provider       string      `json:"provider"`
	Password       pgtype.Text `json:"password"`
	IMAPServer     pgtype.Text `json:"imap_server"`
	SMTPServer     pgtype.Text `json:"smtp_server"`
	SMTPTLS        pgtype.Bool `json:"smtp_tls"`
}

func (q *Queries) CreateDatasourceEmail(ctx context.Context, arg CreateDatasourceEmailParams) (DatasourceEmail, error) {
	row := q.db.QueryRow(ctx, createDatasourceEmail,
		arg.UUID,
		arg.DatasourceUUID,
		arg.Email,
		arg.Provider,
		arg.Password,
		arg.IMAPServer,
		arg.SMTPServer,
		arg.SMTPTLS,
	)
	var i DatasourceEmail
	err := row.Scan(
		&i.UUID,
		&i.DatasourceUUID,
		&i.Email,
		&i.Password,
		&i.IMAPServer,
		&i.SMTPServer,
		&i.SMTPTLS,
		&i.Provider,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteDatasourceEmail = `-- name: DeleteDatasourceEmail :exec
DELETE FROM datasource_email
WHERE datasource_uuid = $1
`

func (q *Queries) DeleteDatasourceEmail(ctx context.Context, datasourceUuid *uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteDatasourceEmail, datasourceUuid)
	return err
}

const updateDatasourceEmail = `-- name: UpdateDatasourceEmail :exec
UPDATE datasource_email SET
	password = COALESCE($1, password),
	imap_server = COALESCE($2, imap_server),
	smtp_server = COALESCE($3, smtp_server),
	smtp_tls = COALESCE($4, smtp_tls)
WHERE datasource_uuid = $5
RETURNING uuid, datasource_uuid, email, password, imap_server, smtp_server, smtp_tls, provider, created_at, updated_at
`

type UpdateDatasourceEmailParams struct {
	Password       pgtype.Text `json:"password"`
	IMAPServer     pgtype.Text `json:"imap_server"`
	SMTPServer     pgtype.Text `json:"smtp_server"`
	SMTPTLS        pgtype.Bool `json:"smtp_tls"`
	DatasourceUUID *uuid.UUID  `json:"datasource_uuid"`
}

func (q *Queries) UpdateDatasourceEmail(ctx context.Context, arg UpdateDatasourceEmailParams) error {
	_, err := q.db.Exec(ctx, updateDatasourceEmail,
		arg.Password,
		arg.IMAPServer,
		arg.SMTPServer,
		arg.SMTPTLS,
		arg.DatasourceUUID,
	)
	return err
}
