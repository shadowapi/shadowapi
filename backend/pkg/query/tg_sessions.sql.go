// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: tg_sessions.sql

package query

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const tgCreateSession = `-- name: TgCreateSession :one
INSERT INTO tg_sessions (account_id, session, phone)
VALUES ($1, $2, $3) RETURNING id
`

type TgCreateSessionParams struct {
	AccountID int64  `json:"account_id"`
	Session   []byte `json:"session"`
	Phone     string `json:"phone"`
}

func (q *Queries) TgCreateSession(ctx context.Context, arg TgCreateSessionParams) (int64, error) {
	row := q.db.QueryRow(ctx, tgCreateSession, arg.AccountID, arg.Session, arg.Phone)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const tgGetSession = `-- name: TgGetSession :one
SELECT id, phone, account_id, session, contacts_hash, description, created_at, updated_at FROM tg_sessions WHERE id = $1
`

func (q *Queries) TgGetSession(ctx context.Context, id int64) (TgSession, error) {
	row := q.db.QueryRow(ctx, tgGetSession, id)
	var i TgSession
	err := row.Scan(
		&i.ID,
		&i.Phone,
		&i.AccountID,
		&i.Session,
		&i.ContactsHash,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const tgGetSessionByPhone = `-- name: TgGetSessionByPhone :one
SELECT id, phone, account_id, session, contacts_hash, description, created_at, updated_at FROM tg_sessions WHERE phone = $1
`

func (q *Queries) TgGetSessionByPhone(ctx context.Context, phone string) (TgSession, error) {
	row := q.db.QueryRow(ctx, tgGetSessionByPhone, phone)
	var i TgSession
	err := row.Scan(
		&i.ID,
		&i.Phone,
		&i.AccountID,
		&i.Session,
		&i.ContactsHash,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const tgGetSessionList = `-- name: TgGetSessionList :many
SELECT id, phone, account_id, session, contacts_hash, description, created_at, updated_at FROM tg_sessions WHERE account_id = $1
`

func (q *Queries) TgGetSessionList(ctx context.Context, accountID int64) ([]TgSession, error) {
	rows, err := q.db.Query(ctx, tgGetSessionList, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TgSession
	for rows.Next() {
		var i TgSession
		if err := rows.Scan(
			&i.ID,
			&i.Phone,
			&i.AccountID,
			&i.Session,
			&i.ContactsHash,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const tgUpdateSession = `-- name: TgUpdateSession :exec
UPDATE tg_sessions
SET session = COALESCE(session, $1),
    contacts_hash = COALESCE(contacts_hash, $2),
    updated_at = FLOOR(EXTRACT(EPOCH FROM CURRENT_TIMESTAMP))
WHERE id = $3
`

type TgUpdateSessionParams struct {
	Session      []byte      `json:"session"`
	ContactsHash pgtype.Int8 `json:"contacts_hash"`
	ID           int64       `json:"id"`
}

func (q *Queries) TgUpdateSession(ctx context.Context, arg TgUpdateSessionParams) error {
	_, err := q.db.Exec(ctx, tgUpdateSession, arg.Session, arg.ContactsHash, arg.ID)
	return err
}
