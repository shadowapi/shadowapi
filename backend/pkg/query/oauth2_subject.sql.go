// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: oauth2_subject.sql

package query

import (
	"context"

	"github.com/gofrs/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createOauth2Subject = `-- name: CreateOauth2Subject :one
INSERT INTO oauth2_subject (
    uuid,
    user_uuid,
    client_uuid,
    token,
    created_at,
    updated_at,
    expired_at
) VALUES (
             $1::uuid,
             $2::uuid,
             $3::uuid,
             $4,
             NOW(),
             NOW(),
             $5
         ) RETURNING uuid, user_uuid, client_uuid, token, created_at, updated_at, expired_at
`

type CreateOauth2SubjectParams struct {
	UUID       pgtype.UUID        `json:"uuid"`
	UserUUID   pgtype.UUID        `json:"user_uuid"`
	ClientUuid pgtype.UUID        `json:"client_uuid"`
	Token      []byte             `json:"token"`
	ExpiredAt  pgtype.Timestamptz `json:"expired_at"`
}

func (q *Queries) CreateOauth2Subject(ctx context.Context, arg CreateOauth2SubjectParams) (Oauth2Subject, error) {
	row := q.db.QueryRow(ctx, createOauth2Subject,
		arg.UUID,
		arg.UserUUID,
		arg.ClientUuid,
		arg.Token,
		arg.ExpiredAt,
	)
	var i Oauth2Subject
	err := row.Scan(
		&i.UUID,
		&i.UserUUID,
		&i.ClientUuid,
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiredAt,
	)
	return i, err
}

const deleteOauth2Subject = `-- name: DeleteOauth2Subject :exec
DELETE FROM oauth2_subject
WHERE uuid = $1::uuid
`

func (q *Queries) DeleteOauth2Subject(ctx context.Context, argUuid pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteOauth2Subject, argUuid)
	return err
}

const getOauth2Subject = `-- name: GetOauth2Subject :one
SELECT
    oauth2_subject.uuid, oauth2_subject.user_uuid, oauth2_subject.client_uuid, oauth2_subject.token, oauth2_subject.created_at, oauth2_subject.updated_at, oauth2_subject.expired_at
FROM oauth2_subject
WHERE uuid = $1::uuid
`

type GetOauth2SubjectRow struct {
	Oauth2Subject Oauth2Subject `json:"oauth2_subject"`
}

func (q *Queries) GetOauth2Subject(ctx context.Context, argUuid pgtype.UUID) (GetOauth2SubjectRow, error) {
	row := q.db.QueryRow(ctx, getOauth2Subject, argUuid)
	var i GetOauth2SubjectRow
	err := row.Scan(
		&i.Oauth2Subject.UUID,
		&i.Oauth2Subject.UserUUID,
		&i.Oauth2Subject.ClientUuid,
		&i.Oauth2Subject.Token,
		&i.Oauth2Subject.CreatedAt,
		&i.Oauth2Subject.UpdatedAt,
		&i.Oauth2Subject.ExpiredAt,
	)
	return i, err
}

const getOauth2Subjects = `-- name: GetOauth2Subjects :many
WITH filtered_oauth2_subjects AS (
    SELECT os.uuid, os.user_uuid, os.client_uuid, os.token, os.created_at, os.updated_at, os.expired_at
    FROM oauth2_subject os
    WHERE
        (NULLIF($5, '') IS NULL OR os.user_uuid = $5::uuid)
      AND (NULLIF($6, '') IS NULL OR os.client_uuid = $6::uuid)
)
SELECT
    uuid, user_uuid, client_uuid, token, created_at, updated_at, expired_at,
    (SELECT count(*) FROM filtered_oauth2_subjects) as total_count
FROM filtered_oauth2_subjects
ORDER BY
    CASE WHEN $1 = 'created_at' AND $2 = 'asc' THEN created_at END ASC,
    CASE WHEN $1 = 'created_at' AND $2 = 'desc' THEN created_at END DESC,
    CASE WHEN $1 = 'updated_at' AND $2 = 'asc' THEN updated_at END ASC,
    CASE WHEN $1 = 'updated_at' AND $2 = 'desc' THEN updated_at END DESC,
    created_at DESC
LIMIT NULLIF($4::int, 0)
    OFFSET $3::int
`

type GetOauth2SubjectsParams struct {
	OrderBy        interface{} `json:"order_by"`
	OrderDirection interface{} `json:"order_direction"`
	Offset         int32       `json:"offset"`
	Limit          int32       `json:"limit"`
	UserUUID       interface{} `json:"user_uuid"`
	ClientUuid     interface{} `json:"client_uuid"`
}

type GetOauth2SubjectsRow struct {
	UUID       uuid.UUID          `json:"uuid"`
	UserUUID   *uuid.UUID         `json:"user_uuid"`
	ClientUuid *uuid.UUID         `json:"client_uuid"`
	Token      []byte             `json:"token"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
	ExpiredAt  pgtype.Timestamptz `json:"expired_at"`
	TotalCount int64              `json:"total_count"`
}

func (q *Queries) GetOauth2Subjects(ctx context.Context, arg GetOauth2SubjectsParams) ([]GetOauth2SubjectsRow, error) {
	rows, err := q.db.Query(ctx, getOauth2Subjects,
		arg.OrderBy,
		arg.OrderDirection,
		arg.Offset,
		arg.Limit,
		arg.UserUUID,
		arg.ClientUuid,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOauth2SubjectsRow
	for rows.Next() {
		var i GetOauth2SubjectsRow
		if err := rows.Scan(
			&i.UUID,
			&i.UserUUID,
			&i.ClientUuid,
			&i.Token,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ExpiredAt,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOauth2Subjects = `-- name: ListOauth2Subjects :many
SELECT
    oauth2_subject.uuid, oauth2_subject.user_uuid, oauth2_subject.client_uuid, oauth2_subject.token, oauth2_subject.created_at, oauth2_subject.updated_at, oauth2_subject.expired_at
FROM oauth2_subject
ORDER BY created_at DESC
LIMIT NULLIF($2::int, 0)
    OFFSET $1::int
`

type ListOauth2SubjectsParams struct {
	Offset int32 `json:"offset"`
	Limit  int32 `json:"limit"`
}

type ListOauth2SubjectsRow struct {
	Oauth2Subject Oauth2Subject `json:"oauth2_subject"`
}

func (q *Queries) ListOauth2Subjects(ctx context.Context, arg ListOauth2SubjectsParams) ([]ListOauth2SubjectsRow, error) {
	rows, err := q.db.Query(ctx, listOauth2Subjects, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListOauth2SubjectsRow
	for rows.Next() {
		var i ListOauth2SubjectsRow
		if err := rows.Scan(
			&i.Oauth2Subject.UUID,
			&i.Oauth2Subject.UserUUID,
			&i.Oauth2Subject.ClientUuid,
			&i.Oauth2Subject.Token,
			&i.Oauth2Subject.CreatedAt,
			&i.Oauth2Subject.UpdatedAt,
			&i.Oauth2Subject.ExpiredAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOauth2Subject = `-- name: UpdateOauth2Subject :exec
UPDATE oauth2_subject SET
                          token = $1,
                          updated_at = NOW(),
                          expired_at = $2
WHERE uuid = $3::uuid
`

type UpdateOauth2SubjectParams struct {
	Token     []byte             `json:"token"`
	ExpiredAt pgtype.Timestamptz `json:"expired_at"`
	UUID      pgtype.UUID        `json:"uuid"`
}

func (q *Queries) UpdateOauth2Subject(ctx context.Context, arg UpdateOauth2SubjectParams) error {
	_, err := q.db.Exec(ctx, updateOauth2Subject, arg.Token, arg.ExpiredAt, arg.UUID)
	return err
}
