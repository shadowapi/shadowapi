// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: contact.sql

package query

import (
	"context"

	"github.com/gofrs/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createContact = `-- name: CreateContact :one
INSERT INTO contact (
    uuid,
    user_uuid,
    instance_uuid,
    status,
    names,
    names_search,
    last,
    first,
    middle,
    birthday,
    birthday_type,
    salary,
    salary_data,
    last_positions,
    last_position_id,
    last_position_company_id,
    last_position_company_name,
    last_position_title,
    last_position_start_date,
    last_position_end_date,
    last_position_end_now,
    last_position_description,
    note_search,
    note_kpi_id,
    phones,
    phone_search,
    phone1,
    phone1_type,
    phone1_country,
    phone2,
    phone2_type,
    phone2_country,
    phone3,
    phone3_type,
    phone3_country,
    phone4,
    phone4_type,
    phone4_country,
    phone5,
    phone5_type,
    phone5_country,
    emails,
    email_search,
    email1,
    email1_type,
    email2,
    email2_type,
    email3,
    email3_type,
    email4,
    email4_type,
    email5,
    email5_type,
    messengers,
    messengers_search,
    skype_uuid,
    skype,
    whatsapp_uuid,
    whatsapp,
    wechat_uuid,
    wechat,
    line_uuid,
    line,
    socials,
    socials_search,
    linkedin_uuid,
    linkedin_url,
    facebook_uuid,
    facebook_url,
    twitter_uuid,
    twitter_url,
    github_uuid,
    github_url,
    vk_uuid,
    vk_url,
    odno_uuid,
    odno_url,
    hhru_uuid,
    hhru_url,
    habr_uuid,
    habr_url,
    moikrug_uuid,
    moikrug_url,
    instagram_uuid,
    instagram_url,
    social1_uuid,
    social1_url,
    social1_type,
    social2_uuid,
    social2_url,
    social2_type,
    social3_uuid,
    social3_url,
    social3_type,
    social4_uuid,
    social4_url,
    social4_type,
    social5_uuid,
    social5_url,
    social5_type,
    social6_uuid,
    social6_url,
    social6_type,
    social7_uuid,
    social7_url,
    social7_type,
    social8_uuid,
    social8_url,
    social8_type,
    social9_uuid,
    social9_url,
    social9_type,
    tracking_source,
    tracking_slug,
    cached_img,
    cached_img_data,
    crawl,
    duplicate_user_id,
    duplicate_alternative_id,
    duplicate_report_date,
    entry_date,
    edit_date,
    last_kpi_entry_date
) VALUES (
             $1,
             $2,
             $3,
             $4,
             $5,
             $6,
             $7,
             $8,
             $9,
             $10,
             $11,
             $12,
             $13,
             $14,
             $15,
             $16,
             $17,
             $18,
             $19,
             $20,
             $21,
             $22,
             $23,
             $24,
             $25,
             $26,
             $27,
             $28,
             $29,
             $30,
             $31,
             $32,
             $33,
             $34,
             $35,
             $36,
             $37,
             $38,
             $39,
             $40,
             $41,
             $42,
             $43,
             $44,
             $45,
             $46,
             $47,
             $48,
             $49,
             $50,
             $51,
             $52,
             $53,
             $54,
             $55,
             $56,
             $57,
             $58,
             $59,
             $60,
             $61,
             $62,
             $63,
             $64,
             $65,
             $66,
             $67,
             $68,
             $69,
             $70,
             $71,
             $72,
             $73,
             $74,
             $75,
             $76,
             $77,
             $78,
             $79,
             $80,
             $81,
             $82,
             $83,
             $84,
             $85,
             $86,
             $87,
             $88,
             $89,
             $90,
             $91,
             $92,
             $93,
             $94,
             $95,
             $96,
             $97,
             $98,
             $99,
             $100,
             $101,
             $102,
             $103,
             $104,
             $105,
             $106,
             $107,
             $108,
             $109,
             $110,
             $111,
             $112,
             $113,
             $114,
             $115,
             $116,
             $117,
             $118,
             $119,
             $120,
             $121,
             $122,
             $123
         ) RETURNING uuid, user_uuid, instance_uuid, status, names, names_search, last, first, middle, birthday, birthday_type, salary, salary_data, last_positions, last_position_id, last_position_company_id, last_position_company_name, last_position_title, last_position_start_date, last_position_end_date, last_position_end_now, last_position_description, note_search, note_kpi_id, phones, phone_search, phone1, phone1_type, phone1_country, phone2, phone2_type, phone2_country, phone3, phone3_type, phone3_country, phone4, phone4_type, phone4_country, phone5, phone5_type, phone5_country, emails, email_search, email1, email1_type, email2, email2_type, email3, email3_type, email4, email4_type, email5, email5_type, messengers, messengers_search, skype_uuid, skype, whatsapp_uuid, whatsapp, telegram_uuid, telegram, wechat_uuid, wechat, line_uuid, line, socials, socials_search, linkedin_uuid, linkedin_url, facebook_uuid, facebook_url, twitter_uuid, twitter_url, github_uuid, github_url, vk_uuid, vk_url, odno_uuid, odno_url, hhru_uuid, hhru_url, habr_uuid, habr_url, moikrug_uuid, moikrug_url, instagram_uuid, instagram_url, social1_uuid, social1_url, social1_type, social2_uuid, social2_url, social2_type, social3_uuid, social3_url, social3_type, social4_uuid, social4_url, social4_type, social5_uuid, social5_url, social5_type, social6_uuid, social6_url, social6_type, social7_uuid, social7_url, social7_type, social8_uuid, social8_url, social8_type, social9_uuid, social9_url, social9_type, tracking_source, tracking_slug, cached_img, cached_img_data, crawl, duplicate_user_id, duplicate_alternative_id, duplicate_report_date, entry_date, edit_date, last_kpi_entry_date
`

type CreateContactParams struct {
	UUID                    uuid.UUID          `json:"uuid"`
	UserUUID                *uuid.UUID         `json:"user_uuid"`
	InstanceUuid            *uuid.UUID         `json:"instance_uuid"`
	Status                  pgtype.Text        `json:"status"`
	Names                   []byte             `json:"names"`
	NamesSearch             pgtype.Text        `json:"names_search"`
	Last                    pgtype.Text        `json:"last"`
	First                   pgtype.Text        `json:"first"`
	Middle                  pgtype.Text        `json:"middle"`
	Birthday                pgtype.Timestamptz `json:"birthday"`
	BirthdayType            pgtype.Text        `json:"birthday_type"`
	Salary                  pgtype.Text        `json:"salary"`
	SalaryData              []byte             `json:"salary_data"`
	LastPositions           []byte             `json:"last_positions"`
	LastPositionID          pgtype.Int4        `json:"last_position_id"`
	LastPositionCompanyID   pgtype.Int4        `json:"last_position_company_id"`
	LastPositionCompanyName pgtype.Text        `json:"last_position_company_name"`
	LastPositionTitle       pgtype.Text        `json:"last_position_title"`
	LastPositionStartDate   pgtype.Timestamptz `json:"last_position_start_date"`
	LastPositionEndDate     pgtype.Timestamptz `json:"last_position_end_date"`
	LastPositionEndNow      pgtype.Bool        `json:"last_position_end_now"`
	LastPositionDescription pgtype.Text        `json:"last_position_description"`
	NoteSearch              pgtype.Text        `json:"note_search"`
	NoteKpiID               []byte             `json:"note_kpi_id"`
	Phones                  []byte             `json:"phones"`
	PhoneSearch             pgtype.Text        `json:"phone_search"`
	Phone1                  pgtype.Text        `json:"phone1"`
	Phone1Type              pgtype.Text        `json:"phone1_type"`
	Phone1Country           pgtype.Text        `json:"phone1_country"`
	Phone2                  pgtype.Text        `json:"phone2"`
	Phone2Type              pgtype.Text        `json:"phone2_type"`
	Phone2Country           pgtype.Text        `json:"phone2_country"`
	Phone3                  pgtype.Text        `json:"phone3"`
	Phone3Type              pgtype.Text        `json:"phone3_type"`
	Phone3Country           pgtype.Text        `json:"phone3_country"`
	Phone4                  pgtype.Text        `json:"phone4"`
	Phone4Type              pgtype.Text        `json:"phone4_type"`
	Phone4Country           pgtype.Text        `json:"phone4_country"`
	Phone5                  pgtype.Text        `json:"phone5"`
	Phone5Type              pgtype.Text        `json:"phone5_type"`
	Phone5Country           pgtype.Text        `json:"phone5_country"`
	Emails                  []byte             `json:"emails"`
	EmailSearch             pgtype.Text        `json:"email_search"`
	Email1                  pgtype.Text        `json:"email1"`
	Email1Type              pgtype.Text        `json:"email1_type"`
	Email2                  pgtype.Text        `json:"email2"`
	Email2Type              pgtype.Text        `json:"email2_type"`
	Email3                  pgtype.Text        `json:"email3"`
	Email3Type              pgtype.Text        `json:"email3_type"`
	Email4                  pgtype.Text        `json:"email4"`
	Email4Type              pgtype.Text        `json:"email4_type"`
	Email5                  pgtype.Text        `json:"email5"`
	Email5Type              pgtype.Text        `json:"email5_type"`
	Messengers              []byte             `json:"messengers"`
	MessengersSearch        pgtype.Text        `json:"messengers_search"`
	SkypeUuid               *uuid.UUID         `json:"skype_uuid"`
	Skype                   pgtype.Text        `json:"skype"`
	WhatsappUuid            *uuid.UUID         `json:"whatsapp_uuid"`
	Whatsapp                pgtype.Text        `json:"whatsapp"`
	WechatUuid              *uuid.UUID         `json:"wechat_uuid"`
	Wechat                  pgtype.Text        `json:"wechat"`
	LineUuid                *uuid.UUID         `json:"line_uuid"`
	Line                    pgtype.Text        `json:"line"`
	Socials                 []byte             `json:"socials"`
	SocialsSearch           pgtype.Text        `json:"socials_search"`
	LinkedinUuid            *uuid.UUID         `json:"linkedin_uuid"`
	LinkedinUrl             pgtype.Text        `json:"linkedin_url"`
	FacebookUuid            *uuid.UUID         `json:"facebook_uuid"`
	FacebookUrl             pgtype.Text        `json:"facebook_url"`
	TwitterUuid             *uuid.UUID         `json:"twitter_uuid"`
	TwitterUrl              pgtype.Text        `json:"twitter_url"`
	GithubUuid              *uuid.UUID         `json:"github_uuid"`
	GithubUrl               pgtype.Text        `json:"github_url"`
	VkUuid                  *uuid.UUID         `json:"vk_uuid"`
	VkUrl                   pgtype.Text        `json:"vk_url"`
	OdnoUuid                *uuid.UUID         `json:"odno_uuid"`
	OdnoUrl                 pgtype.Text        `json:"odno_url"`
	HhruUuid                *uuid.UUID         `json:"hhru_uuid"`
	HhruUrl                 pgtype.Text        `json:"hhru_url"`
	HabrUuid                *uuid.UUID         `json:"habr_uuid"`
	HabrUrl                 pgtype.Text        `json:"habr_url"`
	MoikrugUuid             *uuid.UUID         `json:"moikrug_uuid"`
	MoikrugUrl              pgtype.Text        `json:"moikrug_url"`
	InstagramUuid           *uuid.UUID         `json:"instagram_uuid"`
	InstagramUrl            pgtype.Text        `json:"instagram_url"`
	Social1Uuid             *uuid.UUID         `json:"social1_uuid"`
	Social1Url              pgtype.Text        `json:"social1_url"`
	Social1Type             pgtype.Text        `json:"social1_type"`
	Social2Uuid             *uuid.UUID         `json:"social2_uuid"`
	Social2Url              pgtype.Text        `json:"social2_url"`
	Social2Type             pgtype.Text        `json:"social2_type"`
	Social3Uuid             *uuid.UUID         `json:"social3_uuid"`
	Social3Url              pgtype.Text        `json:"social3_url"`
	Social3Type             pgtype.Text        `json:"social3_type"`
	Social4Uuid             *uuid.UUID         `json:"social4_uuid"`
	Social4Url              pgtype.Text        `json:"social4_url"`
	Social4Type             pgtype.Text        `json:"social4_type"`
	Social5Uuid             *uuid.UUID         `json:"social5_uuid"`
	Social5Url              pgtype.Text        `json:"social5_url"`
	Social5Type             pgtype.Text        `json:"social5_type"`
	Social6Uuid             *uuid.UUID         `json:"social6_uuid"`
	Social6Url              pgtype.Text        `json:"social6_url"`
	Social6Type             pgtype.Text        `json:"social6_type"`
	Social7Uuid             *uuid.UUID         `json:"social7_uuid"`
	Social7Url              pgtype.Text        `json:"social7_url"`
	Social7Type             pgtype.Text        `json:"social7_type"`
	Social8Uuid             *uuid.UUID         `json:"social8_uuid"`
	Social8Url              pgtype.Text        `json:"social8_url"`
	Social8Type             pgtype.Text        `json:"social8_type"`
	Social9Uuid             *uuid.UUID         `json:"social9_uuid"`
	Social9Url              pgtype.Text        `json:"social9_url"`
	Social9Type             pgtype.Text        `json:"social9_type"`
	TrackingSource          pgtype.Text        `json:"tracking_source"`
	TrackingSlug            pgtype.Text        `json:"tracking_slug"`
	CachedImg               pgtype.Text        `json:"cached_img"`
	CachedImgData           []byte             `json:"cached_img_data"`
	Crawl                   []byte             `json:"crawl"`
	DuplicateUserID         pgtype.Text        `json:"duplicate_user_id"`
	DuplicateAlternativeID  pgtype.Text        `json:"duplicate_alternative_id"`
	DuplicateReportDate     pgtype.Timestamptz `json:"duplicate_report_date"`
	EntryDate               pgtype.Timestamptz `json:"entry_date"`
	EditDate                pgtype.Timestamptz `json:"edit_date"`
	LastKpiEntryDate        pgtype.Timestamptz `json:"last_kpi_entry_date"`
}

func (q *Queries) CreateContact(ctx context.Context, arg CreateContactParams) (Contact, error) {
	row := q.db.QueryRow(ctx, createContact,
		arg.UUID,
		arg.UserUUID,
		arg.InstanceUuid,
		arg.Status,
		arg.Names,
		arg.NamesSearch,
		arg.Last,
		arg.First,
		arg.Middle,
		arg.Birthday,
		arg.BirthdayType,
		arg.Salary,
		arg.SalaryData,
		arg.LastPositions,
		arg.LastPositionID,
		arg.LastPositionCompanyID,
		arg.LastPositionCompanyName,
		arg.LastPositionTitle,
		arg.LastPositionStartDate,
		arg.LastPositionEndDate,
		arg.LastPositionEndNow,
		arg.LastPositionDescription,
		arg.NoteSearch,
		arg.NoteKpiID,
		arg.Phones,
		arg.PhoneSearch,
		arg.Phone1,
		arg.Phone1Type,
		arg.Phone1Country,
		arg.Phone2,
		arg.Phone2Type,
		arg.Phone2Country,
		arg.Phone3,
		arg.Phone3Type,
		arg.Phone3Country,
		arg.Phone4,
		arg.Phone4Type,
		arg.Phone4Country,
		arg.Phone5,
		arg.Phone5Type,
		arg.Phone5Country,
		arg.Emails,
		arg.EmailSearch,
		arg.Email1,
		arg.Email1Type,
		arg.Email2,
		arg.Email2Type,
		arg.Email3,
		arg.Email3Type,
		arg.Email4,
		arg.Email4Type,
		arg.Email5,
		arg.Email5Type,
		arg.Messengers,
		arg.MessengersSearch,
		arg.SkypeUuid,
		arg.Skype,
		arg.WhatsappUuid,
		arg.Whatsapp,
		arg.WechatUuid,
		arg.Wechat,
		arg.LineUuid,
		arg.Line,
		arg.Socials,
		arg.SocialsSearch,
		arg.LinkedinUuid,
		arg.LinkedinUrl,
		arg.FacebookUuid,
		arg.FacebookUrl,
		arg.TwitterUuid,
		arg.TwitterUrl,
		arg.GithubUuid,
		arg.GithubUrl,
		arg.VkUuid,
		arg.VkUrl,
		arg.OdnoUuid,
		arg.OdnoUrl,
		arg.HhruUuid,
		arg.HhruUrl,
		arg.HabrUuid,
		arg.HabrUrl,
		arg.MoikrugUuid,
		arg.MoikrugUrl,
		arg.InstagramUuid,
		arg.InstagramUrl,
		arg.Social1Uuid,
		arg.Social1Url,
		arg.Social1Type,
		arg.Social2Uuid,
		arg.Social2Url,
		arg.Social2Type,
		arg.Social3Uuid,
		arg.Social3Url,
		arg.Social3Type,
		arg.Social4Uuid,
		arg.Social4Url,
		arg.Social4Type,
		arg.Social5Uuid,
		arg.Social5Url,
		arg.Social5Type,
		arg.Social6Uuid,
		arg.Social6Url,
		arg.Social6Type,
		arg.Social7Uuid,
		arg.Social7Url,
		arg.Social7Type,
		arg.Social8Uuid,
		arg.Social8Url,
		arg.Social8Type,
		arg.Social9Uuid,
		arg.Social9Url,
		arg.Social9Type,
		arg.TrackingSource,
		arg.TrackingSlug,
		arg.CachedImg,
		arg.CachedImgData,
		arg.Crawl,
		arg.DuplicateUserID,
		arg.DuplicateAlternativeID,
		arg.DuplicateReportDate,
		arg.EntryDate,
		arg.EditDate,
		arg.LastKpiEntryDate,
	)
	var i Contact
	err := row.Scan(
		&i.UUID,
		&i.UserUUID,
		&i.InstanceUuid,
		&i.Status,
		&i.Names,
		&i.NamesSearch,
		&i.Last,
		&i.First,
		&i.Middle,
		&i.Birthday,
		&i.BirthdayType,
		&i.Salary,
		&i.SalaryData,
		&i.LastPositions,
		&i.LastPositionID,
		&i.LastPositionCompanyID,
		&i.LastPositionCompanyName,
		&i.LastPositionTitle,
		&i.LastPositionStartDate,
		&i.LastPositionEndDate,
		&i.LastPositionEndNow,
		&i.LastPositionDescription,
		&i.NoteSearch,
		&i.NoteKpiID,
		&i.Phones,
		&i.PhoneSearch,
		&i.Phone1,
		&i.Phone1Type,
		&i.Phone1Country,
		&i.Phone2,
		&i.Phone2Type,
		&i.Phone2Country,
		&i.Phone3,
		&i.Phone3Type,
		&i.Phone3Country,
		&i.Phone4,
		&i.Phone4Type,
		&i.Phone4Country,
		&i.Phone5,
		&i.Phone5Type,
		&i.Phone5Country,
		&i.Emails,
		&i.EmailSearch,
		&i.Email1,
		&i.Email1Type,
		&i.Email2,
		&i.Email2Type,
		&i.Email3,
		&i.Email3Type,
		&i.Email4,
		&i.Email4Type,
		&i.Email5,
		&i.Email5Type,
		&i.Messengers,
		&i.MessengersSearch,
		&i.SkypeUuid,
		&i.Skype,
		&i.WhatsappUuid,
		&i.Whatsapp,
		&i.TelegramUuid,
		&i.Telegram,
		&i.WechatUuid,
		&i.Wechat,
		&i.LineUuid,
		&i.Line,
		&i.Socials,
		&i.SocialsSearch,
		&i.LinkedinUuid,
		&i.LinkedinUrl,
		&i.FacebookUuid,
		&i.FacebookUrl,
		&i.TwitterUuid,
		&i.TwitterUrl,
		&i.GithubUuid,
		&i.GithubUrl,
		&i.VkUuid,
		&i.VkUrl,
		&i.OdnoUuid,
		&i.OdnoUrl,
		&i.HhruUuid,
		&i.HhruUrl,
		&i.HabrUuid,
		&i.HabrUrl,
		&i.MoikrugUuid,
		&i.MoikrugUrl,
		&i.InstagramUuid,
		&i.InstagramUrl,
		&i.Social1Uuid,
		&i.Social1Url,
		&i.Social1Type,
		&i.Social2Uuid,
		&i.Social2Url,
		&i.Social2Type,
		&i.Social3Uuid,
		&i.Social3Url,
		&i.Social3Type,
		&i.Social4Uuid,
		&i.Social4Url,
		&i.Social4Type,
		&i.Social5Uuid,
		&i.Social5Url,
		&i.Social5Type,
		&i.Social6Uuid,
		&i.Social6Url,
		&i.Social6Type,
		&i.Social7Uuid,
		&i.Social7Url,
		&i.Social7Type,
		&i.Social8Uuid,
		&i.Social8Url,
		&i.Social8Type,
		&i.Social9Uuid,
		&i.Social9Url,
		&i.Social9Type,
		&i.TrackingSource,
		&i.TrackingSlug,
		&i.CachedImg,
		&i.CachedImgData,
		&i.Crawl,
		&i.DuplicateUserID,
		&i.DuplicateAlternativeID,
		&i.DuplicateReportDate,
		&i.EntryDate,
		&i.EditDate,
		&i.LastKpiEntryDate,
	)
	return i, err
}

const deleteContact = `-- name: DeleteContact :exec
DELETE FROM contact
WHERE uuid = $1
`

func (q *Queries) DeleteContact(ctx context.Context, argUuid uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteContact, argUuid)
	return err
}

const getContact = `-- name: GetContact :one
SELECT
    uuid, user_uuid, instance_uuid, status, names, names_search, last, first, middle, birthday, birthday_type, salary, salary_data, last_positions, last_position_id, last_position_company_id, last_position_company_name, last_position_title, last_position_start_date, last_position_end_date, last_position_end_now, last_position_description, note_search, note_kpi_id, phones, phone_search, phone1, phone1_type, phone1_country, phone2, phone2_type, phone2_country, phone3, phone3_type, phone3_country, phone4, phone4_type, phone4_country, phone5, phone5_type, phone5_country, emails, email_search, email1, email1_type, email2, email2_type, email3, email3_type, email4, email4_type, email5, email5_type, messengers, messengers_search, skype_uuid, skype, whatsapp_uuid, whatsapp, telegram_uuid, telegram, wechat_uuid, wechat, line_uuid, line, socials, socials_search, linkedin_uuid, linkedin_url, facebook_uuid, facebook_url, twitter_uuid, twitter_url, github_uuid, github_url, vk_uuid, vk_url, odno_uuid, odno_url, hhru_uuid, hhru_url, habr_uuid, habr_url, moikrug_uuid, moikrug_url, instagram_uuid, instagram_url, social1_uuid, social1_url, social1_type, social2_uuid, social2_url, social2_type, social3_uuid, social3_url, social3_type, social4_uuid, social4_url, social4_type, social5_uuid, social5_url, social5_type, social6_uuid, social6_url, social6_type, social7_uuid, social7_url, social7_type, social8_uuid, social8_url, social8_type, social9_uuid, social9_url, social9_type, tracking_source, tracking_slug, cached_img, cached_img_data, crawl, duplicate_user_id, duplicate_alternative_id, duplicate_report_date, entry_date, edit_date, last_kpi_entry_date
FROM contact
WHERE
    uuid = $1
LIMIT 1
`

func (q *Queries) GetContact(ctx context.Context, argUuid uuid.UUID) (Contact, error) {
	row := q.db.QueryRow(ctx, getContact, argUuid)
	var i Contact
	err := row.Scan(
		&i.UUID,
		&i.UserUUID,
		&i.InstanceUuid,
		&i.Status,
		&i.Names,
		&i.NamesSearch,
		&i.Last,
		&i.First,
		&i.Middle,
		&i.Birthday,
		&i.BirthdayType,
		&i.Salary,
		&i.SalaryData,
		&i.LastPositions,
		&i.LastPositionID,
		&i.LastPositionCompanyID,
		&i.LastPositionCompanyName,
		&i.LastPositionTitle,
		&i.LastPositionStartDate,
		&i.LastPositionEndDate,
		&i.LastPositionEndNow,
		&i.LastPositionDescription,
		&i.NoteSearch,
		&i.NoteKpiID,
		&i.Phones,
		&i.PhoneSearch,
		&i.Phone1,
		&i.Phone1Type,
		&i.Phone1Country,
		&i.Phone2,
		&i.Phone2Type,
		&i.Phone2Country,
		&i.Phone3,
		&i.Phone3Type,
		&i.Phone3Country,
		&i.Phone4,
		&i.Phone4Type,
		&i.Phone4Country,
		&i.Phone5,
		&i.Phone5Type,
		&i.Phone5Country,
		&i.Emails,
		&i.EmailSearch,
		&i.Email1,
		&i.Email1Type,
		&i.Email2,
		&i.Email2Type,
		&i.Email3,
		&i.Email3Type,
		&i.Email4,
		&i.Email4Type,
		&i.Email5,
		&i.Email5Type,
		&i.Messengers,
		&i.MessengersSearch,
		&i.SkypeUuid,
		&i.Skype,
		&i.WhatsappUuid,
		&i.Whatsapp,
		&i.TelegramUuid,
		&i.Telegram,
		&i.WechatUuid,
		&i.Wechat,
		&i.LineUuid,
		&i.Line,
		&i.Socials,
		&i.SocialsSearch,
		&i.LinkedinUuid,
		&i.LinkedinUrl,
		&i.FacebookUuid,
		&i.FacebookUrl,
		&i.TwitterUuid,
		&i.TwitterUrl,
		&i.GithubUuid,
		&i.GithubUrl,
		&i.VkUuid,
		&i.VkUrl,
		&i.OdnoUuid,
		&i.OdnoUrl,
		&i.HhruUuid,
		&i.HhruUrl,
		&i.HabrUuid,
		&i.HabrUrl,
		&i.MoikrugUuid,
		&i.MoikrugUrl,
		&i.InstagramUuid,
		&i.InstagramUrl,
		&i.Social1Uuid,
		&i.Social1Url,
		&i.Social1Type,
		&i.Social2Uuid,
		&i.Social2Url,
		&i.Social2Type,
		&i.Social3Uuid,
		&i.Social3Url,
		&i.Social3Type,
		&i.Social4Uuid,
		&i.Social4Url,
		&i.Social4Type,
		&i.Social5Uuid,
		&i.Social5Url,
		&i.Social5Type,
		&i.Social6Uuid,
		&i.Social6Url,
		&i.Social6Type,
		&i.Social7Uuid,
		&i.Social7Url,
		&i.Social7Type,
		&i.Social8Uuid,
		&i.Social8Url,
		&i.Social8Type,
		&i.Social9Uuid,
		&i.Social9Url,
		&i.Social9Type,
		&i.TrackingSource,
		&i.TrackingSlug,
		&i.CachedImg,
		&i.CachedImgData,
		&i.Crawl,
		&i.DuplicateUserID,
		&i.DuplicateAlternativeID,
		&i.DuplicateReportDate,
		&i.EntryDate,
		&i.EditDate,
		&i.LastKpiEntryDate,
	)
	return i, err
}

const listContacts = `-- name: ListContacts :many
SELECT
    uuid, user_uuid, instance_uuid, status, names, names_search, last, first, middle, birthday, birthday_type, salary, salary_data, last_positions, last_position_id, last_position_company_id, last_position_company_name, last_position_title, last_position_start_date, last_position_end_date, last_position_end_now, last_position_description, note_search, note_kpi_id, phones, phone_search, phone1, phone1_type, phone1_country, phone2, phone2_type, phone2_country, phone3, phone3_type, phone3_country, phone4, phone4_type, phone4_country, phone5, phone5_type, phone5_country, emails, email_search, email1, email1_type, email2, email2_type, email3, email3_type, email4, email4_type, email5, email5_type, messengers, messengers_search, skype_uuid, skype, whatsapp_uuid, whatsapp, telegram_uuid, telegram, wechat_uuid, wechat, line_uuid, line, socials, socials_search, linkedin_uuid, linkedin_url, facebook_uuid, facebook_url, twitter_uuid, twitter_url, github_uuid, github_url, vk_uuid, vk_url, odno_uuid, odno_url, hhru_uuid, hhru_url, habr_uuid, habr_url, moikrug_uuid, moikrug_url, instagram_uuid, instagram_url, social1_uuid, social1_url, social1_type, social2_uuid, social2_url, social2_type, social3_uuid, social3_url, social3_type, social4_uuid, social4_url, social4_type, social5_uuid, social5_url, social5_type, social6_uuid, social6_url, social6_type, social7_uuid, social7_url, social7_type, social8_uuid, social8_url, social8_type, social9_uuid, social9_url, social9_type, tracking_source, tracking_slug, cached_img, cached_img_data, crawl, duplicate_user_id, duplicate_alternative_id, duplicate_report_date, entry_date, edit_date, last_kpi_entry_date
FROM contact
ORDER BY entry_date DESC
LIMIT CASE WHEN $2::int = 0 THEN NULL ELSE $2::int END
    OFFSET $1::int
`

type ListContactsParams struct {
	OffsetRecords int32 `json:"offset_records"`
	LimitRecords  int32 `json:"limit_records"`
}

func (q *Queries) ListContacts(ctx context.Context, arg ListContactsParams) ([]Contact, error) {
	rows, err := q.db.Query(ctx, listContacts, arg.OffsetRecords, arg.LimitRecords)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Contact
	for rows.Next() {
		var i Contact
		if err := rows.Scan(
			&i.UUID,
			&i.UserUUID,
			&i.InstanceUuid,
			&i.Status,
			&i.Names,
			&i.NamesSearch,
			&i.Last,
			&i.First,
			&i.Middle,
			&i.Birthday,
			&i.BirthdayType,
			&i.Salary,
			&i.SalaryData,
			&i.LastPositions,
			&i.LastPositionID,
			&i.LastPositionCompanyID,
			&i.LastPositionCompanyName,
			&i.LastPositionTitle,
			&i.LastPositionStartDate,
			&i.LastPositionEndDate,
			&i.LastPositionEndNow,
			&i.LastPositionDescription,
			&i.NoteSearch,
			&i.NoteKpiID,
			&i.Phones,
			&i.PhoneSearch,
			&i.Phone1,
			&i.Phone1Type,
			&i.Phone1Country,
			&i.Phone2,
			&i.Phone2Type,
			&i.Phone2Country,
			&i.Phone3,
			&i.Phone3Type,
			&i.Phone3Country,
			&i.Phone4,
			&i.Phone4Type,
			&i.Phone4Country,
			&i.Phone5,
			&i.Phone5Type,
			&i.Phone5Country,
			&i.Emails,
			&i.EmailSearch,
			&i.Email1,
			&i.Email1Type,
			&i.Email2,
			&i.Email2Type,
			&i.Email3,
			&i.Email3Type,
			&i.Email4,
			&i.Email4Type,
			&i.Email5,
			&i.Email5Type,
			&i.Messengers,
			&i.MessengersSearch,
			&i.SkypeUuid,
			&i.Skype,
			&i.WhatsappUuid,
			&i.Whatsapp,
			&i.TelegramUuid,
			&i.Telegram,
			&i.WechatUuid,
			&i.Wechat,
			&i.LineUuid,
			&i.Line,
			&i.Socials,
			&i.SocialsSearch,
			&i.LinkedinUuid,
			&i.LinkedinUrl,
			&i.FacebookUuid,
			&i.FacebookUrl,
			&i.TwitterUuid,
			&i.TwitterUrl,
			&i.GithubUuid,
			&i.GithubUrl,
			&i.VkUuid,
			&i.VkUrl,
			&i.OdnoUuid,
			&i.OdnoUrl,
			&i.HhruUuid,
			&i.HhruUrl,
			&i.HabrUuid,
			&i.HabrUrl,
			&i.MoikrugUuid,
			&i.MoikrugUrl,
			&i.InstagramUuid,
			&i.InstagramUrl,
			&i.Social1Uuid,
			&i.Social1Url,
			&i.Social1Type,
			&i.Social2Uuid,
			&i.Social2Url,
			&i.Social2Type,
			&i.Social3Uuid,
			&i.Social3Url,
			&i.Social3Type,
			&i.Social4Uuid,
			&i.Social4Url,
			&i.Social4Type,
			&i.Social5Uuid,
			&i.Social5Url,
			&i.Social5Type,
			&i.Social6Uuid,
			&i.Social6Url,
			&i.Social6Type,
			&i.Social7Uuid,
			&i.Social7Url,
			&i.Social7Type,
			&i.Social8Uuid,
			&i.Social8Url,
			&i.Social8Type,
			&i.Social9Uuid,
			&i.Social9Url,
			&i.Social9Type,
			&i.TrackingSource,
			&i.TrackingSlug,
			&i.CachedImg,
			&i.CachedImgData,
			&i.Crawl,
			&i.DuplicateUserID,
			&i.DuplicateAlternativeID,
			&i.DuplicateReportDate,
			&i.EntryDate,
			&i.EditDate,
			&i.LastKpiEntryDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateContact = `-- name: UpdateContact :exec
UPDATE contact
SET
    user_uuid                 = COALESCE($1, user_uuid),
    instance_uuid             = COALESCE($2, instance_uuid),
    status                    = COALESCE($3, status),
    names                     = COALESCE($4, names),
    names_search              = COALESCE($5, names_search),
    last                      = COALESCE($6, last),
    first                     = COALESCE($7, first),
    middle                    = COALESCE($8, middle),
    birthday                  = COALESCE($9, birthday),
    birthday_type             = COALESCE($10, birthday_type),
    salary                    = COALESCE($11, salary),
    salary_data               = COALESCE($12, salary_data),
    last_positions            = COALESCE($13, last_positions),
    last_position_id          = COALESCE($14, last_position_id),
    last_position_company_id  = COALESCE($15, last_position_company_id),
    last_position_company_name= COALESCE($16, last_position_company_name),
    last_position_title       = COALESCE($17, last_position_title),
    last_position_start_date  = COALESCE($18, last_position_start_date),
    last_position_end_date    = COALESCE($19, last_position_end_date),
    last_position_end_now     = COALESCE($20, last_position_end_now),
    last_position_description = COALESCE($21, last_position_description),
    note_search               = COALESCE($22, note_search),
    note_kpi_id               = COALESCE($23, note_kpi_id),
    phones                    = COALESCE($24, phones),
    phone_search              = COALESCE($25, phone_search),
    phone1                    = COALESCE($26, phone1),
    phone1_type               = COALESCE($27, phone1_type),
    phone1_country            = COALESCE($28, phone1_country),
    phone2                    = COALESCE($29, phone2),
    phone2_type               = COALESCE($30, phone2_type),
    phone2_country            = COALESCE($31, phone2_country),
    phone3                    = COALESCE($32, phone3),
    phone3_type               = COALESCE($33, phone3_type),
    phone3_country            = COALESCE($34, phone3_country),
    phone4                    = COALESCE($35, phone4),
    phone4_type               = COALESCE($36, phone4_type),
    phone4_country            = COALESCE($37, phone4_country),
    phone5                    = COALESCE($38, phone5),
    phone5_type               = COALESCE($39, phone5_type),
    phone5_country            = COALESCE($40, phone5_country),
    emails                    = COALESCE($41, emails),
    email_search              = COALESCE($42, email_search),
    email1                    = COALESCE($43, email1),
    email1_type               = COALESCE($44, email1_type),
    email2                    = COALESCE($45, email2),
    email2_type               = COALESCE($46, email2_type),
    email3                    = COALESCE($47, email3),
    email3_type               = COALESCE($48, email3_type),
    email4                    = COALESCE($49, email4),
    email4_type               = COALESCE($50, email4_type),
    email5                    = COALESCE($51, email5),
    email5_type               = COALESCE($52, email5_type),
    messengers                = COALESCE($53, messengers),
    messengers_search         = COALESCE($54, messengers_search),
    skype_uuid                = COALESCE($55, skype_uuid),
    skype                     = COALESCE($56, skype),
    whatsapp_uuid             = COALESCE($57, whatsapp_uuid),
    whatsapp                  = COALESCE($58, whatsapp),
    wechat_uuid               = COALESCE($59, wechat_uuid),
    wechat                    = COALESCE($60, wechat),
    line_uuid                 = COALESCE($61, line_uuid),
    line                      = COALESCE($62, line),
    socials                   = COALESCE($63, socials),
    socials_search            = COALESCE($64, socials_search),
    linkedin_uuid             = COALESCE($65, linkedin_uuid),
    linkedin_url              = COALESCE($66, linkedin_url),
    facebook_uuid             = COALESCE($67, facebook_uuid),
    facebook_url              = COALESCE($68, facebook_url),
    twitter_uuid              = COALESCE($69, twitter_uuid),
    twitter_url               = COALESCE($70, twitter_url),
    github_uuid               = COALESCE($71, github_uuid),
    github_url                = COALESCE($72, github_url),
    vk_uuid                   = COALESCE($73, vk_uuid),
    vk_url                    = COALESCE($74, vk_url),
    odno_uuid                 = COALESCE($75, odno_uuid),
    odno_url                  = COALESCE($76, odno_url),
    hhru_uuid                 = COALESCE($77, hhru_uuid),
    hhru_url                  = COALESCE($78, hhru_url),
    habr_uuid                 = COALESCE($79, habr_uuid),
    habr_url                  = COALESCE($80, habr_url),
    moikrug_uuid              = COALESCE($81, moikrug_uuid),
    moikrug_url               = COALESCE($82, moikrug_url),
    instagram_uuid            = COALESCE($83, instagram_uuid),
    instagram_url             = COALESCE($84, instagram_url),
    social1_uuid              = COALESCE($85, social1_uuid),
    social1_url               = COALESCE($86, social1_url),
    social1_type              = COALESCE($87, social1_type),
    social2_uuid              = COALESCE($88, social2_uuid),
    social2_url               = COALESCE($89, social2_url),
    social2_type              = COALESCE($90, social2_type),
    social3_uuid              = COALESCE($91, social3_uuid),
    social3_url               = COALESCE($92, social3_url),
    social3_type              = COALESCE($93, social3_type),
    social4_uuid              = COALESCE($94, social4_uuid),
    social4_url               = COALESCE($95, social4_url),
    social4_type              = COALESCE($96, social4_type),
    social5_uuid              = COALESCE($97, social5_uuid),
    social5_url               = COALESCE($98, social5_url),
    social5_type              = COALESCE($99, social5_type),
    social6_uuid              = COALESCE($100, social6_uuid),
    social6_url               = COALESCE($101, social6_url),
    social6_type              = COALESCE($102, social6_type),
    social7_uuid              = COALESCE($103, social7_uuid),
    social7_url               = COALESCE($104, social7_url),
    social7_type              = COALESCE($105, social7_type),
    social8_uuid              = COALESCE($106, social8_uuid),
    social8_url               = COALESCE($107, social8_url),
    social8_type              = COALESCE($108, social8_type),
    social9_uuid              = COALESCE($109, social9_uuid),
    social9_url               = COALESCE($110, social9_url),
    social9_type              = COALESCE($111, social9_type),
    tracking_source           = COALESCE($112, tracking_source),
    tracking_slug             = COALESCE($113, tracking_slug),
    cached_img                = COALESCE($114, cached_img),
    cached_img_data           = COALESCE($115, cached_img_data),
    crawl                     = COALESCE($116, crawl),
    duplicate_user_id         = COALESCE($117, duplicate_user_id),
    duplicate_alternative_id  = COALESCE($118, duplicate_alternative_id),
    duplicate_report_date     = COALESCE($119, duplicate_report_date),
    entry_date                = COALESCE($120, entry_date),
    edit_date                 = COALESCE($121, edit_date),
    last_kpi_entry_date       = COALESCE($122, last_kpi_entry_date)
WHERE uuid = $123
`

type UpdateContactParams struct {
	UserUUID                *uuid.UUID         `json:"user_uuid"`
	InstanceUuid            *uuid.UUID         `json:"instance_uuid"`
	Status                  pgtype.Text        `json:"status"`
	Names                   []byte             `json:"names"`
	NamesSearch             pgtype.Text        `json:"names_search"`
	Last                    pgtype.Text        `json:"last"`
	First                   pgtype.Text        `json:"first"`
	Middle                  pgtype.Text        `json:"middle"`
	Birthday                pgtype.Timestamptz `json:"birthday"`
	BirthdayType            pgtype.Text        `json:"birthday_type"`
	Salary                  pgtype.Text        `json:"salary"`
	SalaryData              []byte             `json:"salary_data"`
	LastPositions           []byte             `json:"last_positions"`
	LastPositionID          pgtype.Int4        `json:"last_position_id"`
	LastPositionCompanyID   pgtype.Int4        `json:"last_position_company_id"`
	LastPositionCompanyName pgtype.Text        `json:"last_position_company_name"`
	LastPositionTitle       pgtype.Text        `json:"last_position_title"`
	LastPositionStartDate   pgtype.Timestamptz `json:"last_position_start_date"`
	LastPositionEndDate     pgtype.Timestamptz `json:"last_position_end_date"`
	LastPositionEndNow      pgtype.Bool        `json:"last_position_end_now"`
	LastPositionDescription pgtype.Text        `json:"last_position_description"`
	NoteSearch              pgtype.Text        `json:"note_search"`
	NoteKpiID               []byte             `json:"note_kpi_id"`
	Phones                  []byte             `json:"phones"`
	PhoneSearch             pgtype.Text        `json:"phone_search"`
	Phone1                  pgtype.Text        `json:"phone1"`
	Phone1Type              pgtype.Text        `json:"phone1_type"`
	Phone1Country           pgtype.Text        `json:"phone1_country"`
	Phone2                  pgtype.Text        `json:"phone2"`
	Phone2Type              pgtype.Text        `json:"phone2_type"`
	Phone2Country           pgtype.Text        `json:"phone2_country"`
	Phone3                  pgtype.Text        `json:"phone3"`
	Phone3Type              pgtype.Text        `json:"phone3_type"`
	Phone3Country           pgtype.Text        `json:"phone3_country"`
	Phone4                  pgtype.Text        `json:"phone4"`
	Phone4Type              pgtype.Text        `json:"phone4_type"`
	Phone4Country           pgtype.Text        `json:"phone4_country"`
	Phone5                  pgtype.Text        `json:"phone5"`
	Phone5Type              pgtype.Text        `json:"phone5_type"`
	Phone5Country           pgtype.Text        `json:"phone5_country"`
	Emails                  []byte             `json:"emails"`
	EmailSearch             pgtype.Text        `json:"email_search"`
	Email1                  pgtype.Text        `json:"email1"`
	Email1Type              pgtype.Text        `json:"email1_type"`
	Email2                  pgtype.Text        `json:"email2"`
	Email2Type              pgtype.Text        `json:"email2_type"`
	Email3                  pgtype.Text        `json:"email3"`
	Email3Type              pgtype.Text        `json:"email3_type"`
	Email4                  pgtype.Text        `json:"email4"`
	Email4Type              pgtype.Text        `json:"email4_type"`
	Email5                  pgtype.Text        `json:"email5"`
	Email5Type              pgtype.Text        `json:"email5_type"`
	Messengers              []byte             `json:"messengers"`
	MessengersSearch        pgtype.Text        `json:"messengers_search"`
	SkypeUuid               *uuid.UUID         `json:"skype_uuid"`
	Skype                   pgtype.Text        `json:"skype"`
	WhatsappUuid            *uuid.UUID         `json:"whatsapp_uuid"`
	Whatsapp                pgtype.Text        `json:"whatsapp"`
	WechatUuid              *uuid.UUID         `json:"wechat_uuid"`
	Wechat                  pgtype.Text        `json:"wechat"`
	LineUuid                *uuid.UUID         `json:"line_uuid"`
	Line                    pgtype.Text        `json:"line"`
	Socials                 []byte             `json:"socials"`
	SocialsSearch           pgtype.Text        `json:"socials_search"`
	LinkedinUuid            *uuid.UUID         `json:"linkedin_uuid"`
	LinkedinUrl             pgtype.Text        `json:"linkedin_url"`
	FacebookUuid            *uuid.UUID         `json:"facebook_uuid"`
	FacebookUrl             pgtype.Text        `json:"facebook_url"`
	TwitterUuid             *uuid.UUID         `json:"twitter_uuid"`
	TwitterUrl              pgtype.Text        `json:"twitter_url"`
	GithubUuid              *uuid.UUID         `json:"github_uuid"`
	GithubUrl               pgtype.Text        `json:"github_url"`
	VkUuid                  *uuid.UUID         `json:"vk_uuid"`
	VkUrl                   pgtype.Text        `json:"vk_url"`
	OdnoUuid                *uuid.UUID         `json:"odno_uuid"`
	OdnoUrl                 pgtype.Text        `json:"odno_url"`
	HhruUuid                *uuid.UUID         `json:"hhru_uuid"`
	HhruUrl                 pgtype.Text        `json:"hhru_url"`
	HabrUuid                *uuid.UUID         `json:"habr_uuid"`
	HabrUrl                 pgtype.Text        `json:"habr_url"`
	MoikrugUuid             *uuid.UUID         `json:"moikrug_uuid"`
	MoikrugUrl              pgtype.Text        `json:"moikrug_url"`
	InstagramUuid           *uuid.UUID         `json:"instagram_uuid"`
	InstagramUrl            pgtype.Text        `json:"instagram_url"`
	Social1Uuid             *uuid.UUID         `json:"social1_uuid"`
	Social1Url              pgtype.Text        `json:"social1_url"`
	Social1Type             pgtype.Text        `json:"social1_type"`
	Social2Uuid             *uuid.UUID         `json:"social2_uuid"`
	Social2Url              pgtype.Text        `json:"social2_url"`
	Social2Type             pgtype.Text        `json:"social2_type"`
	Social3Uuid             *uuid.UUID         `json:"social3_uuid"`
	Social3Url              pgtype.Text        `json:"social3_url"`
	Social3Type             pgtype.Text        `json:"social3_type"`
	Social4Uuid             *uuid.UUID         `json:"social4_uuid"`
	Social4Url              pgtype.Text        `json:"social4_url"`
	Social4Type             pgtype.Text        `json:"social4_type"`
	Social5Uuid             *uuid.UUID         `json:"social5_uuid"`
	Social5Url              pgtype.Text        `json:"social5_url"`
	Social5Type             pgtype.Text        `json:"social5_type"`
	Social6Uuid             *uuid.UUID         `json:"social6_uuid"`
	Social6Url              pgtype.Text        `json:"social6_url"`
	Social6Type             pgtype.Text        `json:"social6_type"`
	Social7Uuid             *uuid.UUID         `json:"social7_uuid"`
	Social7Url              pgtype.Text        `json:"social7_url"`
	Social7Type             pgtype.Text        `json:"social7_type"`
	Social8Uuid             *uuid.UUID         `json:"social8_uuid"`
	Social8Url              pgtype.Text        `json:"social8_url"`
	Social8Type             pgtype.Text        `json:"social8_type"`
	Social9Uuid             *uuid.UUID         `json:"social9_uuid"`
	Social9Url              pgtype.Text        `json:"social9_url"`
	Social9Type             pgtype.Text        `json:"social9_type"`
	TrackingSource          pgtype.Text        `json:"tracking_source"`
	TrackingSlug            pgtype.Text        `json:"tracking_slug"`
	CachedImg               pgtype.Text        `json:"cached_img"`
	CachedImgData           []byte             `json:"cached_img_data"`
	Crawl                   []byte             `json:"crawl"`
	DuplicateUserID         pgtype.Text        `json:"duplicate_user_id"`
	DuplicateAlternativeID  pgtype.Text        `json:"duplicate_alternative_id"`
	DuplicateReportDate     pgtype.Timestamptz `json:"duplicate_report_date"`
	EntryDate               pgtype.Timestamptz `json:"entry_date"`
	EditDate                pgtype.Timestamptz `json:"edit_date"`
	LastKpiEntryDate        pgtype.Timestamptz `json:"last_kpi_entry_date"`
	UUID                    uuid.UUID          `json:"uuid"`
}

func (q *Queries) UpdateContact(ctx context.Context, arg UpdateContactParams) error {
	_, err := q.db.Exec(ctx, updateContact,
		arg.UserUUID,
		arg.InstanceUuid,
		arg.Status,
		arg.Names,
		arg.NamesSearch,
		arg.Last,
		arg.First,
		arg.Middle,
		arg.Birthday,
		arg.BirthdayType,
		arg.Salary,
		arg.SalaryData,
		arg.LastPositions,
		arg.LastPositionID,
		arg.LastPositionCompanyID,
		arg.LastPositionCompanyName,
		arg.LastPositionTitle,
		arg.LastPositionStartDate,
		arg.LastPositionEndDate,
		arg.LastPositionEndNow,
		arg.LastPositionDescription,
		arg.NoteSearch,
		arg.NoteKpiID,
		arg.Phones,
		arg.PhoneSearch,
		arg.Phone1,
		arg.Phone1Type,
		arg.Phone1Country,
		arg.Phone2,
		arg.Phone2Type,
		arg.Phone2Country,
		arg.Phone3,
		arg.Phone3Type,
		arg.Phone3Country,
		arg.Phone4,
		arg.Phone4Type,
		arg.Phone4Country,
		arg.Phone5,
		arg.Phone5Type,
		arg.Phone5Country,
		arg.Emails,
		arg.EmailSearch,
		arg.Email1,
		arg.Email1Type,
		arg.Email2,
		arg.Email2Type,
		arg.Email3,
		arg.Email3Type,
		arg.Email4,
		arg.Email4Type,
		arg.Email5,
		arg.Email5Type,
		arg.Messengers,
		arg.MessengersSearch,
		arg.SkypeUuid,
		arg.Skype,
		arg.WhatsappUuid,
		arg.Whatsapp,
		arg.WechatUuid,
		arg.Wechat,
		arg.LineUuid,
		arg.Line,
		arg.Socials,
		arg.SocialsSearch,
		arg.LinkedinUuid,
		arg.LinkedinUrl,
		arg.FacebookUuid,
		arg.FacebookUrl,
		arg.TwitterUuid,
		arg.TwitterUrl,
		arg.GithubUuid,
		arg.GithubUrl,
		arg.VkUuid,
		arg.VkUrl,
		arg.OdnoUuid,
		arg.OdnoUrl,
		arg.HhruUuid,
		arg.HhruUrl,
		arg.HabrUuid,
		arg.HabrUrl,
		arg.MoikrugUuid,
		arg.MoikrugUrl,
		arg.InstagramUuid,
		arg.InstagramUrl,
		arg.Social1Uuid,
		arg.Social1Url,
		arg.Social1Type,
		arg.Social2Uuid,
		arg.Social2Url,
		arg.Social2Type,
		arg.Social3Uuid,
		arg.Social3Url,
		arg.Social3Type,
		arg.Social4Uuid,
		arg.Social4Url,
		arg.Social4Type,
		arg.Social5Uuid,
		arg.Social5Url,
		arg.Social5Type,
		arg.Social6Uuid,
		arg.Social6Url,
		arg.Social6Type,
		arg.Social7Uuid,
		arg.Social7Url,
		arg.Social7Type,
		arg.Social8Uuid,
		arg.Social8Url,
		arg.Social8Type,
		arg.Social9Uuid,
		arg.Social9Url,
		arg.Social9Type,
		arg.TrackingSource,
		arg.TrackingSlug,
		arg.CachedImg,
		arg.CachedImgData,
		arg.Crawl,
		arg.DuplicateUserID,
		arg.DuplicateAlternativeID,
		arg.DuplicateReportDate,
		arg.EntryDate,
		arg.EditDate,
		arg.LastKpiEntryDate,
		arg.UUID,
	)
	return err
}
