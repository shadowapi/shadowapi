/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/datasource/email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List email datasources */
        get: operations["datasource-email-list"];
        put?: never;
        /** @description Create a new email datasource */
        post: operations["datasource-email-create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/datasource/email/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get email datasources */
        get: operations["datasource-email-get"];
        /** @description Update an email datasource */
        put: operations["datasource-email-update"];
        post?: never;
        /** @description Delete an email datasource */
        delete: operations["datasource-email-delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/datasource/{uuid}/oauth2/client": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Set OAuth2 client to the datasource */
        put: operations["datasource-set-oauth2-client"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/datasource/email/{uuid}/run/pipeline": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Run datasource email pipeline */
        post: operations["datasource-email-run-pipeline"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/oauth2/callback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Serve OAuth2 client callback */
        get: operations["oauth2-client-callback"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/oauth2/client": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List OAuth2 clients */
        get: operations["oauth2-client-list"];
        put?: never;
        /** @description Create OAuth2 client */
        post: operations["oauth2-client-create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/oauth2/client/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get OAuth2 client details */
        get: operations["oauth2-client-get"];
        /** @description Update OAuth2 client */
        put: operations["oauth2-client-update"];
        post?: never;
        /** @description Delete OAuth2 client */
        delete: operations["oauth2-client-delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/oauth2/client/{datasource_uuid}/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List OAuth2 client tokens */
        get: operations["oauth2-client-token-list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/oauth2/client/{datasource_uuid}/token/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Delete OAuth2 client token */
        delete: operations["oauth2-client-token-delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/oauth2/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Start OAuth2 login flow */
        post: operations["oauth2-client-login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pipeline": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Create Pipeline Object */
        get: operations["pipeline-list"];
        put?: never;
        /** @description Create Pipeline */
        post: operations["pipeline-create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pipeline/entry/types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get Pipeline Entry Types */
        get: operations["pipeline-entry-type-list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pipeline/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get pipeline */
        get: operations["pipeline-get"];
        /** @description Update pipeline */
        put: operations["pipeline-update"];
        post?: never;
        /** @description Delete a pipeline */
        delete: operations["pipeline-delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pipeline/{uuid}/entry": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get pipeline entry */
        get: operations["pipeline-entry-list"];
        put?: never;
        /** @description Create a pipeline entry */
        post: operations["pipeline-entry-create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pipeline/{uuid}/entry/{entry_uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get pipeline entry */
        get: operations["pipeline-entry-get"];
        /** @description Update a pipeline entry */
        put: operations["pipeline-entry-update"];
        post?: never;
        /** @description Delete pipeline entry */
        delete: operations["pipeline-entry-delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/storage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a list of data storage objects. */
        get: operations["storage-list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/storage/postgres": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a new PostgreSQL storage instance. */
        post: operations["storage-postgres-create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/storage/postgres/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve details of a specific PostgreSQL storage instance by UUID. */
        get: operations["storage-postgres-get"];
        /** @description Update details of a specific PostgreSQL storage instance by UUID. */
        put: operations["storage-postgres-update"];
        post?: never;
        /** @description Delete a specific PostgreSQL storage instance by UUID. */
        delete: operations["storage-postgres-delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/telegram": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List all Telegram sessions for the authenticated user. */
        get: operations["tg-session-list"];
        /** @description Complete the session creation process by verifying the code. */
        put: operations["tg-session-verify"];
        /** @description Create a new Telegram session. */
        post: operations["tg-session-create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/storage/s3": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a new S3 storage instance. */
        post: operations["storage-s3-create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/storage/s3/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve details of a specific S3 storage instance by UUID. */
        get: operations["storage-s3-get"];
        /** @description Update details of a specific S3 storage instance by UUID. */
        put: operations["storage-s3-update"];
        post?: never;
        /** @description Delete a specific S3 storage instance by UUID. */
        delete: operations["storage-s3-delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/storage/hostfiles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a new Host Files storage instance. */
        post: operations["storage-hostfiles-create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/storage/hostfiles/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve details of a specific Host Files storage instance by UUID. */
        get: operations["storage-hostfiles-get"];
        /** @description Update details of a specific Host Files storage instance by UUID. */
        put: operations["storage-hostfiles-update"];
        post?: never;
        /** @description Delete a specific Host Files storage instance by UUID. */
        delete: operations["storage-hostfiles-delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/whatsapp/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Initiate WhatsApp login flow via QR code scanning. */
        post: operations["whatsapp-login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/whatsapp/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve WhatsApp login status. */
        get: operations["whatsapp-status"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/whatsapp/sync": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Sync messages for selected users or all users. */
        post: operations["whatsapp-sync"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/whatsapp/contacts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve WhatsApp contacts. */
        get: operations["whatsapp-contacts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/whatsapp/attachments/download": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Download WhatsApp attachment into storage. */
        post: operations["whatsapp-download-attachment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/whatsapp/messages/download": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Download message content including media. */
        post: operations["whatsapp-download-message"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Datasource: components["schemas"]["datasource"];
        DatasourceEmailCreate: components["schemas"]["datasource_email_create"];
        DatasourceEmailUpdate: components["schemas"]["datasource_email_update"];
        Error: components["schemas"]["error"];
        MailLabel: components["schemas"]["mail_label"];
        Oauth2Client: components["schemas"]["oauth2_client"];
        Oauth2ClientToken: components["schemas"]["oauth2_client_token"];
        Pipeline: components["schemas"]["pipeline"];
        PipelineEntry: components["schemas"]["pipeline_entry"];
        PipelineEntryType: components["schemas"]["pipeline_entry_type"];
        Storage: components["schemas"]["storage"];
        StoragePostgres: components["schemas"]["storage_postgres"];
        StorageS3: components["schemas"]["storage_s3"];
        StorageHostFiles: components["schemas"]["storage_hostfiles"];
        WhatsAppLoginResponse: {
            /** @description The QR code in a format that can be rendered by the client. */
            qr_code: string;
            /** @description Time in seconds before the QR code expires. */
            expires_in: number;
        };
        WhatsAppStatusResponse: {
            /** @description The current login status. Possible values: pending, logged_in, error. */
            status: string;
            /** @description WhatsApp session details, if logged in. */
            session?: {
                id: string;
                phone: string;
            };
            /** @description Additional information. */
            message?: string;
        };
        error: {
            /** @description A human-readable explanation specific to this occurrence of the problem. */
            detail?: string;
            /** @description Optional list of individual error details */
            errors?: unknown;
            /**
             * Format: int64
             * @description HTTP status code
             */
            status?: number;
        };
        datasource: {
            readonly uuid: string;
            user_uuid?: string;
            email?: string;
            imap_server?: string;
            is_enabled: boolean;
            name: string;
            oauth2_client_id?: string;
            oauth2_token_uuid?: string;
            password?: string;
            provider?: string;
            smtp_server?: string;
            smtp_tls?: boolean;
            type: string;
            /** Format: date-time */
            readonly updated_at: string;
            /** Format: date-time */
            readonly created_at: string;
        };
        datasource_email_create: {
            /** @description Email address of the user. */
            email: string;
            /** @description IMAP server address. */
            imap_server?: string;
            is_enabled: boolean;
            name: string;
            oauth2_client_id?: string;
            oauth2_token_uuid?: string;
            /** @description Password of the email address. */
            password?: string;
            provider?: string;
            /** @description SMTP server address. */
            smtp_server?: string;
            /** @description SMTP TLS flag. */
            smtp_tls?: boolean;
        };
        datasource_email_update: {
            /** @description IMAP server address. */
            imap_server?: string;
            is_enabled?: boolean;
            name?: string;
            oauth2_client_id?: string;
            oauth2_token_uuid?: string;
            /** @description Password of the email address. */
            password?: string;
            /** @description SMTP server address. */
            smtp_server?: string;
            /** @description SMTP TLS flag. */
            smtp_tls?: boolean;
        };
        mail_label: {
            /** Format: int64 */
            HTTPStatusCode: number;
            Header: {
                [key: string]: string[];
            };
            id?: string;
            color?: {
                backgroundColor?: string;
                textColor?: string;
            };
            labelListVisibility?: string;
            messageListVisibility?: string;
            /** Format: int64 */
            messagesTotal?: number;
            /** Format: int64 */
            messagesUnread?: number;
            name?: string;
            /** Format: int64 */
            threadsTotal?: number;
            /** Format: int64 */
            threadsUnread?: number;
            type?: string;
        };
        oauth2_client: {
            id: string;
            name: string;
            provider: string;
            secret: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
        };
        oauth2_client_token: {
            uuid: string;
            client_id: string;
            name: string;
            token: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
        };
        pipeline: {
            uuid: string;
            name: string;
            flow: {
                [key: string]: unknown;
            };
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        pipeline_entry_type: {
            uuid: string;
            category: string;
            flow_type: string;
            name: string;
        };
        pipeline_entry: {
            uuid: string;
            pipeline_uuid: string;
            parent_uuid?: string;
            type: string;
            params: {
                [key: string]: unknown;
            };
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        /** @description Data storage settings object. */
        storage: {
            /** @description Unique identifier for the storage object. */
            readonly uuid: string;
            /** @description Unique identifier for the user associated with the storage object. */
            readonly user_uuid?: string;
            /** @description Name of the storage object. */
            name?: string;
            /** @description Type of the storage object. */
            type: string;
            /** @description Indicates whether the storage object is enabled. */
            is_enabled: boolean;
            /**
             * Format: date-time
             * @description The date and time when the storage object was last updated.
             */
            readonly updated_at: string;
            /**
             * Format: date-time
             * @description The date and time when the storage object was created.
             */
            readonly created_at: string;
        };
        storage_postgres: {
            readonly uuid?: string;
            /** @description The username used to connect to the PostgreSQL database. */
            user?: string;
            /** @description The password used to connect to the PostgreSQL database. */
            password?: string;
            /** @description The name of the PostgreSQL database. */
            name: string;
            /** @description The hostname or IP address of the PostgreSQL database server. */
            host: string;
            /** @description The port number on which the PostgreSQL database server is listening. */
            port?: string;
            /** @description Additional connection options in URL query format. */
            options?: string;
        };
        /** @description Telegram API session and user representation */
        tg: {
            /** @description Session ID */
            id: number;
            /** @description Session phone number */
            phone: string;
            /** @description Optional description */
            description?: string | null;
            /**
             * Format: date-time
             * @description Last update time
             */
            updated_at: string;
            /**
             * Format: date-time
             * @description Session creation time
             */
            created_at: string;
            /** @description User details */
            user: {
                /** @description User ID in Telegram */
                id?: number;
                /** @description Username in Telegram */
                username?: string;
                /** @description First name */
                first_name?: string;
                /** @description Last name */
                last_name?: string;
                /** @description User's phone number */
                phone?: string;
            };
        };
        storage_s3: {
            readonly uuid?: string;
            /** @description The S3-compatible provider (e.g., AWS, Azure, or a custom endpoint). */
            provider: string;
            /** @description The region where the bucket is located. */
            region: string;
            /** @description The bucket name. */
            bucket: string;
            /** @description The access key ID. */
            access_key_id: string;
            /** @description The secret access key. */
            secret_access_key: string;
        };
        storage_hostfiles: {
            readonly uuid?: string;
            /** @description The absolute or relative path on the server's file system where files will be stored. */
            path: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "datasource-email-list": {
        parameters: {
            query?: {
                /** @description Offset records. */
                offset?: number;
                /** @description Limit records. */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["datasource"][];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "datasource-email-create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["datasource_email_create"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["datasource"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "datasource-email-get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID of the email datasource. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["datasource"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "datasource-email-update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID of the datasource base object. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["datasource_email_update"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["datasource"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "datasource-email-delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID of the email datasource. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "datasource-set-oauth2-client": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID of the email datasource. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description OAuth2 client ID. */
                    client_id: string;
                };
            };
        };
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "datasource-email-run-pipeline": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID of the datasource base object. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description List of labels. */
                        labels: components["schemas"]["mail_label"][];
                    };
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "oauth2-client-callback": {
        parameters: {
            query?: {
                /** @description State UUID. */
                state?: string;
                /** @description OAuth2 code. */
                code?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found */
            302: {
                headers: {
                    /** @description Redirect URL for the browser */
                    Location?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "oauth2-client-list": {
        parameters: {
            query?: {
                /** @description Offset records. */
                offset?: number;
                /** @description Limit records. */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description List of OAuth2 clients. */
                        clients: components["schemas"]["oauth2_client"][];
                    };
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "oauth2-client-create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description ID of the client. */
                    id: string;
                    /** @description Name of the client. */
                    name: string;
                    /** @description Provider of the client. */
                    provider: string;
                    /** @description Secret of the client. */
                    secret: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["oauth2_client"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "oauth2-client-get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ClientID of the OAuth2 client. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["oauth2_client"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "oauth2-client-update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ClientID of the OAuth2 client details. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Name of the client. */
                    name: string;
                    /** @description Provider of the client. */
                    provider: string;
                    /** @description Secret of the client. */
                    secret: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["oauth2_client"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "oauth2-client-delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the connection base object. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "oauth2-client-token-list": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID of the datasource base object. */
                datasource_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["oauth2_client_token"][];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "oauth2-client-token-delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID of the token to delete. */
                uuid: string;
                /** @description datasource UUID to get tokens for. */
                datasource_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "oauth2-client-login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Client ID. */
                    client_id: string;
                    /** @description Query parameters. */
                    query: {
                        [key: string]: string[];
                    };
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Auth code URL. */
                        auth_code_url: string;
                    };
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "pipeline-list": {
        parameters: {
            query?: {
                /** @description Offset records. */
                offset?: number;
                /** @description Limit records. */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description List of Pipelines. */
                        pipelines: components["schemas"]["pipeline"][];
                    };
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "pipeline-create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Name of the pipeline. */
                    name: string;
                    /** @description Flow JSON to draw. */
                    flow: {
                        [key: string]: unknown;
                    };
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["pipeline"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "pipeline-entry-type-list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Map with list of all categories of pipeline entry types */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description List of Pipeline Type Entries. */
                        entries: components["schemas"]["pipeline_entry_type"][];
                    };
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "pipeline-get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID of the pipeline. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["pipeline"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "pipeline-update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID of the pipeline object. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Name of the client. */
                    name: string;
                    /** @description Flow JSON to draw. */
                    flow: {
                        [key: string]: unknown;
                    };
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["pipeline"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "pipeline-delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID of the pipeline. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "pipeline-entry-list": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID of the pipeline. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["pipeline_entry"][];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "pipeline-entry-create": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID of the pipeline. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description UUID of the pipeline entry. */
                    uuid: string;
                    /** @description Pipeline UUID. */
                    pipeline_uuid: string;
                    /** @description Parent pipeline entry UUID. */
                    parent_uuid?: string;
                    /** @description Type of pipeline entry. */
                    type: string;
                    /** @description Params of the Entry. */
                    params: {
                        [key: string]: unknown;
                    };
                };
            };
        };
        responses: {
            /** @description OK */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["pipeline_entry"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "pipeline-entry-get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID of the pipeline. */
                uuid: string;
                /** @description Entry UUID of the pipeline. */
                entry_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["pipeline_entry"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "pipeline-entry-update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID of the pipeline. */
                uuid: string;
                /** @description Entry UUID of the pipeline. */
                entry_uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Params of the Entry. */
                    params: {
                        [key: string]: unknown;
                    };
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["pipeline_entry"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "pipeline-entry-delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID of the pipeline. */
                uuid: string;
                /** @description Entry UUID of the pipeline. */
                entry_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "storage-list": {
        parameters: {
            query?: {
                /** @description The number of records to skip for pagination. */
                offset?: number;
                /** @description The maximum number of records to return. */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request was successful. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["storage"][];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "storage-postgres-create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["storage_postgres"];
            };
        };
        responses: {
            /** @description PostgreSQL storage instance created successfully. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["storage_postgres"];
                };
            };
            /** @description An error occurred while creating the PostgreSQL storage instance. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "storage-postgres-get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The UUID of the PostgreSQL storage instance to retrieve. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description PostgreSQL storage instance details retrieved successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["storage_postgres"];
                };
            };
            /** @description An error occurred while retrieving the PostgreSQL storage instance details. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "storage-postgres-update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The UUID of the PostgreSQL storage instance to update. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["storage_postgres"];
            };
        };
        responses: {
            /** @description PostgreSQL storage instance updated successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["storage_postgres"];
                };
            };
            /** @description An error occurred while updating the PostgreSQL storage instance. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "storage-postgres-delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The UUID of the PostgreSQL storage instance to delete. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description PostgreSQL storage instance deleted successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An error occurred while deleting the PostgreSQL storage instance. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "tg-session-list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of Telegram sessions. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Total number of sessions */
                        total?: number;
                        sessions?: components["schemas"]["tg"][];
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "tg-session-verify": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Session ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Hash of the phone code */
                    phone_code_hash?: string;
                    /** @description Verification code */
                    code?: string;
                    /** @description Optional password for 2FA */
                    password?: string;
                };
            };
        };
        responses: {
            /** @description Session verified successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tg"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "tg-session-create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description Phone number in international format
                     * @example +16505551234
                     */
                    phone: string;
                };
            };
        };
        responses: {
            /** @description Session created successfully. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tg"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "storage-s3-create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["storage_s3"];
            };
        };
        responses: {
            /** @description S3 storage instance created successfully. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["storage_s3"];
                };
            };
            /** @description An error occurred while creating the S3 storage instance. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "storage-s3-get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The UUID of the S3 storage instance to retrieve. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description S3 storage instance details retrieved successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["storage_s3"];
                };
            };
            /** @description An error occurred while retrieving the S3 storage instance details. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "storage-s3-update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The UUID of the S3 storage instance to update. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["storage_s3"];
            };
        };
        responses: {
            /** @description S3 storage instance updated successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["storage_s3"];
                };
            };
            /** @description An error occurred while updating the S3 storage instance. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "storage-s3-delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The UUID of the S3 storage instance to delete. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description S3 storage instance deleted successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An error occurred while deleting the S3 storage instance. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "storage-hostfiles-create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["storage_hostfiles"];
            };
        };
        responses: {
            /** @description Host Files storage instance created successfully. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["storage_hostfiles"];
                };
            };
            /** @description An error occurred while creating the host files storage instance. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "storage-hostfiles-get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The UUID of the Host Files storage instance to retrieve. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Host Files storage instance details retrieved successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["storage_hostfiles"];
                };
            };
            /** @description An error occurred while retrieving the Host Files storage instance details. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "storage-hostfiles-update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The UUID of the Host Files storage instance to update. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["storage_hostfiles"];
            };
        };
        responses: {
            /** @description Host Files storage instance updated successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["storage_hostfiles"];
                };
            };
            /** @description An error occurred while updating the Host Files storage instance. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "storage-hostfiles-delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The UUID of the Host Files storage instance to delete. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Host Files storage instance deleted successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An error occurred while deleting the Host Files storage instance. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "whatsapp-login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description QR code generated successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WhatsAppLoginResponse"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "whatsapp-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Login status retrieved successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WhatsAppStatusResponse"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "whatsapp-sync": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description List of user IDs to sync messages for. If empty, sync all messages. */
                    user_ids?: string[];
                };
            };
        };
        responses: {
            /** @description Messages synchronized successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        synced_count?: number;
                        messages?: Record<string, never>[];
                    };
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "whatsapp-contacts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Contacts retrieved successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        contacts?: {
                            id?: string;
                            name?: string;
                            phone?: string;
                        }[];
                    };
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "whatsapp-download-attachment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The ID of the attachment to download. */
                    attachment_id: string;
                    /** @description The target storage ID. */
                    storage_id: string;
                };
            };
        };
        responses: {
            /** @description Attachment downloaded and stored successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description URL to access the stored attachment. */
                        file_url?: string;
                    };
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "whatsapp-download-message": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The ID of the message to download. */
                    message_id: string;
                };
            };
        };
        responses: {
            /** @description Message downloaded successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Message details with media content. */
                        message?: Record<string, never>;
                    };
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
}
