/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/scheduler": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List schedulers
         * @description Retrieve all schedulers for the authenticated user.
         */
        get: operations["scheduler-list"];
        put?: never;
        /** Create scheduler */
        post: operations["scheduler-create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/scheduler/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID of the scheduler */
                uuid: string;
            };
            cookie?: never;
        };
        /** Get scheduler by UUID */
        get: operations["scheduler-get"];
        /** Update scheduler */
        put: operations["scheduler-update"];
        post?: never;
        /** Delete scheduler */
        delete: operations["scheduler-delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/datasource": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a list of datasource objects. */
        get: operations["datasource-list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/datasource/email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List email datasources */
        get: operations["datasource-email-list"];
        put?: never;
        /** @description Create a new email datasource */
        post: operations["datasource-email-create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/datasource/email/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get email datasources */
        get: operations["datasource-email-get"];
        /** @description Update an email datasource */
        put: operations["datasource-email-update"];
        post?: never;
        /** @description Delete an email datasource */
        delete: operations["datasource-email-delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/datasource/email_oauth": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List OAuth2‑based email datasources. */
        get: operations["datasource-email-oauth-list"];
        put?: never;
        /** @description Create a new email OAuth datasource. */
        post: operations["datasource-email-oauth-create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/datasource/email_oauth/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve an OAuth2‑based email datasource. */
        get: operations["datasource-email-oauth-get"];
        /** @description Update an existing email OAuth datasource. */
        put: operations["datasource-email-oauth-update"];
        post?: never;
        /** @description Delete an email OAuth datasource. */
        delete: operations["datasource-email-oauth-delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/datasource/{uuid}/oauth2/client": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Set OAuth2 client to the datasource */
        put: operations["datasource-set-oauth2-client"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/datasource/telegram": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List all Telegram datasources */
        get: operations["datasource-telegram-list"];
        put?: never;
        /** @description Create a new Telegram datasource */
        post: operations["datasource-telegram-create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/datasource/telegram/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a Telegram datasource */
        get: operations["datasource-telegram-get"];
        /** @description Update a Telegram datasource */
        put: operations["datasource-telegram-update"];
        post?: never;
        /** @description Delete a Telegram datasource */
        delete: operations["datasource-telegram-delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/datasource/whatsapp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List all WhatsApp datasources */
        get: operations["datasource-whatsapp-list"];
        put?: never;
        /** @description Create a new WhatsApp datasource */
        post: operations["datasource-whatsapp-create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/datasource/whatsapp/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a WhatsApp datasource */
        get: operations["datasource-whatsapp-get"];
        /** @description Update a WhatsApp datasource */
        put: operations["datasource-whatsapp-update"];
        post?: never;
        /** @description Delete a WhatsApp datasource */
        delete: operations["datasource-whatsapp-delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/datasource/linkedin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List all LinkedIn datasources */
        get: operations["datasource-linkedin-list"];
        put?: never;
        /** @description Create a new LinkedIn datasource */
        post: operations["datasource-linkedin-create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/datasource/linkedin/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a LinkedIn datasource */
        get: operations["datasource-linkedin-get"];
        /** @description Update a LinkedIn datasource */
        put: operations["datasource-linkedin-update"];
        post?: never;
        /** @description Delete a LinkedIn datasource */
        delete: operations["datasource-linkedin-delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/oauth2/callback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Serve OAuth2 client callback */
        get: operations["oauth2-client-callback"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/oauth2/client": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List OAuth2 clients */
        get: operations["oauth2-client-list"];
        put?: never;
        /** @description Create OAuth2 client */
        post: operations["oauth2-client-create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/oauth2/client/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get OAuth2 client details */
        get: operations["oauth2-client-get"];
        /** @description Update OAuth2 client */
        put: operations["oauth2-client-update"];
        post?: never;
        /** @description Delete OAuth2 client */
        delete: operations["oauth2-client-delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/oauth2/client/{datasource_uuid}/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List OAuth2 client tokens */
        get: operations["oauth2-client-token-list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/oauth2/client/{datasource_uuid}/token/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Delete OAuth2 client token */
        delete: operations["oauth2-client-token-delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/oauth2/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Start OAuth2 login flow */
        post: operations["oauth2-client-login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/session": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Introspect current session status */
        get: operations["session-status"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pipeline": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List pipelines
         * @description Get all pipelines
         */
        get: operations["pipeline-list"];
        put?: never;
        /**
         * Create a new pipeline
         * @description Create a new pipeline for a datasource
         */
        post: operations["pipeline-create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pipeline/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID of the pipeline */
                uuid: string;
            };
            cookie?: never;
        };
        /**
         * Get pipeline by UUID
         * @description Retrieve a specific pipeline by its UUID
         */
        get: operations["pipeline-get"];
        /**
         * Update pipeline
         * @description Update an existing pipeline
         */
        put: operations["pipeline-update"];
        post?: never;
        /**
         * Delete pipeline
         * @description Delete a specific pipeline by UUID
         */
        delete: operations["pipeline-delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/file": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a list of stored files. */
        get: operations["file-list"];
        put?: never;
        /** @description Upload a new file and create its record. */
        post: operations["file-create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/file/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve details of a stored file. */
        get: operations["file-get"];
        /** @description Update metadata of a stored file. */
        put: operations["file-update"];
        post?: never;
        /** @description Delete a stored file. */
        delete: operations["file-delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/storage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a list of data storage objects. */
        get: operations["storage-list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/storage/postgres": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a new PostgreSQL storage instance. */
        post: operations["storage-postgres-create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/storage/postgres/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve details of a specific PostgreSQL storage instance by UUID. */
        get: operations["storage-postgres-get"];
        /** @description Update details of a specific PostgreSQL storage instance by UUID. */
        put: operations["storage-postgres-update"];
        post?: never;
        /** @description Delete a specific PostgreSQL storage instance by UUID. */
        delete: operations["storage-postgres-delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/storage/s3": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a new S3 storage instance. */
        post: operations["storage-s3-create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/storage/s3/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve details of a specific S3 storage instance by UUID. */
        get: operations["storage-s3-get"];
        /** @description Update details of a specific S3 storage instance by UUID. */
        put: operations["storage-s3-update"];
        post?: never;
        /** @description Delete a specific S3 storage instance by UUID. */
        delete: operations["storage-s3-delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/storage/hostfiles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a new Host Files storage instance. */
        post: operations["storage-hostfiles-create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/storage/hostfiles/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve details of a specific Host Files storage instance by UUID. */
        get: operations["storage-hostfiles-get"];
        /** @description Update details of a specific Host Files storage instance by UUID. */
        put: operations["storage-hostfiles-update"];
        post?: never;
        /** @description Delete a specific Host Files storage instance by UUID. */
        delete: operations["storage-hostfiles-delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/telegram": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List all Telegram sessions for the authenticated user. */
        get: operations["tg-session-list"];
        put?: never;
        /** @description Create a new Telegram session. */
        post: operations["tg-session-create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/telegram/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Complete the session creation process by verifying the code. */
        put: operations["tg-session-verify"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/message/query": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Execute a search query on unified messages. */
        post: operations["messageQuery"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/message/email/query": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Execute a search query on email messages. */
        post: operations["messageEmailQuery"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/message/whatsapp/query": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Execute a search query on WhatsApp messages. */
        post: operations["messageWhatsappQuery"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/message/telegram/query": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Execute a search query on Telegram messages. */
        post: operations["messageTelegramQuery"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/message/linkedin/query": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Execute a search query on LinkedIn messages. */
        post: operations["messageLinkedinQuery"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/storage/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Upload a file */
        post: operations["uploadFile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/storage/upload-url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generate a pre-signed URL for file upload */
        post: operations["generatePresignedUploadUrl"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/storage/file-link": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generate a download link for a stored file */
        post: operations["generateDownloadLink"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/syncpolicy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a list of sync policies for the authenticated user. */
        get: operations["syncpolicy-list"];
        put?: never;
        /** @description Create a new sync policy. */
        post: operations["syncpolicy-create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/syncpolicy/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a specific sync policy by uuid. */
        get: operations["syncpolicy-get"];
        /** @description Update a sync policy by uuid. */
        put: operations["syncpolicy-update"];
        post?: never;
        /** @description Delete a sync policy by uuid. */
        delete: operations["syncpolicy-delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contact": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all contacts */
        get: operations["listContacts"];
        put?: never;
        /** Create a new contact record */
        post: operations["createContact"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contact/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get contact details */
        get: operations["getContact"];
        /** Update contact details */
        put: operations["updateContact"];
        post?: never;
        /** Delete a contact record */
        delete: operations["deleteContact"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all users */
        get: operations["listUsers"];
        put?: never;
        /** Create a new user */
        post: operations["createUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user details */
        get: operations["getUser"];
        /** Update user details */
        put: operations["updateUser"];
        post?: never;
        /** Delete user */
        delete: operations["deleteUser"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workerjobs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a list of worker jobs */
        get: operations["worker-jobs-list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workerjobs/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a specific worker job by uuid. */
        get: operations["worker-jobs-get"];
        put?: never;
        post?: never;
        /** @description Delete a worker job by uuid. */
        delete: operations["worker-jobs-delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workerjobs/{uuid}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel a running worker job
         * @description Signal cancellation for a running job; returns 204 if accepted.
         */
        post: operations["worker-jobs-cancel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Scheduler: components["schemas"]["scheduler"];
        Datasource: components["schemas"]["datasource"];
        DatasourceEmail: components["schemas"]["datasource_email"];
        DatasourceEmailOauth: components["schemas"]["datasource_email_oauth"];
        DatasourceTelegram: components["schemas"]["datasource_telegram"];
        DatasourceWhatsapp: components["schemas"]["datasource_whatsapp"];
        DatasourceLinkedin: components["schemas"]["datasource_linkedin"];
        Error: components["schemas"]["error"];
        MailLabel: components["schemas"]["email_label"];
        Oauth2Client: components["schemas"]["oauth2_client"];
        Oauth2ClientToken: components["schemas"]["oauth2_client_token"];
        Oauth2ClientTokenObj: components["schemas"]["oauth2_client_token_obj"];
        Oauth2State: components["schemas"]["oauth2_state"];
        Oauth2Subject: components["schemas"]["oauth2_subject"];
        Pipeline: components["schemas"]["pipeline"];
        PipelineEdge: components["schemas"]["pipeline_edge"];
        PipelineNode: components["schemas"]["pipeline_node"];
        Storage: components["schemas"]["storage"];
        StoragePostgres: components["schemas"]["storage_postgres"];
        StorageS3: components["schemas"]["storage_s3"];
        StorageHostFiles: components["schemas"]["storage_hostfiles"];
        EmailLabel: components["schemas"]["email_label"];
        Contact: components["schemas"]["contact"];
        Message: components["schemas"]["message"];
        MessageMeta: components["schemas"]["message_meta"];
        MessageBodyParsed: components["schemas"]["message_body_parsed"];
        MessageQuery: components["schemas"]["message_query"];
        /** @description Represents a stored file, independent of the storage backend. */
        FileObject: {
            /** @description Unique identifier for the file. */
            uuid?: string;
            /** @description Which storage backend is used, e.g. 's3', 'postgres', or 'hostfiles'. */
            storage_type: string;
            /** @description UUID referencing a 'storage' record (optional). */
            storage_uuid: string;
            /** @description Original filename. e.g. 'photo.jpg' or 'mail.raw'. */
            name: string;
            /** @description MIME type, e.g. 'application/pdf' or 'message/rfc822'. */
            mime_type?: string;
            /** @description Size in bytes. */
            size?: number;
            /**
             * Format: binary
             * @description Optional. If storage_type='postgres', file content can be provided here (base64-encoded).
             */
            data?: string;
            /** @description Optional. If hostfiles or s3, the path or object key. e.g. 'my-bucket/xx/uuid.pdf'. */
            path?: string;
            /** @description Indicates if this file is the entire raw email. */
            is_raw?: boolean;
            /** @description Raw headers if needed (for emails or similar). */
            raw_headers?: string;
            /** @description Indicates whether the raw email is contained in this file. */
            has_raw_email?: boolean;
            /** @description Indicates if this is an inline/embedded file (e.g. images in HTML emails). */
            is_inline?: boolean;
            /**
             * Format: date-time
             * @description Timestamp when the file was created.
             */
            created_at?: string;
            /**
             * Format: date-time
             * @description Timestamp when the file was last modified.
             */
            updated_at?: string;
        };
        /** @description File upload request metadata. */
        UploadFileRequest: {
            /** @description Desired name of the file. */
            name?: string;
            /** @description MIME type of the file, defaults to "application/octet-stream". */
            mime_type?: string;
            /** @description The UUID of the storage where this file will be uploaded. */
            storage_uuid: string;
        };
        /** @description Response after uploading a file. */
        UploadFileResponse: {
            file?: components["schemas"]["FileObject"];
        };
        /** @description Request to generate a pre-signed URL for upload. */
        UploadPresignedUrlRequest: {
            name?: string;
            mime_type?: string;
            /**
             * @description The target storage backend.
             * @enum {string}
             */
            storage_type?: "s3" | "postgres" | "hostfiles";
        };
        /** @description Response with a pre-signed URL for upload. */
        UploadPresignedUrlResponse: {
            /** @description Pre-signed URL for uploading the file. */
            upload_url?: string;
            file?: components["schemas"]["FileObject"];
        };
        /** @description Request to generate a download link. */
        GenerateDownloadLinkRequest: {
            file_uuid?: string;
            /** @description Expiration time in seconds for the download link. */
            expiration?: number;
        };
        /** @description Response containing a signed download link. */
        GenerateDownloadLinkResponse: {
            /** @description Signed URL for downloading the file. */
            url?: string;
        };
        SyncPolicy: components["schemas"]["sync_policy"];
        User: components["schemas"]["user"];
        WorkerJobs: components["schemas"]["worker_jobs"];
        SessionStatus: components["schemas"]["session_status"];
        error: {
            /** @description A human-readable explanation specific to this occurrence of the problem. */
            detail?: string;
            /** @description Optional list of individual error details */
            errors?: unknown;
            /**
             * Format: int64
             * @description HTTP status code
             */
            status?: number;
        };
        scheduler: {
            /** @description Unique identifier */
            uuid?: string;
            pipeline_uuid: string;
            schedule_type: string;
            cron_expression?: string | null;
            /** Format: date-time */
            run_at?: string | null;
            timezone?: string;
            /** Format: date-time */
            next_run?: string;
            /** Format: date-time */
            last_run?: string;
            is_enabled?: boolean;
            is_paused?: boolean;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        datasource: {
            readonly uuid?: string;
            readonly user_uuid: string;
            type: string;
            name: string;
            is_enabled?: boolean;
            provider: string;
            /** Format: date-time */
            readonly created_at?: string;
            /** Format: date-time */
            readonly updated_at?: string;
        };
        datasource_email: {
            readonly uuid?: string;
            readonly user_uuid: string;
            email: string;
            name: string;
            is_enabled?: boolean;
            provider: string;
            oauth2_client_id?: string;
            oauth2_token_uuid?: string;
            imap_server: string;
            smtp_server: string;
            smtp_tls?: boolean;
            password: string;
            /** Format: date-time */
            readonly created_at?: string;
            /** Format: date-time */
            readonly updated_at?: string;
        };
        /** @description OAuth2‑enabled email datasource object representation. */
        datasource_email_oauth: {
            readonly uuid?: string;
            readonly user_uuid: string;
            email: string;
            name: string;
            is_enabled?: boolean;
            provider: string;
            /** @description Identifier of the OAuth2 client bound to this datasource. */
            oauth2_client_uuid: string;
            /** Format: date-time */
            readonly created_at?: string;
            /** Format: date-time */
            readonly updated_at?: string;
        };
        /** @description List of session logs for an account */
        telegram_session_history: {
            /** @description Unique session identifier */
            sessionId?: string;
            /**
             * Format: date-time
             * @description Timestamp when the session started
             */
            started_at?: string;
            /**
             * Format: date-time
             * @description Timestamp when the session ended
             */
            ended_at?: string;
            /** @description Arbitrary key-value metadata for the session */
            meta?: {
                [key: string]: unknown;
            };
        }[];
        /** @description List of account participants */
        telegram_participants: {
            /** @description Unique identifier of the participant (e.g. user ID) */
            participantId?: string;
            /** @description Arbitrary key-value metadata about the participant */
            meta?: {
                [key: string]: unknown;
            };
        }[];
        datasource_telegram: {
            readonly uuid?: string;
            readonly user_uuid: string;
            name: string;
            is_enabled?: boolean;
            provider: string;
            /** @description The phone number for the Telegram account (international format) */
            phone_number: string;
            /** @description Telegram API ID from my.telegram.org */
            api_id: string;
            /** @description Telegram API hash */
            api_hash: string;
            /** @description Optional 2FA password */
            password?: string;
            /** @description Additional Telegram bridging config from telegram.tpl.yaml
             *     (proxy, concurrency, presence bridging, encryption, etc.)
             *      */
            settings?: {
                [key: string]: unknown;
            };
            sessionHistory?: components["schemas"]["telegram_session_history"];
            participants?: components["schemas"]["telegram_participants"];
            /** @description Arbitrary key-value metadata about the account */
            meta?: {
                [key: string]: unknown;
            };
            /** Format: date-time */
            readonly created_at?: string;
            /** Format: date-time */
            readonly updated_at?: string;
        };
        /** @description WhatsApp datasource object representation */
        datasource_whatsapp: {
            readonly uuid?: string;
            readonly user_uuid: string;
            name: string;
            is_enabled?: boolean;
            provider: string;
            /** @description The phone number for the WhatsApp account */
            phone_number: string;
            /** @description Label for the WhatsApp device connection */
            device_name?: string;
            /** @description Additional WhatsApp bridging config from whatsapp.tpl.yaml
             *     (proxy, presence bridging, call notices, status broadcast, etc.)
             *      */
            settings?: {
                [key: string]: unknown;
            };
            /** Format: date-time */
            readonly created_at?: string;
            /** Format: date-time */
            readonly updated_at?: string;
        };
        /** @description LinkedIn datasource object representation */
        datasource_linkedin: {
            readonly uuid?: string;
            readonly user_uuid: string;
            name: string;
            is_enabled?: boolean;
            provider: string;
            /** @description LinkedIn username or email for login */
            username: string;
            /** @description LinkedIn password (or OAuth2 tokens if relevant) */
            password: string;
            /** @description Arbitrary LinkedIn bridging config pulled from linkedin.tpl.yaml
             *     (presence bridging, encryption, etc.)
             *      */
            settings?: {
                [key: string]: unknown;
            };
            /** Format: date-time */
            readonly created_at?: string;
            /** Format: date-time */
            readonly updated_at?: string;
        };
        oauth2_client: {
            /** @description Internal unique ID for the client. */
            uuid?: string;
            /** @description Friendly name for the admin UI. */
            name: string;
            /** @description Name of the OAuth2 provider (e.g., 'github', 'google', 'zitadel'). */
            provider: string;
            /** @description OAuth2 client ID provided by the external provider. */
            client_id: string;
            /** @description OAuth2 client secret (should be stored securely, e.g. encrypted). */
            secret: string;
            /**
             * Format: date-time
             * @description Timestamp when the client was registered.
             */
            created_at?: string;
            /**
             * Format: date-time
             * @description Timestamp when the client was last updated.
             */
            updated_at?: string;
        };
        oauth2_client_token_obj: {
            /** @description Access token (JWT or opaque string). */
            access_token: string;
            /** @description Refresh token, if available. */
            refresh_token: string;
            /**
             * Format: date-time
             * @description Timestamp when the access token expires.
             */
            expires_at: string;
            /** @description Raw OAuth2 token response stored as JSON (useful for debugging or extra metadata). */
            token?: {
                [key: string]: unknown;
            };
        };
        oauth2_client_token: {
            /** @description Internal unique ID for the token record. */
            uuid?: string;
            /** @description UUID of the OAuth2 client that issued this token. */
            client_uuid: string;
            /** @description Optional. UUID of the user for whom the token was issued. */
            user_uuid?: string;
            token: components["schemas"]["oauth2_client_token_obj"];
            /**
             * Format: date-time
             * @description Timestamp when the token record was stored.
             */
            created_at?: string;
            /**
             * Format: date-time
             * @description Timestamp when the token record was last updated.
             */
            updated_at?: string;
        };
        session_status: {
            active: boolean;
        };
        pipeline_node: {
            id: string;
            /** @description Required. Ex datasource, extractor, filter, storage */
            type: string;
            position: {
                x?: number;
                y?: number;
            };
            data: {
                label?: string;
                entry_uuid?: string;
                /** @description TODO @reactima stricter types */
                config?: {
                    [key: string]: unknown;
                };
            };
        };
        pipeline_edge: {
            id: string;
            source: string;
            target: string;
            /** @enum {string} */
            type?: "default" | "step";
        };
        pipeline: {
            /** @description Unique identifier */
            uuid?: string;
            datasource_uuid: string;
            storage_uuid: string;
            /** @description Pipeline type (email, telegram, whatsapp, linkedin) pulled from datasource_uuid */
            type?: string;
            /** @description Pipeline name */
            name: string;
            /** @description Whether this pipeline is currently active */
            is_enabled?: boolean;
            /** @description JSON representation of the flow (compatible with @xyflow/react) */
            flow?: {
                nodes?: components["schemas"]["pipeline_node"][];
                edges?: components["schemas"]["pipeline_edge"][];
            };
            /**
             * Format: date-time
             * @description Timestamp when the policy was created.
             */
            created_at?: string;
            /**
             * Format: date-time
             * @description Timestamp when the policy was last updated.
             */
            updated_at?: string;
        };
        /** @description Data storage settings object. */
        storage: {
            /** @description Unique identifier for the storage object. */
            readonly uuid: string;
            /** @description Type of the storage object. */
            type: string;
            /** @description Name of the storage object. */
            name?: string;
            /** @description Indicates whether the storage object is enabled. */
            is_enabled: boolean;
            /**
             * Format: date-time
             * @description The date and time when the storage object was created.
             */
            readonly created_at?: string;
            /**
             * Format: date-time
             * @description The date and time when the storage object was last updated.
             */
            readonly updated_at?: string;
        };
        storage_postgres: {
            readonly uuid?: string;
            /** @description The descriptive name for this storage entry. */
            name: string;
            /** @description Indicates whether this storage is enabled. */
            is_enabled?: boolean;
            /** @description If true, reuse the app's primary Postgres connection. If false, use custom credentials below. */
            is_same_database?: boolean;
            /** @description The username used to connect to the PostgreSQL database. */
            user?: string;
            /** @description The password used to connect to the PostgreSQL database. */
            password?: string;
            /** @description The hostname or IP address of the PostgreSQL database server. */
            host?: string;
            /** @description The port number on which the PostgreSQL database server is listening. */
            port?: string;
            /** @description Additional connection options in URL query format. */
            options?: string;
        };
        storage_s3: {
            readonly uuid?: string;
            /** @description The descriptive name for this storage entry. */
            name: string;
            /** @description Indicates whether this storage is enabled. */
            is_enabled?: boolean;
            /** @description The S3-compatible provider (e.g., AWS, Azure, or a custom endpoint). */
            provider: string;
            /** @description The region where the bucket is located. */
            region: string;
            /** @description The bucket name. */
            bucket: string;
            /** @description The access key ID. */
            access_key_id: string;
            /** @description The secret access key. */
            secret_access_key: string;
        };
        storage_hostfiles: {
            readonly uuid?: string;
            /** @description The descriptive name for this storage entry. */
            name: string;
            /** @description Indicates whether this storage is enabled. */
            is_enabled?: boolean;
            /** @description The absolute or relative path on the server's file system where files will be stored. */
            path: string;
        };
        /** @description Telegram API session and user representation */
        telegram: {
            /** @description Session ID */
            id: number;
            /** @description Session phone number */
            phone: string;
            /** @description Optional description */
            description?: string | null;
            /**
             * Format: date-time
             * @description Last update time
             */
            updated_at: string;
            /**
             * Format: date-time
             * @description Session creation time
             */
            created_at: string;
            /** @description User details */
            user: {
                /** @description User ID in Telegram */
                id?: number;
                /** @description Username in Telegram */
                username?: string;
                /** @description First name */
                first_name?: string;
                /** @description Last name */
                last_name?: string;
                /** @description User's phone number */
                phone?: string;
            };
        };
        message_query: {
            /**
             * @description Platform or data source to query from.
             * @enum {string}
             */
            source: "email" | "whatsapp" | "telegram" | "linkedin" | "custom" | "unified";
            /** @description Free-text or advanced operator query. E.g., 'from:', 'to:', 'subject:', 'after:', 'before:'. */
            query?: string;
            /** @description ID of the chat/conversation to filter messages from. */
            chat_id?: string;
            /** @description ID of a sub-thread within the conversation. */
            thread_id?: string;
            /**
             * Format: date-time
             * @description Filter messages sent after this date/time.
             */
            start_date?: string;
            /**
             * Format: date-time
             * @description Filter messages sent before this date/time.
             */
            end_date?: string;
            /**
             * @description Sort order by timestamp ('asc' or 'desc').
             * @enum {string}
             */
            order?: "asc" | "desc";
            /** @description Maximum number of messages to return. */
            limit?: number;
            /** @description Number of records to skip for pagination. */
            offset?: number;
            /**
             * @description Specifies the storage backend for message data.
             * @enum {string}
             */
            storage_type?: "postgres" | "s3" | "hostfiles";
            /** @description Enable fuzzy matching if true. */
            fuzzy?: boolean;
        };
        message_body_parsed: {
            /** @description Plain text representation of the subject. */
            subject_text?: string;
            /** @description Slate.js JSON representation of the subject. */
            subject_slate?: {
                [key: string]: unknown;
            };
            /** @description Plain text representation of the body. */
            body_text: string;
            /**
             * Format: byte
             * @description Binary representation of the body (e.g., base64-encoded rich content).
             */
            body_byte?: string;
            /** @description Slate.js JSON representation of the message body. */
            body_slate?: {
                [key: string]: unknown;
            };
        };
        message_meta: {
            /** @description Indicates whether this message has a complete raw email stored as an attachment (with FileObject.is_raw=true). */
            has_raw_email?: boolean;
            /** @description Optional flag indicating if it's inbound (true) or outbound (false). */
            is_incoming?: boolean;
        };
        message: {
            /** @description Unique identifier for the message. */
            uuid?: string;
            /** @description Data source or platform the message originated from - email, whatsapp, telegram, linkedin, custom */
            type: string;
            /** @description Specifies the type or classification of the message - text, media, system, notification, attachment, invite, event, call */
            format: string;
            /** @description ID of the chat/conversation this message belongs to. */
            chat_uuid?: string;
            /** @description ID of a sub-thread if this message is part of a threaded conversation. */
            thread_uuid?: string;
            /** @description Original system's message ID (e.g., Gmail 'messageId'). */
            external_message_id?: string;
            /** @description Identifier of the user or account sending the message. */
            sender: string;
            /** @description List of users or accounts receiving the message (e.g., To, CC). */
            recipients: string[];
            /** @description Subject or title of the message (applicable to emails or similar). */
            subject?: string;
            /** @description Text content or body of the message. */
            body: string;
            body_parsed?: components["schemas"]["message_body_parsed"];
            /** @description Collection of reactions (e.g., likes, emojis) applied to this message. */
            reactions?: {
                [key: string]: number;
            };
            /** @description List of file attachments associated with this message. */
            attachments?: components["schemas"]["FileObject"][];
            /** @description ID or handle of the original sender if this message is forwarded. */
            forward_from?: string;
            /** @description ID of the message this one is directly replying to, if any. */
            reply_to_message_uuid?: string;
            /** @description ID of the original chat if this message is forwarded. */
            forward_from_chat_uuid?: string;
            /** @description ID of the original message if this is forwarded. */
            forward_from_message_uuid?: string;
            /** @description Additional context or metadata about the forwarded message. */
            forward_meta?: {
                [key: string]: unknown;
            };
            meta?: components["schemas"]["message_meta"];
            /**
             * Format: date-time
             * @description The date and time when the object was created.
             */
            readonly created_at?: string;
            /**
             * Format: date-time
             * @description The date and time when the message was last updated.
             */
            updated_at?: string;
        };
        sync_policy: {
            /** @description Unique identifier for the sync policy. */
            uuid?: string;
            /** @description Unique identifier for the user associated with the sync policy. */
            pipeline_uuid: string;
            /** @description Policy type (email, telegram, whatsapp, linkedin) */
            type?: string;
            /** @description Sync policy name */
            name: string;
            /** @description Whether this policy is currently active */
            is_enabled?: boolean;
            /** @description List of blocked emails or contact identifiers. */
            blocklist?: string[];
            /** @description List of contacts to exclude from syncing. */
            exclude_list?: string[];
            /** @description Indicates whether to sync all messages from the service (true means no filtering). */
            sync_all?: boolean;
            /** @description additional key-value settings for the sync policy. */
            settings?: {
                [key: string]: unknown;
            };
            /**
             * Format: date-time
             * @description Timestamp when the policy was created.
             */
            created_at?: string;
            /**
             * Format: date-time
             * @description Timestamp when the policy was last updated.
             */
            updated_at?: string;
        };
        contact: {
            readonly uuid?: string;
            readonly user_uuid?: string;
            readonly instance_uuid?: string;
            status?: string;
            names?: Record<string, never>;
            readonly names_search?: string;
            last?: string;
            first?: string;
            middle?: string;
            /** Format: date-time */
            birthday?: string;
            birthday_type?: string;
            salary?: string;
            salary_data?: Record<string, never>;
            last_positions?: Record<string, never>;
            last_position_id?: number;
            last_position_company_id?: number;
            last_position_company_name?: string;
            last_position_title?: string;
            /** Format: date-time */
            last_position_start_date?: string;
            /** Format: date-time */
            last_position_end_date?: string;
            last_position_end_now?: boolean;
            last_position_description?: string;
            readonly note_search?: string;
            note_kpi_id?: Record<string, never>;
            phones?: Record<string, never>;
            readonly phone_search?: string;
            phone1?: string;
            phone1_type?: string;
            phone1_country?: string;
            phone2?: string;
            phone2_type?: string;
            phone2_country?: string;
            phone3?: string;
            phone3_type?: string;
            phone3_country?: string;
            phone4?: string;
            phone4_type?: string;
            phone4_country?: string;
            phone5?: string;
            phone5_type?: string;
            phone5_country?: string;
            emails?: Record<string, never>;
            readonly email_search?: string;
            email1?: string;
            email1_type?: string;
            email2?: string;
            email2_type?: string;
            email3?: string;
            email3_type?: string;
            email4?: string;
            email4_type?: string;
            email5?: string;
            email5_type?: string;
            messengers?: Record<string, never>;
            readonly messengers_search?: string;
            skype_uuid?: string;
            skype?: string;
            whatsapp_uuid?: string;
            whatsapp?: string;
            telegram_uuid?: string;
            telegram?: string;
            wechat_uuid?: string;
            wechat?: string;
            line_uuid?: string;
            line?: string;
            socials?: Record<string, never>;
            socials_search?: string;
            linkedin_uuid?: string;
            linkedin_url?: string;
            facebook_uuid?: string;
            facebook_url?: string;
            twitter_uuid?: string;
            twitter_url?: string;
            github_uuid?: string;
            github_url?: string;
            vk_uuid?: string;
            vk_url?: string;
            odno_uuid?: string;
            odno_url?: string;
            hhru_uuid?: string;
            hhru_url?: string;
            habr_uuid?: string;
            habr_url?: string;
            moikrug_uuid?: string;
            moikrug_url?: string;
            instagram_uuid?: string;
            instagram_url?: string;
            social1_uuid?: string;
            social1_url?: string;
            social1_type?: string;
            social2_uuid?: string;
            social2_url?: string;
            social2_type?: string;
            social3_uuid?: string;
            social3_url?: string;
            social3_type?: string;
            social4_uuid?: string;
            social4_url?: string;
            social4_type?: string;
            social5_uuid?: string;
            social5_url?: string;
            social5_type?: string;
            social6_uuid?: string;
            social6_url?: string;
            social6_type?: string;
            social7_uuid?: string;
            social7_url?: string;
            social7_type?: string;
            social8_uuid?: string;
            social8_url?: string;
            social8_type?: string;
            social9_uuid?: string;
            social9_url?: string;
            social9_type?: string;
            tracking_source?: string;
            tracking_slug?: string;
            cached_img?: string;
            cached_img_data?: Record<string, never>;
            crawl?: Record<string, never>;
            duplicate_user_id?: string;
            duplicate_alternative_id?: string;
            /** Format: date-time */
            duplicate_report_date?: string;
            /** Format: date-time */
            readonly entry_date?: string;
            /** Format: date-time */
            readonly edit_date?: string;
            /** Format: date-time */
            readonly last_kpi_entry_date?: string;
        };
        user: {
            /** @description Unique identifier for the user */
            readonly uuid?: string;
            /**
             * Format: email
             * @description User's primary email address
             */
            email: string;
            /** @description User's password (hashed) */
            password: string;
            /** @description User's first name */
            first_name: string;
            /** @description User's last name */
            last_name: string;
            /** @description Indicates if the user is enabled */
            is_enabled?: boolean;
            /** @description Indicates if the user has administrative privileges */
            is_admin?: boolean;
            /** @description Arbitrary key-value metadata about the user */
            meta?: {
                [key: string]: unknown;
            };
            /**
             * Format: date-time
             * @description Timestamp of user creation
             */
            readonly created_at?: string;
            /**
             * Format: date-time
             * @description Timestamp of last update
             */
            readonly updated_at?: string;
        };
        worker_jobs: {
            /** @description Unique identifier */
            uuid?: string;
            /** @description UUID of the associated scheduler. */
            scheduler_uuid: string;
            /** @description UUID of the associated scheduler. */
            job_uuid?: string;
            /** @description NATS subject or job type. */
            subject: string;
            /** @description Current status of the job (e.g. 'running', 'completed', 'failed', 'retry'). */
            status: string;
            /** @description Arbitrary JSON data about job details, logs, errors, etc. */
            data?: {
                [key: string]: unknown;
            };
            /**
             * Format: date-time
             * @description Timestamp when the job was started.
             */
            started_at?: string;
            /**
             * Format: date-time
             * @description Timestamp when the job finished (if it has).
             */
            finished_at?: string;
        };
        email_label: {
            /** Format: int64 */
            HTTPStatusCode: number;
            Header: {
                [key: string]: string[];
            };
            id?: string;
            color?: {
                backgroundColor?: string;
                textColor?: string;
            };
            labelListVisibility?: string;
            messageListVisibility?: string;
            /** Format: int64 */
            messagesTotal?: number;
            /** Format: int64 */
            messagesUnread?: number;
            name?: string;
            /** Format: int64 */
            threadsTotal?: number;
            /** Format: int64 */
            threadsUnread?: number;
            type?: string;
        };
        oauth2_state: {
            /** @description Internal unique ID for the state record. */
            uuid?: string;
            /** @description UUID of the OAuth2 client associated with this state. */
            client_uuid: string;
            /** @description The state value (may include nonce, redirect_uri, etc.) used to prevent CSRF. */
            state: {
                [key: string]: unknown;
            };
            /**
             * Format: date-time
             * @description Timestamp when the state was created.
             */
            created_at?: string;
            /**
             * Format: date-time
             * @description Timestamp when the state was last updated.
             */
            updated_at?: string;
            /**
             * Format: date-time
             * @description Timestamp when the state should be invalidated.
             */
            expired_at: string;
        };
        oauth2_subject: {
            /** @description Internal unique ID for the subject record. */
            uuid?: string;
            /** @description UUID of the user in the system. */
            user_uuid: string;
            /** @description UUID of the associated OAuth2 token record. */
            token_uuid: string;
            /**
             * Format: date-time
             * @description Timestamp when the subject record was created.
             */
            created_at?: string;
            /**
             * Format: date-time
             * @description Timestamp when the subject record was last updated.
             */
            updated_at?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "scheduler-list": {
        parameters: {
            query?: {
                pipeline_uuid?: string;
                offset?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of scheduler definitions. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["scheduler"][];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "scheduler-create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["scheduler"];
            };
        };
        responses: {
            /** @description Scheduler created successfully. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["scheduler"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "scheduler-get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID of the scheduler */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Scheduler fetched successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["scheduler"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "scheduler-update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID of the scheduler */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["scheduler"];
            };
        };
        responses: {
            /** @description Scheduler updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["scheduler"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "scheduler-delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID of the scheduler */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Scheduler deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "datasource-list": {
        parameters: {
            query?: {
                /** @description The number of records to skip for pagination. */
                offset?: number;
                /** @description The maximum number of records to return. */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request was successful. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["datasource"][];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "datasource-email-list": {
        parameters: {
            query?: {
                /** @description Offset records. */
                offset?: number;
                /** @description Limit records. */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["datasource_email"][];
                };
            };
            /** @description Unexpected error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "datasource-email-create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["datasource_email"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["datasource_email"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "datasource-email-get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID of the email datasource. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["datasource_email"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "datasource-email-update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID of the datasource */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["datasource_email"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["datasource_email"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "datasource-email-delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID of the email datasource */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "datasource-email-oauth-list": {
        parameters: {
            query?: {
                /** @description Offset records. */
                offset?: number;
                /** @description Limit records. */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["datasource_email_oauth"][];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "datasource-email-oauth-create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["datasource_email_oauth"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["datasource_email_oauth"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "datasource-email-oauth-get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID of the email OAuth datasource. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["datasource_email_oauth"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "datasource-email-oauth-update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID of the email OAuth datasource. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["datasource_email_oauth"];
            };
        };
        responses: {
            /** @description Updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["datasource_email_oauth"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "datasource-email-oauth-delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID of the email OAuth datasource. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Deleted successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "datasource-set-oauth2-client": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID of the email datasource. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description OAuth2 client ID. */
                    client_id: string;
                };
            };
        };
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "datasource-telegram-list": {
        parameters: {
            query?: {
                /** @description Offset records */
                offset?: number;
                /** @description Limit records */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["datasource_telegram"][];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "datasource-telegram-create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["datasource_telegram"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["datasource_telegram"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "datasource-telegram-get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID of the Telegram datasource */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["datasource_telegram"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "datasource-telegram-update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID of the datasource */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["datasource_telegram"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["datasource_telegram"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "datasource-telegram-delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID of the Telegram datasource */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "datasource-whatsapp-list": {
        parameters: {
            query?: {
                /** @description Offset records */
                offset?: number;
                /** @description Limit records */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["datasource_whatsapp"][];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "datasource-whatsapp-create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["datasource_whatsapp"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["datasource_whatsapp"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "datasource-whatsapp-get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID of the WhatsApp datasource */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["datasource_whatsapp"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "datasource-whatsapp-update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID of the datasource */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["datasource_whatsapp"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["datasource_whatsapp"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "datasource-whatsapp-delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID of the WhatsApp datasource */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "datasource-linkedin-list": {
        parameters: {
            query?: {
                /** @description Offset records */
                offset?: number;
                /** @description Limit records */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["datasource_linkedin"][];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "datasource-linkedin-create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["datasource_linkedin"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["datasource_linkedin"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "datasource-linkedin-get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID of the LinkedIn datasource */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["datasource_linkedin"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "datasource-linkedin-update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID of the datasource */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["datasource_linkedin"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["datasource_linkedin"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "datasource-linkedin-delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID of the LinkedIn datasource */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "oauth2-client-callback": {
        parameters: {
            query?: {
                /** @description State UUID. */
                state?: string;
                /** @description OAuth2 code. */
                code?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found */
            302: {
                headers: {
                    /** @description Redirect URL for the browser */
                    Location?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "oauth2-client-list": {
        parameters: {
            query?: {
                /** @description Offset records. */
                offset?: number;
                /** @description Limit records. */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description List of OAuth2 clients. */
                        clients: components["schemas"]["oauth2_client"][];
                    };
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "oauth2-client-create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Name of the client. */
                    name: string;
                    /** @description Provider of the client. */
                    provider: string;
                    /** @description Secret of the client. */
                    secret: string;
                    /** @description Client ID. */
                    client_id: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["oauth2_client"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "oauth2-client-get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ClientID of the OAuth2 client. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["oauth2_client"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "oauth2-client-update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ClientID of the OAuth2 client details. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Name of the client. */
                    name: string;
                    /** @description Provider of the client. */
                    provider: string;
                    /** @description Secret of the client. */
                    secret: string;
                    /** @description Client ID. */
                    client_id: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["oauth2_client"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "oauth2-client-delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the connection base object. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "oauth2-client-token-list": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID of the datasource base object. */
                datasource_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["oauth2_client_token"][];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "oauth2-client-token-delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID of the token to delete. */
                uuid: string;
                /** @description datasource UUID to get tokens for. */
                datasource_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "oauth2-client-login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Query parameters. */
                    query: {
                        [key: string]: string[];
                    };
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Auth code URL. */
                        auth_code_url: string;
                    };
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "session-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Session status */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["session_status"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "pipeline-list": {
        parameters: {
            query?: {
                /** @description Filter pipelines by datasource UUID */
                datasource_uuid?: string;
                /** @description Filter pipelines by storage UUID */
                storage_uuid?: string;
                /** @description Offset records. */
                offset?: number;
                /** @description Limit records. */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of pipelines */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        pipelines: components["schemas"]["pipeline"][];
                    };
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "pipeline-create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["pipeline"];
            };
        };
        responses: {
            /** @description Pipeline created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["pipeline"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "pipeline-get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID of the pipeline */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Pipeline found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["pipeline"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "pipeline-update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID of the pipeline */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["pipeline"];
            };
        };
        responses: {
            /** @description Pipeline updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["pipeline"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "pipeline-delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID of the pipeline */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Pipeline deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "file-list": {
        parameters: {
            query?: {
                /** @description The number of records to skip for pagination. */
                offset?: number;
                /** @description The maximum number of records to return. */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of file objects. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileObject"][];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "file-create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description File upload request. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["UploadFileRequest"];
            };
        };
        responses: {
            /** @description File uploaded successfully. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UploadFileResponse"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "file-get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID of the file. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description File details retrieved successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileObject"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "file-update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID of the file. */
                uuid: string;
            };
            cookie?: never;
        };
        /** @description Updated file metadata. */
        requestBody: {
            content: {
                "application/json": {
                    /** @description Updated name of the file. */
                    name: string;
                };
            };
        };
        responses: {
            /** @description File metadata updated successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileObject"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "file-delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UUID of the file. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description File deleted successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "storage-list": {
        parameters: {
            query?: {
                /** @description The number of records to skip for pagination. */
                offset?: number;
                /** @description The maximum number of records to return. */
                limit?: number;
                /** @description Filter storage objects by type. */
                type?: string;
                /** @description Filter storage objects by the is_enabled boolean field. */
                is_enabled?: boolean;
                /** @description Filter storage objects by name (e.g., partial or exact match). */
                name?: string;
                /** @description Sort results by a specific column. */
                order_by?: "created_at" | "updated_at" | "name";
                /** @description Specify the sorting direction (ascending or descending). */
                order_direction?: "asc" | "desc";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request was successful. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["storage"][];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "storage-postgres-create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["storage_postgres"];
            };
        };
        responses: {
            /** @description PostgreSQL storage instance created successfully. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["storage_postgres"];
                };
            };
            /** @description An error occurred while creating the PostgreSQL storage instance. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "storage-postgres-get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The UUID of the PostgreSQL storage instance to retrieve. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description PostgreSQL storage instance details retrieved successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["storage_postgres"];
                };
            };
            /** @description An error occurred while retrieving the PostgreSQL storage instance details. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "storage-postgres-update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The UUID of the PostgreSQL storage instance to update. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["storage_postgres"];
            };
        };
        responses: {
            /** @description PostgreSQL storage instance updated successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["storage_postgres"];
                };
            };
            /** @description An error occurred while updating the PostgreSQL storage instance. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "storage-postgres-delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The UUID of the PostgreSQL storage instance to delete. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description PostgreSQL storage instance deleted successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An error occurred while deleting the PostgreSQL storage instance. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "storage-s3-create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["storage_s3"];
            };
        };
        responses: {
            /** @description S3 storage instance created successfully. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["storage_s3"];
                };
            };
            /** @description An error occurred while creating the S3 storage instance. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "storage-s3-get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The UUID of the S3 storage instance to retrieve. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description S3 storage instance details retrieved successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["storage_s3"];
                };
            };
            /** @description An error occurred while retrieving the S3 storage instance details. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "storage-s3-update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The UUID of the S3 storage instance to update. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["storage_s3"];
            };
        };
        responses: {
            /** @description S3 storage instance updated successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["storage_s3"];
                };
            };
            /** @description An error occurred while updating the S3 storage instance. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "storage-s3-delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The UUID of the S3 storage instance to delete. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description S3 storage instance deleted successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An error occurred while deleting the S3 storage instance. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "storage-hostfiles-create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["storage_hostfiles"];
            };
        };
        responses: {
            /** @description Host Files storage instance created successfully. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["storage_hostfiles"];
                };
            };
            /** @description An error occurred while creating the host files storage instance. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "storage-hostfiles-get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The UUID of the Host Files storage instance to retrieve. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Host Files storage instance details retrieved successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["storage_hostfiles"];
                };
            };
            /** @description An error occurred while retrieving the Host Files storage instance details. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "storage-hostfiles-update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The UUID of the Host Files storage instance to update. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["storage_hostfiles"];
            };
        };
        responses: {
            /** @description Host Files storage instance updated successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["storage_hostfiles"];
                };
            };
            /** @description An error occurred while updating the Host Files storage instance. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "storage-hostfiles-delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The UUID of the Host Files storage instance to delete. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Host Files storage instance deleted successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An error occurred while deleting the Host Files storage instance. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "tg-session-list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of Telegram sessions. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Total number of sessions */
                        total?: number;
                        sessions?: components["schemas"]["telegram"][];
                    };
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "tg-session-create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description Phone number in international format
                     * @example +16505551234
                     */
                    phone: string;
                };
            };
        };
        responses: {
            /** @description Session created successfully. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["telegram"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "tg-session-verify": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Session ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Hash of the phone code */
                    phone_code_hash?: string;
                    /** @description Verification code */
                    code?: string;
                    /** @description Optional password for 2FA */
                    password?: string;
                };
            };
        };
        responses: {
            /** @description Session verified successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["telegram"];
                };
            };
            /** @description Error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    messageQuery: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["message_query"];
            };
        };
        responses: {
            /** @description List of matching unified messages. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description List of messages matching the query. */
                        messages: components["schemas"]["message"][];
                    };
                };
            };
            /** @description Query execution error. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    messageEmailQuery: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["message_query"];
            };
        };
        responses: {
            /** @description List of matching email messages. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description List of messages matching the query. */
                        messages: components["schemas"]["message"][];
                    };
                };
            };
            /** @description Query execution error. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    messageWhatsappQuery: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["message_query"];
            };
        };
        responses: {
            /** @description List of matching WhatsApp messages. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description List of messages matching the query. */
                        messages: components["schemas"]["message"][];
                    };
                };
            };
            /** @description Query execution error. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    messageTelegramQuery: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["message_query"];
            };
        };
        responses: {
            /** @description List of matching Telegram messages. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description List of messages matching the query. */
                        messages: components["schemas"]["message"][];
                    };
                };
            };
            /** @description Query execution error. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    messageLinkedinQuery: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["message_query"];
            };
        };
        responses: {
            /** @description List of matching LinkedIn messages. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description List of messages matching the query. */
                        messages: components["schemas"]["message"][];
                    };
                };
            };
            /** @description Query execution error. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    uploadFile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UploadFileRequest"];
            };
        };
        responses: {
            /** @description File uploaded successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UploadFileResponse"];
                };
            };
            /** @description Unexpected error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    generatePresignedUploadUrl: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UploadPresignedUrlRequest"];
            };
        };
        responses: {
            /** @description Pre-signed upload URL generated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UploadPresignedUrlResponse"];
                };
            };
            /** @description Unexpected error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    generateDownloadLink: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GenerateDownloadLinkRequest"];
            };
        };
        responses: {
            /** @description Download link generated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenerateDownloadLinkResponse"];
                };
            };
            /** @description Unexpected error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "syncpolicy-list": {
        parameters: {
            query?: {
                /** @description Offset records. */
                offset?: number;
                /** @description Limit records. */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of sync policies. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        policies: components["schemas"]["sync_policy"][];
                    };
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "syncpolicy-create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Sync policy to create. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["sync_policy"];
            };
        };
        responses: {
            /** @description Sync policy created successfully. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["sync_policy"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "syncpolicy-get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier of the sync policy. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Sync policy details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["sync_policy"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "syncpolicy-update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier of the sync policy. */
                uuid: string;
            };
            cookie?: never;
        };
        /** @description Updated sync policy details. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["sync_policy"];
            };
        };
        responses: {
            /** @description Sync policy updated successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["sync_policy"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "syncpolicy-delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier of the sync policy. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Sync policy deleted successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    listContacts: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of contacts */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["contact"][];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    createContact: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["contact"];
            };
        };
        responses: {
            /** @description Contact created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["contact"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    getContact: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Contact details retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["contact"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    updateContact: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["contact"];
            };
        };
        responses: {
            /** @description Contact updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["contact"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    deleteContact: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Contact deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    listUsers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of users */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["user"][];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    createUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["user"];
            };
        };
        responses: {
            /** @description User created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["user"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    getUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User details retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["user"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    updateUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["user"];
            };
        };
        responses: {
            /** @description User updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["user"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    deleteUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "worker-jobs-list": {
        parameters: {
            query?: {
                /** @description The number of records to skip for pagination. */
                offset?: number;
                /** @description The maximum number of records to return. */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of worker jobs. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        jobs: components["schemas"]["worker_jobs"][];
                    };
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "worker-jobs-get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier of the worker job. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Worker job details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["worker_jobs"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "worker-jobs-delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier of the worker job. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Worker job deleted successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "worker-jobs-cancel": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier of the worker job to cancel */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Cancellation requested */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
}
